(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    944603,      19290]
NotebookOptionsPosition[    940100,      19173]
NotebookOutlinePosition[    940475,      19189]
CellTagsIndexPosition[    940432,      19186]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{"Framed", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{
      "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
       "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
        "===", "===", "===", "===", "===", "===", 
       RowBox[{"\[Equal]", 
        RowBox[{"===", "===", "===", "===", "===", "===", "===", "==="}]}]}], 
      "="}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"(*", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "Verificando", " ", "altera\[CCedilla]\[ATilde]o", " ", "das", " ", 
       "vari\[AAcute]veis", " ", "para", " ", "evitar", " ", "trabalho", " ", 
       "extra"}], " ", "*)"}], "\[IndentingNewLine]", "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{
      "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
       "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
        "===", "===", "===", "===", "===", "===", 
       RowBox[{"\[Equal]", 
        RowBox[{"===", "===", "===", "===", "===", "===", "===", "==="}]}]}], 
      "="}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Total", "[", "MassAll", "]"}], "\[Equal]", "0"}], ",", 
        RowBox[{"Goto", "[", "SkipVerification", "]"}]}], "]"}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "Skip", " ", "verification", " ", "in", " ", "the", " ", "case", " ", 
         "of", " ", "first", " ", "run"}], ",", " ", 
        RowBox[{
        "when", " ", "none", " ", "of", " ", "the", " ", "variables", " ", 
         "are", " ", "declared", " ", "and", " ", "this", " ", "check", " ", 
         "will", " ", "return", " ", "error"}]}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"(*", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "timetepVerif", ",", "masstoleranceVerif", ",", "massType", ",", 
           RowBox[{"EvolMassAll", "[", 
            RowBox[{"[", 
             RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", 
           RowBox[{"Length", "[", "FAll", "]"}], ",", 
           RowBox[{
            RowBox[{"EvolVel", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{"FAll", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "[", 
             RowBox[{"[", "1", "]"}], "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"-", "1"}], "]"}], "]"}], ",", "HFragValue", ",", 
           "FragAngleList", ",", "dcType", ",", "phiType", ",", "energyType", 
           ",", 
           RowBox[{"ToString", "[", "OB", "]"}], ",", 
           RowBox[{"ToString", "[", "CT", "]"}], ",", 
           RowBox[{"ToString", "[", "MD", "]"}], ",", 
           RowBox[{"ToString", "[", "MV", "]"}], ",", 
           RowBox[{"ToString", "[", "DisplayCM", "]"}], ",", 
           RowBox[{"ToString", "[", "JoinPoints", "]"}], ",", 
           RowBox[{"ToString", "[", "axis2", "]"}]}], "}"}], "\[Equal]", 
         RowBox[{"{", 
          RowBox[{"TimeStep", ",", "MTolerance", ",", "mass", ",", "M", ",", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"nfrags", "\[Equal]", "1"}], ",", "1", ",", 
             RowBox[{"nfrags", "+", "1"}]}], "]"}], ",", "VE", ",", "H", ",", 
           "HFrag", ",", 
           RowBox[{"{", 
            RowBox[{
            "UnifAngle", ",", "RandomAngle", ",", "Q1", ",", "Q2", ",", "Q3", 
             ",", "Q4"}], "}"}], ",", "Dc", ",", "\[Phi]E", ",", "Efr", ",", 
           RowBox[{"ToString", "[", "OpacityButton", "]"}], ",", 
           RowBox[{"ToString", "[", "ColorType", "]"}], ",", 
           RowBox[{"ToString", "[", "MassDecal", "]"}], ",", 
           RowBox[{"ToString", "[", "MassValues", "]"}], ",", 
           RowBox[{"ToString", "[", "D2", "]"}], ",", 
           RowBox[{"ToString", "[", "J2", "]"}], ",", 
           RowBox[{"ToString", "[", "AX", "]"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Goto", "[", "PerformingPlots", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "timetepVerif", ",", "masstoleranceVerif", ",", "massType", ",", 
           RowBox[{"EvolMassAll", "[", 
            RowBox[{"[", 
             RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", 
           RowBox[{"Length", "[", "FAll", "]"}], ",", 
           RowBox[{
            RowBox[{"EvolVel", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{"FAll", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "[", 
             RowBox[{"[", "1", "]"}], "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"-", "1"}], "]"}], "]"}], ",", "HFragValue", ",", 
           "FragAngleList", ",", "dcType", ",", "phiType", ",", "energyType", 
           ",", 
           RowBox[{"ToString", "[", "OB", "]"}], ",", 
           RowBox[{"ToString", "[", "CT", "]"}]}], "}"}], "\[Equal]", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"TimeStep", ",", "MTolerance", ",", "mass", ",", "M", ",", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"nfrags", "\[Equal]", "1"}], ",", "1", ",", 
             RowBox[{"nfrags", "+", "1"}]}], "]"}], ",", "VE", ",", "H", ",", 
           "HFrag", ",", 
           RowBox[{"{", 
            RowBox[{
            "UnifAngle", ",", "RandomAngle", ",", "Q1", ",", "Q2", ",", "Q3", 
             ",", "Q4"}], "}"}], ",", "Dc", ",", "\[Phi]E", ",", "Efr", ",", 
           RowBox[{"ToString", "[", "OpacityButton", "]"}], ",", 
           RowBox[{"ToString", "[", "ColorType", "]"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Goto", "[", "Plotting2", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "timetepVerif", ",", "masstoleranceVerif", ",", "massType", ",", 
           RowBox[{"EvolMassAll", "[", 
            RowBox[{"[", 
             RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", 
           RowBox[{"Length", "[", "FAll", "]"}], ",", 
           RowBox[{
            RowBox[{"EvolVel", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{"FAll", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "[", 
             RowBox[{"[", "1", "]"}], "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"-", "1"}], "]"}], "]"}], ",", "HFragValue", ",", 
           "FragAngleList", ",", "dcType", ",", "phiType", ",", 
           "energyType"}], "}"}], "\[Equal]", 
         RowBox[{"{", 
          RowBox[{"TimeStep", ",", "MTolerance", ",", "mass", ",", "M", ",", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"nfrags", "\[Equal]", "1"}], ",", "1", ",", 
             RowBox[{"nfrags", "+", "1"}]}], "]"}], ",", "VE", ",", "H", ",", 
           "HFrag", ",", 
           RowBox[{"{", 
            RowBox[{
            "UnifAngle", ",", "RandomAngle", ",", "Q1", ",", "Q2", ",", "Q3", 
             ",", "Q4"}], "}"}], ",", "Dc", ",", "\[Phi]E", ",", "Efr"}], 
          "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"Goto", "[", "Plotting", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"Label", "[", "SkipVerification", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "==="}]}]}], "="}],
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{"FallData", "=", 
       RowBox[{"{", "}"}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "To", " ", "be", " ", "used", " ", "as", " ", "main", " ", "list", " ",
         "to", " ", "append", " ", "values", " ", "of", " ", "position", " ", 
        "of", " ", "each", " ", "fragment"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "==="}]}]}], "="}],
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Definindo", " ", "fun\[CCedilla]\[ATilde]o", " ", "que", " ", 
         "calcula", " ", "Delta_t", " ", "ideal"}], " ", "*)"}], 
       "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "==="}]}]}], "="}],
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"IdealTime", "[", 
        RowBox[{"m_", ",", "v_", ",", "t_"}], "]"}], ":=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Drag", "[", 
           RowBox[{
            RowBox[{"r", "[", "m", "]"}], ",", 
            RowBox[{"RhoAr", "[", "zi", "]"}]}], "]"}], "\[NotEqual]", "0"}], 
         ",", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"t", "<", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"2.", "/", "3."}], ")"}], "*", 
             RowBox[{"m", "/", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Drag", "[", 
                 RowBox[{
                  RowBox[{"r", "[", "m", "]"}], ",", 
                  RowBox[{"RhoAr", "[", "zi", "]"}]}], "]"}], "*", "v"}], 
               ")"}]}]}]}], ",", "t", ",", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"2.", "/", "3."}], ")"}], "*", 
            RowBox[{"m", "/", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Drag", "[", 
                RowBox[{
                 RowBox[{"r", "[", "m", "]"}], ",", 
                 RowBox[{"RhoAr", "[", "zi", "]"}]}], "]"}], "*", "v"}], 
              ")"}]}]}]}], "]"}], ",", "t"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "==="}]}]}], "="}],
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Constants", " ", "and", " ", "Relevant", " ", "Enviroment", " ", 
         "Functions"}], " ", "*)"}], "\[IndentingNewLine]", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "==="}]}]}], "="}],
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"===", "===", "==="}], "=", 
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", "Constants", " ", "*)"}], " ", "\[IndentingNewLine]", 
      RowBox[{"AltToposfera", "=", "11000."}], ";", " ", 
      RowBox[{"(*", "15000.", "*)"}], " ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Altura", " ", "m\[AAcute]xima", " ", "m\[EAcute]dia", " ", "da", " ", 
        "Toposfera", " ", "em", " ", "m"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"TempMesosfera", "=", " ", "218."}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Temperatura", " ", "da", " ", "Toposfera", " ", "em", " ", "15", " ", 
        "km", " ", "de", " ", "altura", " ", "em", " ", "K"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"eta", "=", "1.8"}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"Emissividade", " ", "da", " ", "atmosfera"}], " ", "+", " ", 
        RowBox[{"Emissividade", " ", "do", " ", "corpo"}]}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"g", "=", "9.8"}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{"Gravidade", " ", "em", " ", 
        RowBox[{"m", "/", "s"}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"StefanBoltzm", "=", 
       RowBox[{"5.6697", "*", 
        RowBox[{"10", "^", 
         RowBox[{"(", 
          RowBox[{"-", "8"}], ")"}]}]}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"Constante", " ", "de", " ", "Stefan"}], "-", 
        RowBox[{"Boltzmann", " ", "em", " ", "W", " ", 
         RowBox[{"m", "^", 
          RowBox[{"-", "2"}]}], " ", 
         RowBox[{"K", "^", 
          RowBox[{"-", "4"}]}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"\[Theta]E", "=", "0."}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "\[CapitalAHat]ngulo", " ", "Azimutal", " ", "de", " ", "entrada"}], 
       " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"Mmol", "=", "0.0289644"}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Massa", " ", "molar", " ", "do", " ", "ar", " ", "seco", " ", "em", 
        " ", 
        RowBox[{"kg", "/", "mol"}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"T0", "=", "288.15"}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"Temp", ".", " ", "atmosf\[EAcute]rica"}], " ", "ao", " ", 
        "n\[IAcute]vel", " ", "do", " ", "mar", " ", "em", " ", "K"}], " ", 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"L", "=", "0.0065"}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Taxa", " ", "de", " ", "gradiente", " ", "adiab\[AAcute]tico", " ", 
        "em", " ", 
        RowBox[{"K", "/", "m"}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"p0", "=", "101326."}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Press\[ATilde]o", " ", "atmosf\[EAcute]rica", " ", "ao", " ", 
        "n\[IAcute]vel", " ", "do", " ", "mar", " ", "em", " ", "Pa"}], " ", 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"R", "=", "8.31447"}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Constante", " ", "do", " ", "g\[AAcute]s", " ", "ideal", " ", "em", 
        " ", 
        RowBox[{"J", "/", 
         RowBox[{"(", 
          RowBox[{"mol", " ", "K"}], ")"}]}]}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"===", "===", "==="}], "=", 
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
         RowBox[{
         "Tabela", " ", "fornecendo", " ", "valores", " ", "de", " ", 
          "densidade", " ", 
          RowBox[{"atm", ".", " ", "e"}], " ", "temperatura", " ", "para", 
          " ", "altitudes", " ", "maiores", " ", "que", " ", 
          RowBox[{"T0", "/", "L"}]}], " ", "=", " ", 
         RowBox[{"43", " ", "mil", " ", "metros"}]}], ",", " ", 
        RowBox[{
        "pois", " ", "a", " ", "fun\[CCedilla]\[ATilde]o", " ", "RhoAr", " ", 
         "d\[AAcute]", " ", "complexo", " ", "acima", " ", "disso"}]}], " ", 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"TabelaTemporaria", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"15000.", ",", "0.1948", ",", 
           RowBox[{"-", "56.50"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"20000.", ",", "0.08891", ",", 
           RowBox[{"-", "56.50"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"25000.", ",", "0.04008", ",", 
           RowBox[{"-", "51.60"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"30000.", ",", "0.01841", ",", 
           RowBox[{"-", "46.64"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"40000", ",", "0.003996", ",", 
           RowBox[{"-", "22.80"}]}], " ", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"50000.", ",", "0.001027", ",", 
           RowBox[{"-", "25"}]}], " ", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"60000.", ",", "0.0003097", ",", 
           RowBox[{"-", "26.13"}]}], " ", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"70000.", ",", "0.00008283", ",", 
           RowBox[{"-", "53.57"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"80000.", ",", "0.00001846", ",", 
           RowBox[{"-", "74.51"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"90000.", ",", "0.000001", ",", 
           RowBox[{"-", "80.0"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"100000.", ",", "0.0000001", ",", 
           RowBox[{"-", "80.00"}]}], "}"}]}], "}"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"===", "===", "==="}], "=", 
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Fun\[CCedilla]\[OTilde]es", " ", "de", " ", "Densidade", " ", "do", 
        " ", "ar", " ", "de", " ", "acordo", " ", "com", " ", "altitude"}], 
       " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"RhoAr", "[", "h_", "]"}], ":=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"h", "<", "AltToposfera"}], ",", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"p0", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"1", "-", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"L", "*", "h"}], ")"}], "/", "T0"}]}], ")"}], "^", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"g", "*", "Mmol"}], ")"}], "/", 
                 RowBox[{"(", 
                  RowBox[{"R", "*", "L"}], ")"}]}], ")"}]}]}], ")"}], "*", 
            "Mmol"}], ")"}], "/", 
          RowBox[{"(", 
           RowBox[{"R", "*", 
            RowBox[{"(", 
             RowBox[{"T0", "-", 
              RowBox[{"L", "*", "h"}]}], ")"}]}], ")"}]}], ",", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"h", "<", "30000."}], ",", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"h", "<", "25000."}], ",", 
             RowBox[{
              RowBox[{"TabelaTemporaria", "[", 
               RowBox[{"[", 
                RowBox[{"Round", "[", 
                 RowBox[{
                  RowBox[{"h", "/", 
                   RowBox[{"10", "^", "4"}]}], "-", ".5"}], "]"}], "]"}], 
               "]"}], "[", 
              RowBox[{"[", "2", "]"}], "]"}], ",", 
             RowBox[{
              RowBox[{"TabelaTemporaria", "[", 
               RowBox[{"[", "3", "]"}], "]"}], "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ",", 
           RowBox[{
            RowBox[{"TabelaTemporaria", "[", 
             RowBox[{"[", 
              RowBox[{
               RowBox[{"Round", "[", 
                RowBox[{"h", "/", 
                 RowBox[{"10", "^", "4"}]}], "]"}], "+", "1"}], "]"}], "]"}], 
            "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "==="}]}]}], "="}],
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Par\[AHat]metros", " ", "para", " ", "cada", " ", "corpo", " ", 
         "i"}], " ", "*)"}], "\[IndentingNewLine]", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "==="}]}]}], "="}],
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"===", "===", "==="}], "=", 
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"Massa", ",", " ", 
        RowBox[{
        "Velocidade", " ", "de", " ", "fragmenta\[CCedilla]\[ATilde]o"}], ",",
         " ", 
        RowBox[{
        "Raio", " ", "e", " ", "Constante", " ", "de", " ", "Arraste"}]}], 
       " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"m", "[", "frac_", "]"}], ":=", 
       RowBox[{"frac", "*", "M"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Vfr", "[", "m_", "]"}], ":=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"m", "\[NotEqual]", "0"}], ",", 
         RowBox[{"Sqrt", "[", 
          RowBox[{"(", 
           RowBox[{"2.", "*", 
            RowBox[{"Efr", "/", "m"}]}], ")"}], "]"}], ",", "0"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"r", "[", "m_", "]"}], ":=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"3.", "*", "m"}], ")"}], "/", 
          RowBox[{"(", 
           RowBox[{"rho", "*", "4.", "*", 
            RowBox[{"N", "[", "Pi", "]"}]}], ")"}]}], ")"}], "^", 
        RowBox[{"(", 
         RowBox[{"1", "/", "3."}], ")"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Drag", "[", 
        RowBox[{"r_", ",", "RhoAr_"}], "]"}], ":=", " ", 
       RowBox[{"0.5", "*", "RhoAr", "*", "Dc", "*", 
        RowBox[{"(", 
         RowBox[{"Pi", "*", 
          RowBox[{"r", "^", "2"}]}], ")"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"===", "===", "==="}], "=", 
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"Temperatura", " ", "do", " ", "corpo"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Temp", "[", 
        RowBox[{"vel_", ",", "h_"}], "]"}], ":=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"h", "<", "AltToposfera"}], ",", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"T0", "-", 
            RowBox[{"L", "*", "h"}]}], ")"}], "*", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"1", "+", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"Mmol", "*", 
                RowBox[{"vel", "^", "2"}]}], ")"}], "/", 
              RowBox[{"(", 
               RowBox[{"2", "*", "R", "*", 
                RowBox[{"(", 
                 RowBox[{"T0", "-", 
                  RowBox[{"L", "*", "h"}]}], ")"}]}], ")"}]}]}], ")"}], "^", 
           RowBox[{"(", 
            RowBox[{"2.", "/", "7."}], ")"}]}]}], ",", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"h", "<", "30000."}], ",", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"h", "<", "25000."}], ",", 
             RowBox[{
              RowBox[{"TAmbiente", "=", 
               RowBox[{
                RowBox[{
                 RowBox[{"TabelaTemporaria", "[", 
                  RowBox[{"[", 
                   RowBox[{"Round", "[", 
                    RowBox[{"h", "/", 
                    RowBox[{"10", "^", "4"}]}], "]"}], "]"}], "]"}], "[", 
                 RowBox[{"[", "3", "]"}], "]"}], "+", "273."}]}], ";", 
              RowBox[{
               RowBox[{"(", "TAmbiente", ")"}], "*", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"1", "+", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"Mmol", "*", 
                    RowBox[{"vel", "^", "2"}]}], ")"}], "/", 
                   RowBox[{"(", 
                    RowBox[{"2", "*", "R", "*", 
                    RowBox[{"(", "TAmbiente", ")"}]}], ")"}]}]}], ")"}], "^", 
                RowBox[{"(", 
                 RowBox[{"2.", "/", "7."}], ")"}]}]}]}], ",", 
             RowBox[{
              RowBox[{"TAmbiente", "=", 
               RowBox[{
                RowBox[{
                 RowBox[{"TabelaTemporaria", "[", 
                  RowBox[{"[", "3", "]"}], "]"}], "[", 
                 RowBox[{"[", "3", "]"}], "]"}], "+", "273."}]}], ";", 
              RowBox[{
               RowBox[{"(", "TAmbiente", ")"}], "*", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"1", "+", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"Mmol", "*", 
                    RowBox[{"vel", "^", "2"}]}], ")"}], "/", 
                   RowBox[{"(", 
                    RowBox[{"2", "*", "R", "*", 
                    RowBox[{"(", "TAmbiente", ")"}]}], ")"}]}]}], ")"}], "^", 
                RowBox[{"(", 
                 RowBox[{"2.", "/", "7."}], ")"}]}]}]}]}], "]"}], ",", 
           RowBox[{
            RowBox[{"TAmbiente", "=", 
             RowBox[{
              RowBox[{
               RowBox[{"TabelaTemporaria", "[", 
                RowBox[{"[", 
                 RowBox[{
                  RowBox[{"Round", "[", 
                   RowBox[{"h", "/", 
                    RowBox[{"10", "^", "4"}]}], "]"}], "+", "1"}], "]"}], 
                "]"}], "[", 
               RowBox[{"[", "3", "]"}], "]"}], "+", "273."}]}], ";", 
            RowBox[{
             RowBox[{"(", "TAmbiente", ")"}], "*", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"1", "+", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"Mmol", "*", 
                   RowBox[{"vel", "^", "2"}]}], ")"}], "/", 
                 RowBox[{"(", 
                  RowBox[{"2", "*", "R", "*", 
                   RowBox[{"(", "TAmbiente", ")"}]}], ")"}]}]}], ")"}], "^", 
              RowBox[{"(", 
               RowBox[{"2.", "/", "7."}], ")"}]}]}]}]}], "]"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"===", "===", "==="}], "=", 
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Fun\[CCedilla]\[ATilde]o", " ", "de", " ", "perda", " ", "de", " ", 
        "massa"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Dm", "[", 
        RowBox[{"vel_", ",", "acel_", ",", "T_", ",", "r_", ",", "m_"}], 
        "]"}], ":=", 
       RowBox[{
        RowBox[{"-", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"eta", "*", "StefanBoltzm", "*", 
            RowBox[{"(", 
             RowBox[{"T", "^", "4"}], ")"}], "*", "4", "*", 
            RowBox[{"N", "[", "Pi", "]"}], "*", 
            RowBox[{"r", "^", "2."}]}], "+", 
           RowBox[{"m", "*", "vel", "*", "acel"}]}], " ", ")"}]}], "/", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"0.5", "*", 
           RowBox[{"vel", "^", "2."}]}], "+", "Lv"}], ")"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"===", "===", "==="}], "=", 
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Velocidades", " ", "iniciais", " ", "para", " ", "o", " ", "primeiro",
         " ", "corpo"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Vx0", "[", "Vinit_", "]"}], ":=", " ", 
       RowBox[{"Vinit", "*", 
        RowBox[{"N", "[", 
         RowBox[{
          RowBox[{"Sin", "[", 
           RowBox[{"\[Phi]E", " ", "Degree"}], "]"}], "*", 
          RowBox[{"Cos", "[", 
           RowBox[{"\[Theta]E", " ", "Degree"}], "]"}]}], "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Vy0", "[", "Vinit_", "]"}], ":=", " ", 
       RowBox[{"Vinit", "*", 
        RowBox[{"N", "[", 
         RowBox[{
          RowBox[{"Sin", "[", 
           RowBox[{"\[Phi]E", " ", "Degree"}], "]"}], "*", 
          RowBox[{"Sin", "[", 
           RowBox[{"\[Theta]E", " ", "Degree"}], "]"}]}], "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Vz0", "[", "Vinit_", "]"}], ":=", " ", 
       RowBox[{"Vinit", "*", 
        RowBox[{"N", "[", 
         RowBox[{"Cos", "[", 
          RowBox[{"\[Phi]E", " ", "Degree"}], "]"}], "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"===", "===", "==="}], "=", 
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Velocidades", " ", "iniciais", " ", "para", " ", "fragmentos"}], " ", 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"VxFrag", "[", 
        RowBox[{"Vinit_", ",", "Vfr_", ",", "\[Theta]Fr_", ",", "\[Phi]Fr_"}],
         "]"}], ":=", " ", 
       RowBox[{"Vinit", "+", 
        RowBox[{"Vfr", "*", 
         RowBox[{"Sin", "[", 
          RowBox[{"\[Phi]Fr", " ", "Degree"}], "]"}], "*", 
         RowBox[{"Cos", "[", 
          RowBox[{"\[Theta]Fr", " ", "Degree"}], "]"}]}]}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "atentar", " ", "para", " ", "usar", " ", "vinit", " ", "de", " ", "X",
         " ", "no", " ", "input"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"VyFrag", "[", 
        RowBox[{"Vinit_", ",", "Vfr_", ",", "\[Theta]Fr_", ",", "\[Phi]Fr_"}],
         "]"}], ":=", " ", 
       RowBox[{"Vinit", "+", 
        RowBox[{"Vfr", "*", 
         RowBox[{"Sin", "[", 
          RowBox[{"\[Phi]Fr", " ", "Degree"}], "]"}], "*", 
         RowBox[{"Sin", "[", 
          RowBox[{"\[Theta]Fr", " ", "Degree"}], "]"}]}]}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "atentar", " ", "para", " ", "usar", " ", "vinit", " ", "de", " ", "Y",
         " ", "no", " ", "input"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"VzFrag", "[", 
        RowBox[{"Vinit_", ",", "Vfr_", ",", "\[Theta]Fr_", ",", "\[Phi]Fr_"}],
         "]"}], ":=", " ", 
       RowBox[{"Vinit", "+", 
        RowBox[{"Vfr", "*", 
         RowBox[{"Cos", "[", 
          RowBox[{"\[Phi]Fr", " ", "Degree"}], "]"}]}]}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "atentar", " ", "para", " ", "usar", " ", "vinit", " ", "de", " ", "Z",
         " ", "no", " ", "input"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "==="}]}]}], "="}],
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"Main", " ", "Body", " ", "Calculations"}], " ", "*)"}], 
       "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "==="}]}]}], "="}],
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"===", "===", "==="}], "=", 
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Gerando", " ", "Listas", " ", "para", " ", "an\[AAcute]lise"}], " ", 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"EvolTime", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"MassAll", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"FinalMassAll", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"EvolMassAll", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"FinalTemp", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"EvolTemp", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"EvolVel", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"EvolAccel", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"i", "=", "1"}], ";", "\[IndentingNewLine]", 
      RowBox[{"AppendTo", "[", 
       RowBox[{"EvolMassAll", ",", 
        RowBox[{"{", "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"AppendTo", "[", 
       RowBox[{"EvolTemp", ",", 
        RowBox[{"{", "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"AppendTo", "[", 
       RowBox[{"EvolVel", ",", 
        RowBox[{"{", "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"AppendTo", "[", 
       RowBox[{"EvolAccel", ",", 
        RowBox[{"{", "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"AppendTo", "[", 
       RowBox[{"EvolTime", ",", 
        RowBox[{"{", "0", "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Xi", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Yi", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Zi", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"===", "===", "==="}], "=", 
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"Mass", " ", "Tolerance"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"Massa", " ", "de", " ", "Toler\[AHat]ncia"}], ",", " ", 
        RowBox[{
         RowBox[{
         "que", " ", "diz", " ", "at\[EAcute]", " ", "que", " ", 
          "fra\[CCedilla]\[ATilde]o", " ", "da", " ", "massa", " ", "inicial",
           " ", "deve"}], "-", 
         RowBox[{
         "se", " ", "prosseguir", " ", "com", " ", "o", " ", "programa"}]}]}],
        " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"MTolerance", "=", "0.01"}], ";"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"===", "===", "==="}], "=", 
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Aplicando", " ", "Condi\[CCedilla]\[OTilde]es", " ", "Iniciais"}], 
       " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"mi", "=", "M"}], ";", "\[IndentingNewLine]", 
      RowBox[{"AppendTo", "[", 
       RowBox[{
        RowBox[{"EvolMassAll", "[", 
         RowBox[{"[", "i", "]"}], "]"}], ",", "mi"}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"AppendTo", "[", 
       RowBox[{"MassAll", ",", "mi"}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"\[Theta]Fri", "=", "0."}], ";", "\[IndentingNewLine]", 
      RowBox[{"Vfri", "=", 
       RowBox[{"Vfr", "[", "mi", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Vxi", "=", 
       RowBox[{"Vx0", "[", "VE", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Vyi", "=", 
       RowBox[{"Vy0", "[", "VE", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Vzi", "=", 
       RowBox[{"Vz0", "[", "VE", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"xi", "=", 
       RowBox[{"yi", "=", "0"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"zi", "=", "H"}], ";", "\[IndentingNewLine]", 
      RowBox[{"V", "=", "VE"}], ";", "\[IndentingNewLine]", 
      RowBox[{"AppendTo", "[", 
       RowBox[{
        RowBox[{"EvolVel", "[", 
         RowBox[{"[", "i", "]"}], "]"}], ",", "V"}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"T", "=", 
       RowBox[{"Temp", "[", 
        RowBox[{"V", ",", "zi"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"AppendTo", "[", 
       RowBox[{
        RowBox[{"EvolTemp", "[", 
         RowBox[{"[", "i", "]"}], "]"}], ",", "T"}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"dm", "=", "mi"}], ";", "\[IndentingNewLine]", 
      RowBox[{"dr", "=", 
       RowBox[{"r", "[", "mi", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"===", "===", "==="}], "=", 
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"Definindo", " ", "Time", " ", "Step"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"TimeStep", " ", "=", " ", "0.01"}], ";"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"Checking", " ", "if", " ", "is", " ", "ideal"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"DeltaT", "=", 
       RowBox[{"IdealTime", "[", 
        RowBox[{"dm", ",", "V", ",", "TimeStep"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"===", "===", "==="}], "=", 
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"Performing", " ", "Runge", " ", "Kutta"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"nfrags", "\[Equal]", "1"}], ",", 
          RowBox[{"zi", ">", "0"}], ",", 
          RowBox[{"zi", ">", "HFrag"}]}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"fragID", "=", 
          RowBox[{"i", "-", "1"}]}], ";", " ", 
         RowBox[{"(*", " ", 
          RowBox[{"To", " ", "display", " ", "on", " ", "output"}], " ", 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"dm", "\[LessEqual]", "MTolerance"}], ",", " ", 
           RowBox[{"(*", " ", 
            RowBox[{
            "Skiping", " ", "calculation", " ", "if", " ", "M", " ", 
             "reaches", " ", "MTolerance"}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"Goto", "[", "SkipNullMass", "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"AppendTo", "[", 
          RowBox[{
           RowBox[{"EvolTime", "[", 
            RowBox[{"[", "i", "]"}], "]"}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{"EvolTime", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"-", "1"}], "]"}], "]"}], "+", "DeltaT"}]}], "]"}], ";",
          "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"++", 
           RowBox[{"++", 
            RowBox[{"++", 
             RowBox[{"++", 
              RowBox[{"++", 
               RowBox[{"++", 
                RowBox[{"++", 
                 RowBox[{"++", 
                  RowBox[{"++", 
                   RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{
                    "++", "+"}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}\
]}]}]}]}]}]}]}]}]}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "Updating", " ", "values", " ", "for", " ", "initial", " ", 
           "condition"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"rhoAr", "=", 
          RowBox[{"RhoAr", "[", "zi", "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"Di", "=", 
          RowBox[{"Drag", "[", 
           RowBox[{"dr", ",", "rhoAr"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"++", 
           RowBox[{"++", 
            RowBox[{"++", 
             RowBox[{"++", 
              RowBox[{"++", 
               RowBox[{"++", 
                RowBox[{"++", 
                 RowBox[{"++", 
                  RowBox[{"++", 
                   RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{
                    "++", "+"}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}\
]}]}]}]}]}]}]}]}]}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "Updating", " ", "meteoroid", " ", "position", " ", "data"}], " ", 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"Xi", ",", 
           RowBox[{"SetPrecision", "[", 
            RowBox[{"xi", ",", "MachinePrecision"}], "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"Yi", ",", 
           RowBox[{"SetPrecision", "[", 
            RowBox[{"yi", ",", "MachinePrecision"}], "]"}]}], "]"}], ";", " ",
          "\[IndentingNewLine]", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"Zi", ",", 
           RowBox[{"SetPrecision", "[", 
            RowBox[{"zi", ",", "MachinePrecision"}], "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"++", 
           RowBox[{"++", 
            RowBox[{"++", 
             RowBox[{"++", 
              RowBox[{"++", 
               RowBox[{"++", 
                RowBox[{"++", 
                 RowBox[{"++", 
                  RowBox[{"++", 
                   RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{
                    "++", "+"}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}\
]}]}]}]}]}]}]}]}]}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Calculating", " ", "parameters"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"axi", "=", 
          RowBox[{
           RowBox[{"-", 
            RowBox[{"(", 
             RowBox[{"Di", "/", "dm"}], ")"}]}], "*", "V", "*", "Vxi"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"ayi", "=", 
          RowBox[{
           RowBox[{"-", 
            RowBox[{"(", 
             RowBox[{"Di", "/", "dm"}], ")"}]}], "*", "V", "*", "Vyi"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"azi", "=", 
          RowBox[{
           RowBox[{"-", "g"}], "-", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"Di", "/", "dm"}], ")"}], "*", "V", "*", "Vzi"}]}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"Vxi", "=", 
          RowBox[{"Vxi", "+", 
           RowBox[{"axi", "*", "DeltaT"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"Vyi", "=", 
          RowBox[{"Vyi", "+", 
           RowBox[{"ayi", "*", "DeltaT"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"Vzi", "=", 
          RowBox[{"Vzi", "+", 
           RowBox[{"azi", "*", "DeltaT"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"xi", "=", 
          RowBox[{"xi", "+", 
           RowBox[{"Vxi", "*", "DeltaT"}], "+", 
           RowBox[{"0.5", "*", "axi", "*", 
            RowBox[{"DeltaT", "^", "2"}]}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"yi", "=", 
          RowBox[{"yi", "+", 
           RowBox[{"Vyi", "*", "DeltaT"}], "+", 
           RowBox[{"0.5", "*", "ayi", "*", 
            RowBox[{"DeltaT", "^", "2"}]}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"zi", "=", 
          RowBox[{"zi", "+", 
           RowBox[{"Vzi", "*", "DeltaT"}], "+", 
           RowBox[{"0.5", "*", "azi", "*", 
            RowBox[{"DeltaT", "^", "2"}]}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"++", 
           RowBox[{"++", 
            RowBox[{"++", 
             RowBox[{"++", 
              RowBox[{"++", 
               RowBox[{"++", 
                RowBox[{"++", 
                 RowBox[{"++", 
                  RowBox[{"++", 
                   RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{
                    "++", "+"}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}\
]}]}]}]}]}]}]}]}]}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Updating", " ", "Values"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"V", "=", 
          RowBox[{"Sqrt", "[", 
           RowBox[{
            RowBox[{"Vxi", "^", "2"}], "+", 
            RowBox[{"Vyi", "^", "2"}], "+", 
            RowBox[{"Vzi", "^", "2"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"a", "=", 
          RowBox[{"Sqrt", "[", 
           RowBox[{
            RowBox[{"axi", "^", "2"}], "+", 
            RowBox[{"ayi", "^", "2"}], "+", 
            RowBox[{"azi", "^", "2"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"T", "=", 
          RowBox[{"Temp", "[", 
           RowBox[{"V", ",", "zi"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"dm", "=", 
          RowBox[{"dm", "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"Dm", "[", 
              RowBox[{"V", ",", "a", ",", "T", ",", "dr", ",", "dm"}], "]"}], 
             ")"}], "*", "DeltaT"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"dm", ">", "0"}], ",", 
           RowBox[{"dm", "=", "dm"}], ",", 
           RowBox[{"dm", "=", "0."}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"dr", "=", 
          RowBox[{"r", "[", "dm", "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"++", 
           RowBox[{"++", 
            RowBox[{"++", 
             RowBox[{"++", 
              RowBox[{"++", 
               RowBox[{"++", 
                RowBox[{"++", 
                 RowBox[{"++", 
                  RowBox[{"++", 
                   RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{
                    "++", "+"}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}\
]}]}]}]}]}]}]}]}]}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Appending", " ", "Values", " ", "to", " ", "Lists"}], " ", 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"AppendTo", "[", 
          RowBox[{
           RowBox[{"EvolVel", "[", 
            RowBox[{"[", "i", "]"}], "]"}], ",", "V"}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"AppendTo", "[", 
          RowBox[{
           RowBox[{"EvolAccel", "[", 
            RowBox[{"[", "i", "]"}], "]"}], ",", "a"}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"AppendTo", "[", 
          RowBox[{
           RowBox[{"EvolTemp", "[", 
            RowBox[{"[", "i", "]"}], "]"}], ",", "T"}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"AppendTo", "[", 
          RowBox[{
           RowBox[{"EvolMassAll", "[", 
            RowBox[{"[", "i", "]"}], "]"}], ",", "dm"}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"++", 
           RowBox[{"++", 
            RowBox[{"++", 
             RowBox[{"++", 
              RowBox[{"++", 
               RowBox[{"++", 
                RowBox[{"++", 
                 RowBox[{"++", 
                  RowBox[{"++", 
                   RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{
                    "++", "+"}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}\
]}]}]}]}]}]}]}]}]}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Advancing", " ", "TimeStep"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"DeltaT", "=", 
          RowBox[{"IdealTime", "[", 
           RowBox[{"dm", ",", "V", ",", "TimeStep"}], "]"}]}]}]}], 
       "\[IndentingNewLine]", 
       StyleBox[" ",
        FontSize->14], 
       StyleBox["]",
        FontSize->14]}], 
      StyleBox[";",
       FontSize->14], 
      StyleBox["\[IndentingNewLine]",
       FontSize->14], 
      RowBox[{
       StyleBox[
        RowBox[{
         StyleBox["(",
          FontSize->14], "*"}]], " ", 
       RowBox[{"Fim", " ", "Runge", " ", "Kutta"}], " ", "*)"}], 
      StyleBox["\[IndentingNewLine]",
       FontSize->14], 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"===", "===", "==="}], "=", 
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Appending", " ", "Values", " ", "to", " ", "other", " ", "Lists"}], 
       " ", "*)"}], 
      StyleBox["\[IndentingNewLine]",
       FontSize->14], 
      RowBox[{"Label", "[", "SkipNullMass", "]"}], ";", 
      StyleBox["\[IndentingNewLine]",
       FontSize->14], 
      RowBox[{"AppendTo", "[", 
       RowBox[{"FinalMassAll", ",", "dm"}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"AppendTo", "[", 
       RowBox[{"FinalTemp", ",", "T"}], "]"}], ";", 
      StyleBox["\[IndentingNewLine]",
       FontSize->14], 
      RowBox[{"AppendTo", "[", 
       RowBox[{"Xi", ",", 
        RowBox[{"SetPrecision", "[", 
         RowBox[{"xi", ",", "MachinePrecision"}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"AppendTo", "[", 
       RowBox[{"Yi", ",", 
        RowBox[{"SetPrecision", "[", 
         RowBox[{"yi", ",", "MachinePrecision"}], "]"}]}], "]"}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"dm", "<", "0"}], "||", 
         RowBox[{"zi", "<", "0"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"Zi", ",", 
          RowBox[{"SetPrecision", "[", 
           RowBox[{"0.", ",", "MachinePrecision"}], "]"}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"Zi", ",", 
          RowBox[{"SetPrecision", "[", 
           RowBox[{"zi", ",", "MachinePrecision"}], "]"}]}], "]"}]}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"AppendTo", "[", 
       RowBox[{"FallData", ",", 
        RowBox[{"Transpose", "[", 
         RowBox[{"{", 
          RowBox[{"Xi", ",", "Yi", ",", "Zi"}], "}"}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"===", "===", "==="}], "=", 
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "To", " ", "be", " ", "used", " ", "as", " ", "initial", " ", 
        "velocities", " ", "for", " ", "following", " ", "fragments"}], " ", 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"VxResult", "=", "Vxi"}], ";", "\[IndentingNewLine]", 
      RowBox[{"VyResult", "=", "Vyi"}], ";", "\[IndentingNewLine]", 
      RowBox[{"VzResult", "=", "Vzi"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "==="}]}]}], "="}],
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"Fragments", " ", "Calculation"}], " ", "*)"}], 
       "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "==="}]}]}], "="}],
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"===", "===", "==="}], "=", 
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"nfrags", " ", ">", " ", 
        RowBox[{
        "1", " ", "indicates", " ", "that", " ", "user", " ", "chose", " ", 
         "fragmentation", " ", "among", " ", "inputs"}]}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"nfrags", ">", "1"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"MFrag", "=", 
          RowBox[{"EvolMassAll", "[", 
           RowBox[{"[", 
            RowBox[{"1", ",", 
             RowBox[{"-", "1"}]}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"For", "[", 
          RowBox[{
           RowBox[{"i", "=", "2"}], ",", 
           RowBox[{"i", "\[LessEqual]", 
            RowBox[{"nfrags", "+", "1"}]}], ",", 
           RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"fragID", "=", 
             RowBox[{"i", "-", "1"}]}], ";", " ", 
            RowBox[{"(*", " ", 
             RowBox[{"To", " ", "display", " ", "on", " ", "output"}], " ", 
             "*)"}], "\[IndentingNewLine]", 
            RowBox[{"AppendTo", "[", 
             RowBox[{"EvolMassAll", ",", 
              RowBox[{"{", "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"AppendTo", "[", 
             RowBox[{"EvolTemp", ",", 
              RowBox[{"{", "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"AppendTo", "[", 
             RowBox[{"EvolVel", ",", 
              RowBox[{"{", "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"AppendTo", "[", 
             RowBox[{"EvolAccel", ",", 
              RowBox[{"{", "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"AppendTo", "[", 
             RowBox[{"EvolTime", ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"EvolTime", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "[", 
                RowBox[{"[", 
                 RowBox[{"-", "1"}], "]"}], "]"}], "}"}]}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{"===", "===", "==="}], "=", 
              RowBox[{
              "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
                "===", "===", 
               RowBox[{"\[Equal]", 
                RowBox[{
                "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}],
              "*)"}], "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{"Working", " ", "on", " ", "mass", " ", "distribution"}],
              " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"mRand", "=", "0"}], ";", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{"Massa", " ", "Uniforme"}], " ", "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"mass", "\[Equal]", "unif"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"mi", "=", 
                RowBox[{"MFrag", "*", 
                 RowBox[{"(", 
                  RowBox[{"1.", "/", "nfrags"}], ")"}]}]}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{"Massa", " ", "Aleatoria"}], " ", "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"mass", "\[Equal]", "random"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"1", "-", "mRand"}], ")"}], ">", "0"}], ",", 
                 RowBox[{
                  RowBox[{"mi", "=", 
                   RowBox[{"MFrag", "*", 
                    RowBox[{"RandomReal", "[", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    RowBox[{"1", "-", "mRand"}]}], "}"}], "]"}]}]}], ";", 
                  RowBox[{"mRand", "=", 
                   RowBox[{"mRand", "+", 
                    RowBox[{"mi", "/", "MFrag"}]}]}]}], ",", 
                 RowBox[{"mi", "=", "0."}]}], "]"}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{"Massa", " ", "Crescente"}], " ", "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"mass", "\[Equal]", "cresce"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"mi", "=", 
                RowBox[{"MFrag", "*", 
                 RowBox[{"(", 
                  RowBox[{"i", "/", 
                   RowBox[{"Total", "[", 
                    RowBox[{"Table", "[", 
                    RowBox[{"n", ",", 
                    RowBox[{"{", 
                    RowBox[{"n", ",", "1.", ",", "nfrags", ",", "1."}], 
                    "}"}]}], "]"}], "]"}]}], ")"}]}]}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{"Massa", " ", "Uniforme", " ", "2"}], " ", "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"mass", "\[Equal]", "cresce2"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"EvenQ", "[", "nfrags", "]"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"i1", "=", 
                   RowBox[{"Table", "[", 
                    RowBox[{"n", ",", 
                    RowBox[{"{", 
                    RowBox[{"n", ",", "1", ",", 
                    RowBox[{"nfrags", "/", "2"}], ",", "1"}], "}"}]}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"i2", "=", 
                   RowBox[{"Reverse", "[", 
                    RowBox[{"Table", "[", 
                    RowBox[{"n", ",", 
                    RowBox[{"{", 
                    RowBox[{"n", ",", 
                    RowBox[{"i1", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"nfrags", "/", "2"}], "+", "1"}], ",", "1"}], 
                    "}"}]}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"ii", "=", 
                   RowBox[{"Join", "[", 
                    RowBox[{"i1", ",", "i2"}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"a", "=", 
                   RowBox[{"MFrag", "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"nfrags", "^", "2"}], ")"}], "/", "4."}], "+", 
                    "nfrags"}], ")"}]}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"mi", "=", 
                   RowBox[{
                    RowBox[{"ii", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", "-", "1"}], "]"}], "]"}], "*", "a"}]}]}]}], 
                "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"OddQ", "[", "nfrags", "]"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"i1", "=", 
                   RowBox[{"Table", "[", 
                    RowBox[{"n", ",", 
                    RowBox[{"{", 
                    RowBox[{"n", ",", "1", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"nfrags", "+", "1"}], ")"}], "/", "2"}], ",", 
                    "1"}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"i2", "=", 
                   RowBox[{"Reverse", "[", 
                    RowBox[{"Table", "[", 
                    RowBox[{"n", ",", 
                    RowBox[{"{", 
                    RowBox[{"n", ",", 
                    RowBox[{"i1", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"nfrags", "+", "1"}], ")"}], "/", "2"}], ",", 
                    "1"}], "}"}]}], "]"}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"ii", "=", 
                   RowBox[{"Join", "[", 
                    RowBox[{"i1", ",", "i2"}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"a", "=", 
                   RowBox[{"MFrag", "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"nfrags", "^", "2"}], ")"}], "/", "4."}], "+", 
                    "nfrags"}], ")"}], "-", 
                    RowBox[{"1.", "/", "4."}]}], ")"}]}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"mi", "=", 
                   RowBox[{
                    RowBox[{"ii", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", "-", "1"}], "]"}], "]"}], "*", "a"}]}]}]}], 
                "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
             "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{"Massa", " ", "Decrescente"}], " ", "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"mass", "\[Equal]", "decresce"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"mi", "=", 
                RowBox[{"MFrag", "*", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"nfrags", "-", 
                    RowBox[{"(", 
                    RowBox[{"i", "-", "1"}], ")"}]}], ")"}], "/", 
                   RowBox[{"Total", "[", 
                    RowBox[{"Table", "[", 
                    RowBox[{"n", ",", 
                    RowBox[{"{", 
                    RowBox[{"n", ",", "1.", ",", "nfrags", ",", "1."}], 
                    "}"}]}], "]"}], "]"}]}], ")"}]}]}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{"Massa", " ", "Decrescente", " ", "2"}], " ", "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"mass", "\[Equal]", "decresce2"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"EvenQ", "[", "nfrags", "]"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"i1", "=", 
                   RowBox[{"Table", "[", 
                    RowBox[{"n", ",", 
                    RowBox[{"{", 
                    RowBox[{"n", ",", "1", ",", 
                    RowBox[{"nfrags", "/", "2"}], ",", "1"}], "}"}]}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"i2", "=", 
                   RowBox[{"Reverse", "[", 
                    RowBox[{"Table", "[", 
                    RowBox[{"n", ",", 
                    RowBox[{"{", 
                    RowBox[{"n", ",", 
                    RowBox[{"i1", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"nfrags", "/", "2"}], "+", "1"}], ",", "1"}], 
                    "}"}]}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"ii", "=", 
                   RowBox[{"Join", "[", 
                    RowBox[{"i2", ",", "i1"}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"a", "=", 
                   RowBox[{"MFrag", "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"nfrags", "^", "2"}], ")"}], "/", "4."}], "+", 
                    "nfrags"}], ")"}]}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"mi", "=", 
                   RowBox[{
                    RowBox[{"ii", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", "-", "1"}], "]"}], "]"}], "*", "a"}]}]}]}], 
                "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"OddQ", "[", "nfrags", "]"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"i1", "=", 
                   RowBox[{"Table", "[", 
                    RowBox[{"n", ",", 
                    RowBox[{"{", 
                    RowBox[{"n", ",", "1", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"nfrags", "-", "1"}], ")"}], "/", "2"}], ",", 
                    "1"}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"i2", "=", 
                   RowBox[{"Reverse", "[", 
                    RowBox[{"Table", "[", 
                    RowBox[{"n", ",", 
                    RowBox[{"{", 
                    RowBox[{"n", ",", "1", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"nfrags", "+", "1"}], ")"}], "/", "2"}], ",", 
                    "1"}], "}"}]}], "]"}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"ii", "=", 
                   RowBox[{"Join", "[", 
                    RowBox[{"i2", ",", "i1"}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"a", "=", 
                   RowBox[{"MFrag", "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"nfrags", "^", "2"}], ")"}], "/", "4."}], "+", 
                    "nfrags"}], ")"}], "-", 
                    RowBox[{"1.", "/", "4."}]}], ")"}]}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"mi", "=", 
                   RowBox[{
                    RowBox[{"ii", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", "-", "1"}], "]"}], "]"}], "*", "a"}]}]}]}], 
                "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
             "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{"===", "===", "==="}], "=", 
              RowBox[{
              "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
                "===", "===", 
               RowBox[{"\[Equal]", 
                RowBox[{
                "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}],
              "*)"}], "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "Appending", " ", "mass", " ", "value", " ", "to", " ", "list"}],
              " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"AppendTo", "[", 
             RowBox[{
              RowBox[{"EvolMassAll", "[", 
               RowBox[{"[", "i", "]"}], "]"}], ",", "mi"}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"AppendTo", "[", 
             RowBox[{"MassAll", ",", "mi"}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{"===", "===", "==="}], "=", 
              RowBox[{
              "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
                "===", "===", 
               RowBox[{"\[Equal]", 
                RowBox[{
                "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}],
              "*)"}], "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "Working", " ", "on", " ", "azimutal", " ", "angle", " ", 
              "distribution"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"Q1", "&&", "Q2", "&&", "Q3", "&&", 
               RowBox[{"Q4", "\[Equal]", "True"}]}], ",", 
              RowBox[{"UnifAngle", "=", "True"}]}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"Q2", "||", "Q3", "||", "Q4", "||", 
               RowBox[{"Q1", "\[Equal]", "False"}]}], ",", 
              RowBox[{"UnifAngle", "=", "True"}]}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"UnifAngle", "\[Equal]", "True"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"\[Theta]Fri", "=", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"i", "-", "1"}], ")"}], "*", 
                 RowBox[{"360.", "/", "nfrags"}]}]}], ";", 
               RowBox[{"Goto", "[", "SkipOtherVerific", "]"}]}]}], "]"}], ";",
             "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"RandomAngle", "\[Equal]", "True"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"\[Theta]Fri", "=", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"RandomReal", "[", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    RowBox[{"1", "-", "mRand"}]}], "}"}], "]"}], "*", "i"}], 
                   "-", "1"}], ")"}], "*", 
                 RowBox[{"360.", "/", "nfrags"}]}]}], ";", 
               RowBox[{"Goto", "[", "SkipOtherVerific", "]"}]}]}], "]"}], ";",
             "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"Q1", "&&", "Q2", "&&", 
               RowBox[{"Q3", "\[Equal]", "True"}], "&&", 
               RowBox[{"Q4", "\[Equal]", "False"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"i", "\[LessEqual]", 
                  RowBox[{"nfrags", "/", "3"}]}], ",", 
                 RowBox[{"\[Theta]Fri", "=", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"i", "-", "1"}], ")"}], "*", 
                   RowBox[{"360.", "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "nfrags"}], ")"}]}]}]}]}], "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"i", "\[LessEqual]", 
                  RowBox[{"2", "*", 
                   RowBox[{"nfrags", "/", "3."}]}]}], ",", 
                 RowBox[{"\[Theta]Fri", "=", 
                  RowBox[{"90", "+", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "-", "1"}], ")"}], "*", 
                    RowBox[{"360.", "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "nfrags"}], ")"}]}]}]}]}]}], "]"}], ";",
                "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"i", "\[LessEqual]", 
                  RowBox[{"nfrags", "/", "1"}]}], ",", 
                 RowBox[{"\[Theta]Fri", "=", 
                  RowBox[{"180", "+", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "-", "1"}], ")"}], "*", 
                    RowBox[{"360.", "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "nfrags"}], ")"}]}]}]}]}]}], "]"}], ";", 
               RowBox[{"Goto", "[", "SkipOtherVerific", "]"}]}]}], "]"}], ";",
             "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"Q1", "&&", "Q2", "&&", 
               RowBox[{"Q4", "\[Equal]", "True"}], "&&", 
               RowBox[{"Q3", "\[Equal]", "False"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"i", "\[LessEqual]", 
                  RowBox[{"nfrags", "/", "3"}]}], ",", 
                 RowBox[{"\[Theta]Fri", "=", 
                  RowBox[{
                   RowBox[{"-", "90"}], "+", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "-", "1"}], ")"}], "*", 
                    RowBox[{"360.", "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "nfrags"}], ")"}]}]}]}]}]}], "]"}], ";",
                "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"i", "\[LessEqual]", 
                  RowBox[{"2", "*", 
                   RowBox[{"nfrags", "/", "3."}]}]}], ",", 
                 RowBox[{"\[Theta]Fri", "=", 
                  RowBox[{"90", "+", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "-", "1"}], ")"}], "*", 
                    RowBox[{"360.", "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "nfrags"}], ")"}]}]}]}]}]}], "]"}], ";",
                "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"i", "\[LessEqual]", 
                  RowBox[{"nfrags", "/", "1"}]}], ",", 
                 RowBox[{"\[Theta]Fri", "=", 
                  RowBox[{"90", "-", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "-", "1"}], ")"}], "*", 
                    RowBox[{"360.", "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "nfrags"}], ")"}]}]}]}]}]}], "]"}], ";", 
               RowBox[{"Goto", "[", "SkipOtherVerific", "]"}]}]}], "]"}], ";",
             "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"Q2", "&&", "Q3", "&&", 
               RowBox[{"Q4", "\[Equal]", "True"}], "&&", 
               RowBox[{"Q1", "\[Equal]", "False"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"i", "\[LessEqual]", 
                  RowBox[{"nfrags", "/", "3"}]}], ",", 
                 RowBox[{"\[Theta]Fri", "=", 
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"i", "-", "1"}], ")"}]}], "*", 
                   RowBox[{"360.", "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "nfrags"}], ")"}]}]}]}]}], "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"i", "\[LessEqual]", 
                  RowBox[{"2", "*", 
                   RowBox[{"nfrags", "/", "3."}]}]}], ",", 
                 RowBox[{"\[Theta]Fri", "=", 
                  RowBox[{"90", "+", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "-", "1"}], ")"}], "*", 
                    RowBox[{"360.", "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "nfrags"}], ")"}]}]}]}]}]}], "]"}], ";",
                "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"i", "\[LessEqual]", 
                  RowBox[{"nfrags", "/", "1"}]}], ",", 
                 RowBox[{"\[Theta]Fri", "=", 
                  RowBox[{"180", "+", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "-", "1"}], ")"}], "*", 
                    RowBox[{"360.", "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "nfrags"}], ")"}]}]}]}]}]}], "]"}], ";", 
               RowBox[{"Goto", "[", "SkipOtherVerific", "]"}]}]}], "]"}], ";",
             "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"Q1", "&&", "Q3", "&&", 
               RowBox[{"Q4", "\[Equal]", "True"}], "&&", 
               RowBox[{"Q2", "\[Equal]", "False"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"i", "\[LessEqual]", 
                  RowBox[{"nfrags", "/", "3"}]}], ",", 
                 RowBox[{"\[Theta]Fri", "=", 
                  RowBox[{"180", "+", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "-", "1"}], ")"}], "*", 
                    RowBox[{"360.", "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "nfrags"}], ")"}]}]}]}]}]}], "]"}], ";",
                "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"i", "\[LessEqual]", 
                  RowBox[{"2", "*", 
                   RowBox[{"nfrags", "/", "3."}]}]}], ",", 
                 RowBox[{"\[Theta]Fri", "=", 
                  RowBox[{"90", "-", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "-", "1"}], ")"}], "*", 
                    RowBox[{"360.", "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "nfrags"}], ")"}]}]}]}]}]}], "]"}], ";",
                "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"i", "\[LessEqual]", 
                  RowBox[{"nfrags", "/", "1"}]}], ",", 
                 RowBox[{"\[Theta]Fri", "=", 
                  RowBox[{
                   RowBox[{"-", "90"}], "+", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "-", "1"}], ")"}], "*", 
                    RowBox[{"360.", "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "nfrags"}], ")"}]}]}]}]}]}], "]"}], ";", 
               RowBox[{"Goto", "[", "SkipOtherVerific", "]"}]}]}], "]"}], ";",
             "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"Q1", "&&", 
               RowBox[{"Q2", "\[Equal]", "True"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"\[Theta]Fri", "=", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"i", "-", "1"}], ")"}], "*", 
                 RowBox[{"360.", "/", 
                  RowBox[{"(", 
                   RowBox[{"2", "*", "nfrags"}], ")"}]}]}]}], ";", 
               RowBox[{"Goto", "[", "SkipOtherVerific", "]"}]}]}], "]"}], ";",
             "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"Q1", "&&", 
               RowBox[{"Q3", "\[Equal]", "True"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"i", "\[LessEqual]", 
                  RowBox[{"nfrags", "/", "2"}]}], ",", 
                 RowBox[{"\[Theta]Fri", "=", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"i", "-", "1"}], ")"}], "*", 
                   RowBox[{"360.", "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "nfrags"}], ")"}]}]}]}]}], "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"i", ">", 
                  RowBox[{"nfrags", "/", "2"}]}], ",", 
                 RowBox[{"\[Theta]Fri", "=", 
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"i", "-", "1"}], ")"}]}], "*", 
                   RowBox[{"360.", "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "nfrags"}], ")"}]}]}]}]}], "]"}], ";", 
               RowBox[{"Goto", "[", "SkipOtherVerific", "]"}]}]}], "]"}], ";",
             "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"Q1", "&&", 
               RowBox[{"Q4", "\[Equal]", "True"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"\[Theta]Fri", "=", 
                RowBox[{
                 RowBox[{"-", "90"}], "+", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"i", "-", "1"}], ")"}], "*", 
                  RowBox[{"360.", "/", 
                   RowBox[{"(", 
                    RowBox[{"2", "*", "nfrags"}], ")"}]}]}]}]}], ";", 
               RowBox[{"Goto", "[", "SkipOtherVerific", "]"}]}]}], "]"}], ";",
             "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"Q2", "&&", 
               RowBox[{"Q3", "\[Equal]", "True"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"\[Theta]Fri", "=", 
                RowBox[{"90", "+", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"i", "-", "1"}], ")"}], "*", 
                  RowBox[{"360.", "/", 
                   RowBox[{"(", 
                    RowBox[{"2", "*", "nfrags"}], ")"}]}]}]}]}], ";", 
               RowBox[{"Goto", "[", "SkipOtherVerific", "]"}]}]}], "]"}], ";",
             "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"Q2", "&&", 
               RowBox[{"Q4", "\[Equal]", "True"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"i", "\[LessEqual]", 
                  RowBox[{"nfrags", "/", "2"}]}], ",", 
                 RowBox[{"\[Theta]Fri", "=", 
                  RowBox[{
                   RowBox[{"-", "90"}], "+", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "-", "1"}], ")"}], "*", 
                    RowBox[{"360.", "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "nfrags"}], ")"}]}]}]}]}]}], "]"}], ";",
                "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"i", ">", 
                  RowBox[{"nfrags", "/", "2"}]}], ",", 
                 RowBox[{"\[Theta]Fri", "=", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"i", "-", "1"}], ")"}], "*", 
                   RowBox[{"360.", "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "nfrags"}], ")"}]}]}]}]}], "]"}], ";", 
               RowBox[{"Goto", "[", "SkipOtherVerific", "]"}]}]}], "]"}], ";",
             "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"Q3", "&&", 
               RowBox[{"Q4", "\[Equal]", "True"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"\[Theta]Fri", "=", 
                RowBox[{
                 RowBox[{"-", 
                  RowBox[{"(", 
                   RowBox[{"i", "-", "1"}], ")"}]}], "*", 
                 RowBox[{"360.", "/", 
                  RowBox[{"(", 
                   RowBox[{"2", "*", "nfrags"}], ")"}]}]}]}], ";", 
               RowBox[{"Goto", "[", "SkipOtherVerific", "]"}]}]}], "]"}], ";",
             "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"Q2", "\[Equal]", "True"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"\[Theta]Fri", "=", 
                RowBox[{"90", "+", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"i", "-", "1"}], ")"}], "*", 
                  RowBox[{"360.", "/", 
                   RowBox[{"(", 
                    RowBox[{"4", "*", "nfrags"}], ")"}]}]}]}]}], ";", 
               RowBox[{"Goto", "[", "SkipOtherVerific", "]"}]}]}], "]"}], ";",
             "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"Q3", "\[Equal]", "True"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"\[Theta]Fri", "=", 
                RowBox[{"180", "+", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"i", "-", "1"}], ")"}], "*", 
                  RowBox[{"360.", "/", 
                   RowBox[{"(", 
                    RowBox[{"4", "*", "nfrags"}], ")"}]}]}]}]}], ";", 
               RowBox[{"Goto", "[", "SkipOtherVerific", "]"}]}]}], "]"}], ";",
             "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"Q4", "\[Equal]", "True"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"\[Theta]Fri", "=", 
                RowBox[{
                 RowBox[{"-", 
                  RowBox[{"(", 
                   RowBox[{"i", "-", "1"}], ")"}]}], "*", 
                 RowBox[{"360.", "/", 
                  RowBox[{"(", 
                   RowBox[{"4", "*", "nfrags"}], ")"}]}]}]}], ";", 
               RowBox[{"Goto", "[", "SkipOtherVerific", "]"}]}]}], "]"}], ";",
             "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"Q1", "\[Equal]", "True"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"\[Theta]Fri", "=", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"i", "-", "1"}], ")"}], "*", 
                 RowBox[{"360.", "/", 
                  RowBox[{"(", 
                   RowBox[{"4", "*", "nfrags"}], ")"}]}]}]}], ";", 
               RowBox[{"Goto", "[", "SkipOtherVerific", "]"}]}]}], "]"}], ";",
             "\[IndentingNewLine]", 
            RowBox[{"Label", "[", "SkipOtherVerific", "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{"===", "===", "==="}], "=", 
              RowBox[{
              "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
                "===", "===", 
               RowBox[{"\[Equal]", 
                RowBox[{
                "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}],
              "*)"}], "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "Vertical", " ", "angle", " ", "of", " ", "fragmentation"}], " ",
              "*)"}], "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "Creating", " ", "Slope", " ", "Variable", " ", "at", " ", 
              "breakup"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"xin", "=", 
             RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"index", "=", "1"}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Total", "[", 
                RowBox[{
                 RowBox[{"FAll", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "[", 
                 RowBox[{"[", 
                  RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}], "==", "0"}],
               ",", 
              RowBox[{"Slope", "=", "180"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"While", "[", 
                RowBox[{
                 RowBox[{"index", "<", 
                  RowBox[{"Length", "[", 
                   RowBox[{"FAll", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ",", 
                 RowBox[{
                  RowBox[{"AppendTo", "[", 
                   RowBox[{"xin", ",", 
                    RowBox[{"Differences", "[", 
                    RowBox[{
                    RowBox[{"FAll", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"index", "+", "1"}], ")"}]}], ",", 
                    RowBox[{"-", "index"}]}], "}"}], ",", "1"}], "]"}], "]"}],
                     "]"}]}], "]"}], ";", 
                  RowBox[{"index", "=", 
                   RowBox[{"index", "+", "1"}]}]}]}], "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"tanNum", "=", 
                RowBox[{
                 RowBox[{
                  RowBox[{"DeleteCases", "[", 
                   RowBox[{"xin", ",", 
                    RowBox[{"{", "0.", "}"}]}], "]"}], "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"zin", "=", 
                RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"index", "=", "1"}], ";", "\[IndentingNewLine]", 
               RowBox[{"While", "[", 
                RowBox[{
                 RowBox[{"index", "<", 
                  RowBox[{"Length", "[", 
                   RowBox[{"FAll", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ",", 
                 RowBox[{
                  RowBox[{"AppendTo", "[", 
                   RowBox[{"zin", ",", 
                    RowBox[{"Differences", "[", 
                    RowBox[{
                    RowBox[{"FAll", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"index", "+", "1"}], ")"}]}], ",", 
                    RowBox[{"-", "index"}]}], "}"}], ",", "3"}], "]"}], "]"}],
                     "]"}]}], "]"}], ";", 
                  RowBox[{"index", "=", 
                   RowBox[{"index", "+", "1"}]}]}]}], "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"tanDen", "=", 
                RowBox[{
                 RowBox[{
                  RowBox[{"DeleteCases", "[", 
                   RowBox[{"zin", ",", 
                    RowBox[{"{", "0.", "}"}]}], "]"}], "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"Slope", "=", 
                RowBox[{
                 RowBox[{
                  RowBox[{"ArcTan", "[", 
                   RowBox[{"(", 
                    RowBox[{"tanNum", "/", "tanDen"}], ")"}], "]"}], "*", 
                  RowBox[{"180", "/", "Pi"}], "*", 
                  RowBox[{"(", 
                   RowBox[{"-", "1"}], ")"}]}], "+", "90"}]}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"\[Phi]Fr", "=", "Slope"}], ";", "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{"===", "===", "==="}], "=", 
              RowBox[{
              "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
                "===", "===", 
               RowBox[{"\[Equal]", 
                RowBox[{
                "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}],
              "*)"}], "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "New", " ", "Positions", " ", "Lists", " ", "for", " ", "New", 
              " ", "Fragments"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"Xi", "=", 
             RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"Yi", "=", 
             RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"Zi", "=", 
             RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{"===", "===", "==="}], "=", 
              RowBox[{
              "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
                "===", "===", 
               RowBox[{"\[Equal]", 
                RowBox[{
                "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}],
              "*)"}], "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{"Aplicando", " ", "Condi\[CCedilla]\[OTilde]es"}], " ", 
             "*)"}], "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "Todos", " ", "os", " ", "valores", " ", "aqui", " ", 
              "utilizados", " ", "s\[ATilde]o", " ", "provenientes", " ", 
              "do", " ", "Main", " ", "Body"}], " ", "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{"V", "=", 
             RowBox[{"EvolVel", "[", 
              RowBox[{"[", 
               RowBox[{"1", ",", 
                RowBox[{"-", "1"}]}], "]"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"AppendTo", "[", 
             RowBox[{
              RowBox[{"EvolVel", "[", 
               RowBox[{"[", "i", "]"}], "]"}], ",", "V"}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"Vfri", "=", 
             RowBox[{"Vfr", "[", "mi", "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"Vxi", "=", 
             RowBox[{"VxFrag", "[", 
              RowBox[{
              "VxResult", ",", "Vfri", ",", "\[Theta]Fri", ",", "\[Phi]Fr"}], 
              "]"}]}], ";", " ", 
            RowBox[{"(*", " ", 
             RowBox[{
             "Vxi", " ", "proveniente", " ", "do", " ", "\[UAcute]ltimo", " ",
               "c\[AAcute]culo", " ", "de", " ", "Vx", " ", "do", " ", 
              "corpo", " ", "parental"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"Vyi", "=", 
             RowBox[{"VyFrag", "[", 
              RowBox[{
              "VyResult", ",", "Vfri", ",", "\[Theta]Fri", ",", "\[Phi]Fr"}], 
              "]"}]}], ";", " ", 
            RowBox[{"(*", " ", 
             RowBox[{
             "Vyi", " ", "proveniente", " ", "do", " ", "\[UAcute]ltimo", " ",
               "c\[AAcute]culo", " ", "de", " ", "Vy", " ", "do", " ", 
              "corpo", " ", "parental"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"Vzi", "=", 
             RowBox[{"VzFrag", "[", 
              RowBox[{
              "VzResult", ",", "Vfri", ",", "\[Theta]Fri", ",", "\[Phi]Fr"}], 
              "]"}]}], ";", " ", 
            RowBox[{"(*", " ", 
             RowBox[{
             "Vzi", " ", "proveniente", " ", "do", " ", "\[UAcute]ltimo", " ",
               "c\[AAcute]culo", " ", "de", " ", "Vz", " ", "do", " ", 
              "corpo", " ", "parental"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"xi", "=", 
             RowBox[{
              RowBox[{"FallData", "[", 
               RowBox[{"[", 
                RowBox[{"1", ",", 
                 RowBox[{"-", "1"}]}], "]"}], "]"}], "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"yi", "=", 
             RowBox[{
              RowBox[{"FallData", "[", 
               RowBox[{"[", 
                RowBox[{"1", ",", 
                 RowBox[{"-", "1"}]}], "]"}], "]"}], "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"zi", "=", 
             RowBox[{
              RowBox[{"FallData", "[", 
               RowBox[{"[", 
                RowBox[{"1", ",", 
                 RowBox[{"-", "1"}]}], "]"}], "]"}], "[", 
              RowBox[{"[", "3", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"T", "=", 
             RowBox[{"EvolTemp", "[", 
              RowBox[{"[", 
               RowBox[{"1", ",", 
                RowBox[{"-", "1"}]}], "]"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"AppendTo", "[", 
             RowBox[{
              RowBox[{"EvolTemp", "[", 
               RowBox[{"[", "i", "]"}], "]"}], ",", "T"}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"dm", "=", "mi"}], ";", "\[IndentingNewLine]", 
            RowBox[{"dr", "=", 
             RowBox[{"r", "[", "mi", "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{"===", "===", "==="}], "=", 
              RowBox[{
              "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
                "===", "===", 
               RowBox[{"\[Equal]", 
                RowBox[{
                "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}],
              "*)"}], "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{"Performing", " ", "Runge", " ", "Kutta"}], " ", "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{"While", "[", 
             RowBox[{
              RowBox[{"zi", ">", "0"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"dm", "\[LessEqual]", "MTolerance"}], ",", 
                 RowBox[{"(*", " ", 
                  RowBox[{
                  "Skiping", " ", "calculation", " ", "if", " ", "M", " ", 
                   "reaches", " ", "MTolerance"}], " ", "*)"}], 
                 "\[IndentingNewLine]", 
                 RowBox[{"Goto", "[", "SkipNullMass", "]"}]}], "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"AppendTo", "[", 
                RowBox[{
                 RowBox[{"EvolTime", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], ",", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"EvolTime", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                   RowBox[{"[", 
                    RowBox[{"-", "1"}], "]"}], "]"}], "+", "DeltaT"}]}], 
                "]"}], ";", "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{"++", 
                 RowBox[{"++", 
                  RowBox[{"++", 
                   RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{
                    "++", "+"}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}\
]}]}]}]}]}]}]}]}]}]}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{
                "Updating", " ", "values", " ", "for", " ", "initial", " ", 
                 "condition"}], " ", "*)"}], "\[IndentingNewLine]", 
               RowBox[{"rhoAr", "=", 
                RowBox[{"RhoAr", "[", "zi", "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"Di", "=", 
                RowBox[{"Drag", "[", 
                 RowBox[{"dr", ",", "rhoAr"}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{"++", 
                 RowBox[{"++", 
                  RowBox[{"++", 
                   RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{
                    "++", "+"}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}\
]}]}]}]}]}]}]}]}]}]}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{
                "Updating", " ", "meteoroid", " ", "position", " ", "data"}], 
                " ", "*)"}], "\[IndentingNewLine]", 
               RowBox[{"AppendTo", "[", 
                RowBox[{"Xi", ",", 
                 RowBox[{"SetPrecision", "[", 
                  RowBox[{"xi", ",", "MachinePrecision"}], "]"}]}], "]"}], 
               ";", "\[IndentingNewLine]", 
               RowBox[{"AppendTo", "[", 
                RowBox[{"Yi", ",", 
                 RowBox[{"SetPrecision", "[", 
                  RowBox[{"yi", ",", "MachinePrecision"}], "]"}]}], "]"}], 
               ";", " ", "\[IndentingNewLine]", 
               RowBox[{"AppendTo", "[", 
                RowBox[{"Zi", ",", 
                 RowBox[{"SetPrecision", "[", 
                  RowBox[{"zi", ",", "MachinePrecision"}], "]"}]}], "]"}], 
               ";", "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{"++", 
                 RowBox[{"++", 
                  RowBox[{"++", 
                   RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{
                    "++", "+"}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}\
]}]}]}]}]}]}]}]}]}]}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{"Calculating", " ", "parameters"}], " ", "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"axi", "=", 
                RowBox[{
                 RowBox[{"-", 
                  RowBox[{"(", 
                   RowBox[{"Di", "/", "dm"}], ")"}]}], "*", "V", "*", 
                 "Vxi"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"ayi", "=", 
                RowBox[{
                 RowBox[{"-", 
                  RowBox[{"(", 
                   RowBox[{"Di", "/", "dm"}], ")"}]}], "*", "V", "*", 
                 "Vyi"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"azi", "=", 
                RowBox[{
                 RowBox[{"-", "g"}], "-", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"Di", "/", "dm"}], ")"}], "*", "V", "*", 
                  "Vzi"}]}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"Vxi", "=", 
                RowBox[{"Vxi", "+", 
                 RowBox[{"axi", "*", "DeltaT"}]}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"Vyi", "=", 
                RowBox[{"Vyi", "+", 
                 RowBox[{"ayi", "*", "DeltaT"}]}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"Vzi", "=", 
                RowBox[{"Vzi", "+", 
                 RowBox[{"azi", "*", "DeltaT"}]}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"xi", "=", 
                RowBox[{"xi", "+", 
                 RowBox[{"Vxi", "*", "DeltaT"}], "+", 
                 RowBox[{"0.5", "*", "axi", "*", 
                  RowBox[{"DeltaT", "^", "2"}]}]}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"yi", "=", 
                RowBox[{"yi", "+", 
                 RowBox[{"Vyi", "*", "DeltaT"}], "+", 
                 RowBox[{"0.5", "*", "ayi", "*", 
                  RowBox[{"DeltaT", "^", "2"}]}]}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"zi", "=", 
                RowBox[{"zi", "+", 
                 RowBox[{"Vzi", "*", "DeltaT"}], "+", 
                 RowBox[{"0.5", "*", "azi", "*", 
                  RowBox[{"DeltaT", "^", "2"}]}]}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"V", "=", 
                RowBox[{"Sqrt", "[", 
                 RowBox[{
                  RowBox[{"Vxi", "^", "2"}], "+", 
                  RowBox[{"Vyi", "^", "2"}], "+", 
                  RowBox[{"Vzi", "^", "2"}]}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{"++", 
                 RowBox[{"++", 
                  RowBox[{"++", 
                   RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{
                    "++", "+"}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}\
]}]}]}]}]}]}]}]}]}]}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{"Updating", " ", "Values"}], " ", "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"a", "=", 
                RowBox[{"Sqrt", "[", 
                 RowBox[{
                  RowBox[{"axi", "^", "2"}], "+", 
                  RowBox[{"ayi", "^", "2"}], "+", 
                  RowBox[{"azi", "^", "2"}]}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"T", "=", 
                RowBox[{"Temp", "[", 
                 RowBox[{"V", ",", "zi"}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"dm", "=", 
                RowBox[{"dm", "+", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"Dm", "[", 
                    RowBox[{"V", ",", "a", ",", "T", ",", "dr", ",", "dm"}], 
                    "]"}], ")"}], "*", "DeltaT"}]}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"dm", ">", "0"}], ",", 
                 RowBox[{"dm", "=", "dm"}], ",", 
                 RowBox[{"dm", "=", "0."}]}], "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"dr", "=", 
                RowBox[{"r", "[", "dm", "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{"++", 
                 RowBox[{"++", 
                  RowBox[{"++", 
                   RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{
                    "++", "+"}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}\
]}]}]}]}]}]}]}]}]}]}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{"Appending", " ", "Values", " ", "to", " ", "List"}], 
                " ", "*)"}], "\[IndentingNewLine]", 
               RowBox[{"AppendTo", "[", 
                RowBox[{
                 RowBox[{"EvolVel", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], ",", "V"}], "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"AppendTo", "[", 
                RowBox[{
                 RowBox[{"EvolAccel", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], ",", "a"}], "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"AppendTo", "[", 
                RowBox[{
                 RowBox[{"EvolTemp", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], ",", "T"}], "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"AppendTo", "[", 
                RowBox[{
                 RowBox[{"EvolMassAll", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], ",", "dm"}], "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{"++", 
                 RowBox[{"++", 
                  RowBox[{"++", 
                   RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{"++", 
                    RowBox[{
                    "++", "+"}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}\
]}]}]}]}]}]}]}]}]}]}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{"Advancing", " ", "TimeStep"}], " ", "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"DeltaT", "=", 
                RowBox[{"IdealTime", "[", 
                 RowBox[{"dm", ",", "V", ",", "TimeStep"}], "]"}]}]}]}], 
             "\[IndentingNewLine]", 
             StyleBox[" ",
              FontSize->14], 
             StyleBox["]",
              FontSize->14]}], 
            StyleBox[";",
             FontSize->14], 
            StyleBox["\[IndentingNewLine]",
             FontSize->14], 
            RowBox[{
             StyleBox[
              RowBox[{
               StyleBox["(",
                FontSize->14], "*"}]], " ", 
             RowBox[{"Fim", " ", "Runge", " ", "Kutta"}], " ", "*)"}], 
            StyleBox["\[IndentingNewLine]",
             FontSize->14], 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{"===", "===", "==="}], "=", 
              RowBox[{
              "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
                "===", "===", 
               RowBox[{"\[Equal]", 
                RowBox[{
                "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}],
              "*)"}], 
            StyleBox["\[IndentingNewLine]",
             FontSize->14], 
            RowBox[{"(*", " ", 
             RowBox[{
             "Appending", " ", "Values", " ", "to", " ", "other", " ", 
              "Lists"}], " ", "*)"}], 
            StyleBox["\[IndentingNewLine]",
             FontSize->14], 
            RowBox[{"Label", "[", "SkipNullMass", "]"}], ";", 
            StyleBox["\[IndentingNewLine]",
             FontSize->14], 
            RowBox[{"AppendTo", "[", 
             RowBox[{"FinalMassAll", ",", "dm"}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"AppendTo", "[", 
             RowBox[{"FinalTemp", ",", "T"}], "]"}], ";", 
            StyleBox["\[IndentingNewLine]",
             FontSize->14], 
            RowBox[{"AppendTo", "[", 
             RowBox[{"Xi", ",", 
              RowBox[{"SetPrecision", "[", 
               RowBox[{"xi", ",", "MachinePrecision"}], "]"}]}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"AppendTo", "[", 
             RowBox[{"Yi", ",", 
              RowBox[{"SetPrecision", "[", 
               RowBox[{"yi", ",", "MachinePrecision"}], "]"}]}], "]"}], ";", 
            " ", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"dm", "<", "0"}], "||", 
               RowBox[{"zi", "<", "0"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{"AppendTo", "[", 
               RowBox[{"Zi", ",", 
                RowBox[{"SetPrecision", "[", 
                 RowBox[{"0.", ",", "MachinePrecision"}], "]"}]}], "]"}], ",",
               "\[IndentingNewLine]", 
              RowBox[{"AppendTo", "[", 
               RowBox[{"Zi", ",", 
                RowBox[{"SetPrecision", "[", 
                 RowBox[{"zi", ",", "MachinePrecision"}], "]"}]}], "]"}]}], 
             "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"AppendTo", "[", 
             RowBox[{"FallData", ",", 
              RowBox[{"Transpose", "[", 
               RowBox[{"{", 
                RowBox[{"Xi", ",", "Yi", ",", "Zi"}], "}"}], "]"}]}], 
             "]"}]}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"===", "===", "==="}], "=", 
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Collecting", " ", "information", " ", "to", " ", "skip", " ", "extra",
         " ", "work", " ", "if", " ", "user", " ", "only", " ", "changes", 
        " ", "plot", " ", "configs"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"timetepVerif", "=", "TimeStep"}], ";", "\[IndentingNewLine]", 
      RowBox[{"masstoleranceVerif", "=", "MTolerance"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"massType", "=", "mass"}], ";", "\[IndentingNewLine]", 
      RowBox[{"energyType", "=", "Efr"}], ";", "\[IndentingNewLine]", 
      RowBox[{"dcType", "=", "Dc"}], ";", "\[IndentingNewLine]", 
      RowBox[{"phiType", "=", "\[Phi]E"}], ";", "\[IndentingNewLine]", 
      RowBox[{"HFragValue", "=", "HFrag"}], ";", "\[IndentingNewLine]", 
      RowBox[{"FragAngleUnif", "=", "UnifAngle"}], ";", "\[IndentingNewLine]", 
      RowBox[{"FragAngleRand", "=", "RandomAngle"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"FragAngleQ1", "=", "Q1"}], ";", "\[IndentingNewLine]", 
      RowBox[{"FragAngleQ2", "=", "Q2"}], ";", "\[IndentingNewLine]", 
      RowBox[{"FragAngleQ3", "=", "Q3"}], ";", "\[IndentingNewLine]", 
      RowBox[{"FragAngleQ4", "=", "Q4"}], ";", "\[IndentingNewLine]", 
      RowBox[{"FragAngleList", "=", 
       RowBox[{"{", 
        RowBox[{
        "FragAngleUnif", ",", "FragAngleRand", ",", "FragAngleQ1", ",", 
         "FragAngleQ2", ",", "FragAngleQ3", ",", "FragAngleQ4"}], "}"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "==="}]}]}], "="}],
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"Fixes", " ", "before", " ", "plotting"}], " ", "*)"}], " ", 
       "\[Equal]", " ", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Setting", " ", "each", " ", "frag", " ", "list", " ", "to", " ", 
         "same", " ", "lenght", " ", "for", " ", "correct", " ", "plotting", 
         " ", "and", " ", "etc"}], " ", "*)"}], "\[IndentingNewLine]", "*)"}],
       "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "==="}]}]}], "="}],
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{"FAll", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"i", "=", "1"}], ",", 
        RowBox[{"i", "\[LessEqual]", 
         RowBox[{"Length", "[", "FallData", "]"}]}], ",", 
        RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"FAll", ",", 
          RowBox[{"FallData", "[", 
           RowBox[{"[", "i", "]"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"maxFAll", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"i", "=", "1"}], ",", 
        RowBox[{"i", "\[LessEqual]", 
         RowBox[{"Length", "[", "FallData", "]"}]}], ",", 
        RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"maxFAll", ",", 
          RowBox[{"Length", "[", 
           RowBox[{"FAll", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "]"}]}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"max", "=", 
       RowBox[{"Max", "[", "maxFAll", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Fi", "=", 
       RowBox[{"Min", "[", 
        RowBox[{"Position", "[", 
         RowBox[{"maxFAll", ",", "max"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"i", "=", "2"}], ",", 
        RowBox[{"i", "\[LessEqual]", 
         RowBox[{"Length", "[", "FallData", "]"}]}], ",", 
        RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", 
             RowBox[{"FAll", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "]"}], "<", "max"}], ",", 
           RowBox[{
            RowBox[{"While", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{"FAll", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "]"}], "<", "max"}], " ", 
              ",", "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"FAll", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                   RowBox[{"[", 
                    RowBox[{"-", "1"}], "]"}], "]"}], "[", 
                  RowBox[{"[", "3", "]"}], "]"}], "\[LessEqual]", "0"}], ",", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{
                  RowBox[{"FAll", "[", 
                   RowBox[{"[", "i", "]"}], "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"FAll", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"-", "1"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"FAll", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"-", "1"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", "0"}], "}"}]}], 
                 "]"}], ",", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{
                  RowBox[{"FAll", "[", 
                   RowBox[{"[", "i", "]"}], "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"FAll", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"-", "1"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"FAll", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"-", "1"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"FAll", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"-", "1"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}]}], "}"}]}], "]"}]}], 
               "]"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", 
             RowBox[{"EvolMassAll", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "]"}], "<", "max"}], ",", 
           RowBox[{
            RowBox[{"While", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{"EvolMassAll", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "]"}], "<", "max"}], " ", 
              ",", 
              RowBox[{"AppendTo", "[", 
               RowBox[{
                RowBox[{"EvolMassAll", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], ",", 
                RowBox[{
                 RowBox[{"EvolMassAll", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", 
                 RowBox[{"[", 
                  RowBox[{"-", "1"}], "]"}], "]"}]}], "]"}]}], "]"}], ";"}]}],
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", 
             RowBox[{"EvolTemp", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "]"}], "<", "max"}], ",", 
           RowBox[{
            RowBox[{"While", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{"EvolTemp", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "]"}], "<", "max"}], " ", 
              ",", 
              RowBox[{"AppendTo", "[", 
               RowBox[{
                RowBox[{"EvolTemp", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], ",", 
                RowBox[{
                 RowBox[{"EvolTemp", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", 
                 RowBox[{"[", 
                  RowBox[{"-", "1"}], "]"}], "]"}]}], "]"}]}], "]"}], ";"}]}],
           "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "==="}]}]}], "="}],
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Preparing", " ", "Table", " ", "of", " ", "Values", " ", "to", " ", 
         "Export"}], " ", "*)"}], " ", "\[IndentingNewLine]", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "==="}]}]}], "="}],
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{"InfoTab", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "\"\<N\[UAcute]mero de fragmentos\>\"", ",", 
           "\"\<Altura de fragmenta\[CCedilla]\[ATilde]o [m]\>\"", ",", 
           "\"\<Massa do corpo [kg]\>\"", ",", 
           "\"\<Velocidade de entrada [m/s]\>\"", ",", 
           "\"\<Energia de Entr. [J]-[kT]\>\"", ",", 
           "\"\<Energia de frag. [J]-[kT]\>\"", ",", 
           "\"\<Coef. de resist.\>\"", ",", 
           "\"\<\[CapitalAHat]ngulo vert. de entrada\>\"", ",", 
           "\"\<\[CapitalAHat]ngulo vert. de fragmenta\[CCedilla]\[ATilde]o\>\
\""}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Length", "[", "FallData", "]"}], ",", "H", ",", "M", ",", 
           "VE", ",", 
           RowBox[{
            RowBox[{"ToString", "[", 
             RowBox[{
              RowBox[{".5", "*", "M", "*", 
               RowBox[{"(", 
                RowBox[{"VE", "^", "2"}], ")"}]}], ",", "TraditionalForm"}], 
             "]"}], "<>", "\"\< - \>\"", "<>", 
            RowBox[{"ToString", "[", 
             RowBox[{
              RowBox[{".5", "*", "M", "*", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"VE", "^", "2"}], ")"}], "/", 
                RowBox[{"(", 
                 RowBox[{"4.184", "*", 
                  RowBox[{"10", "^", "12"}]}], ")"}]}]}], ",", 
              "TraditionalForm"}], "]"}]}], " ", ",", 
           RowBox[{
            RowBox[{"ToString", "[", 
             RowBox[{"Efr", ",", "TraditionalForm"}], "]"}], "<>", 
            "\"\< - \>\"", "<>", 
            RowBox[{"ToString", "[", 
             RowBox[{
              RowBox[{"Efr", "/", 
               RowBox[{"(", 
                RowBox[{"4.184", "*", 
                 RowBox[{"10", "^", "12"}]}], ")"}]}], ",", 
              "TraditionalForm"}], "]"}]}], ",", "Dc", ",", "\[Phi]E", ",", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"nfrags", "\[Equal]", "1"}], ",", "\"\<No Frags\>\"", 
             ",", "\[Phi]Fr"}], "]"}]}], "}"}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"InfoGrid", "=", 
       RowBox[{"Grid", "[", 
        RowBox[{"InfoTab", ",", 
         RowBox[{"Frame", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"All", ",", "False"}], "}"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"InfoTab2", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "\"\<N\[UAcute]mero de fragmentos\>\"", ",", 
           "\"\<Altura de fragmenta\[CCedilla]\[ATilde]o [m]\>\"", ",", 
           "\"\<Massa do corpo [kg]\>\"", ",", 
           "\"\<Velocidade de entrada [m/s]\>\"", ",", 
           "\"\<Energia de Entr. [J]-[kT]\>\"", ",", 
           "\"\<Energia de frag. [J]-[kT]\>\"", ",", 
           "\"\<Coef. de resist.\>\"", ",", 
           "\"\<\[CapitalAHat]ngulo vert. de entrada\>\"", ",", 
           "\"\<\[CapitalAHat]ngulo vert. de fragmenta\[CCedilla]\[ATilde]o\>\
\""}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Length", "[", "FallData", "]"}], ",", "H", ",", "M", ",", 
           "VE", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{".5", "*", "M", "*", 
              RowBox[{"(", 
               RowBox[{"VE", "^", "2"}], ")"}]}], ",", 
             RowBox[{".5", "*", "M", "*", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"VE", "^", "2"}], ")"}], "/", 
               RowBox[{"(", 
                RowBox[{"4.184", "*", 
                 RowBox[{"10", "^", "12"}]}], ")"}]}]}]}], "}"}], " ", ",", 
           RowBox[{"{", 
            RowBox[{"Efr", ",", 
             RowBox[{"Efr", "/", 
              RowBox[{"(", 
               RowBox[{"4.184", "*", 
                RowBox[{"10", "^", "12"}]}], ")"}]}]}], "}"}], ",", "Dc", ",",
            "\[Phi]E", ",", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"nfrags", "\[Equal]", "1"}], ",", "\"\<No Frags\>\"", 
             ",", "\[Phi]Fr"}], "]"}]}], "}"}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"ValuesTab", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{
            RowBox[{"EvolTime", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"-", "1"}], "]"}], "]"}], ",", 
           RowBox[{"Max", "[", 
            RowBox[{"EvolVel", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", 
           RowBox[{
            RowBox[{"EvolMassAll", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", 
           RowBox[{
            RowBox[{"EvolMassAll", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"-", "1"}], "]"}], "]"}], ",", 
           RowBox[{
            RowBox[{"EvolTemp", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", 
           RowBox[{
            RowBox[{"EvolTemp", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"-", "1"}], "]"}], "]"}], ",", 
           RowBox[{
            RowBox[{"FAll", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"-", "1"}], "]"}], "]"}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"FAll", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "[", 
              RowBox[{"[", 
               RowBox[{"-", "1"}], "]"}], "]"}], "[", 
             RowBox[{"[", "1", "]"}], "]"}], "/", 
            RowBox[{"N", "[", 
             RowBox[{"Sin", "[", 
              RowBox[{"\[Phi]E", " ", "Degree"}], "]"}], "]"}]}]}], "}"}], 
         ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", 
           RowBox[{"Length", "[", "FallData", "]"}]}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"PrependTo", "[", 
       RowBox[{"ValuesTab", ",", 
        RowBox[{"{", 
         RowBox[{
         "\"\<Fragmento\>\"", ",", "\"\<Tempo de queda [s]\>\"", ",", 
          "\"\<Vel. M\[AAcute]x. na trajet\[OAcute]ria [m/s]\>\"", ",", 
          "\"\<Massa Inicial [kg]\>\"", ",", "\"\<Massa Final [kg]\>\"", ",", 
          "\"\<Temp. Inicial [K]\>\"", ",", "\"\<Temp. Final [K]\>\"", ",", 
          "\"\<Posi\[CCedilla]\[ATilde]o Final [x,y,z]\>\"", ",", 
          "\"\<Tam. da Trajet\[OAcute]ria [m]\>\""}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"ValuesGrid", "=", 
       RowBox[{"Grid", "[", 
        RowBox[{"ValuesTab", ",", 
         RowBox[{"Frame", "\[Rule]", "All"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"MeteoPNG", "=", 
       RowBox[{"Column", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"InfoGrid", ",", "ValuesGrid"}], "}"}], ",", "Center"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"MeteoTable", "=", 
       RowBox[{"PrependTo", "[", 
        RowBox[{"ValuesTab", ",", 
         RowBox[{"{", " ", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"MeteoTable", "=", 
       RowBox[{"PrependTo", "[", 
        RowBox[{"ValuesTab", ",", 
         RowBox[{"InfoTab2", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"MeteoTable", "=", 
       RowBox[{"PrependTo", "[", 
        RowBox[{"ValuesTab", ",", 
         RowBox[{"InfoTab2", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"MeteoPdf", "=", 
       RowBox[{"ValuesTab", "//", "TableForm"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "==="}]}]}], "="}],
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"Plot", " ", "1"}], " ", "*)"}], "\[IndentingNewLine]", 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "==="}]}]}], "="}],
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{"Label", "[", "Plotting", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"OpacityButton", "\[Equal]", "OpacityOn"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"ColorType", "\[Equal]", "GRAY"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"PlotAll", "=", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"ListPointPlot3D", "[", 
               RowBox[{
                RowBox[{"FAll", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], ",", 
                RowBox[{"ColorFunctionScaling", "\[Rule]", "False"}], ",", 
                RowBox[{"ColorFunction", "->", 
                 RowBox[{"Function", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"x", ",", "y", ",", "z"}], "}"}], ",", 
                   RowBox[{"GrayLevel", "[", 
                    RowBox[{".2", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"EvolMassAll", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Min", "[", 
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"FAll", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", "y", ",", "z"}], "}"}]}], "]"}], "]"}], 
                    "]"}], "]"}], "/", 
                    RowBox[{"MassAll", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}]}], "]"}]}], "]"}]}], ",", 
                RowBox[{"ImageSize", "\[Rule]", "200"}], ",", 
                RowBox[{"ViewPoint", "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{"1.3", ",", " ", 
                   RowBox[{"-", "2.4"}], ",", " ", "2."}], "}"}]}]}], "]"}], 
              ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", "1", ",", 
                RowBox[{"Length", "[", "FallData", "]"}]}], "}"}]}], 
             "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"ColorType", "\[Equal]", "HUE"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"PlotAll", "=", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"ListPointPlot3D", "[", 
               RowBox[{
                RowBox[{"FAll", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], ",", 
                RowBox[{"ColorFunctionScaling", "\[Rule]", "False"}], ",", 
                RowBox[{"ColorFunction", "->", 
                 RowBox[{"Function", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"x", ",", "y", ",", "z"}], "}"}], ",", 
                   RowBox[{"Hue", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"EvolTemp", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Min", "[", 
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"FAll", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", "y", ",", "z"}], "}"}]}], "]"}], "]"}], 
                    "]"}], "]"}], "/", 
                    RowBox[{"Max", "[", "EvolTemp", "]"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"EvolMassAll", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Min", "[", 
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"FAll", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", "y", ",", "z"}], "}"}]}], "]"}], "]"}], 
                    "]"}], "]"}], "/", 
                    RowBox[{"MassAll", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}]}], "]"}]}], "]"}]}], ",", 
                RowBox[{"ImageSize", "\[Rule]", "200"}], ",", 
                RowBox[{"ViewPoint", "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{"1.3", ",", " ", 
                   RowBox[{"-", "2.4"}], ",", " ", "2."}], "}"}]}]}], "]"}], 
              ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", "1", ",", 
                RowBox[{"Length", "[", "FallData", "]"}]}], "}"}]}], 
             "]"}]}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"OpacityButton", "\[Equal]", "OpacityOff"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"ColorType", "\[Equal]", "GRAY"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"PlotAll", "=", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"ListPointPlot3D", "[", 
                RowBox[{
                 RowBox[{"FAll", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], ",", 
                 RowBox[{"ColorFunctionScaling", "\[Rule]", "False"}], ",", 
                 RowBox[{"ImageSize", "\[Rule]", "200"}], ",", 
                 RowBox[{"ViewPoint", "\[Rule]", 
                  RowBox[{"{", 
                   RowBox[{"1.3", ",", " ", 
                    RowBox[{"-", "2.4"}], ",", " ", "2."}], "}"}]}]}], "]"}], 
               ",", 
               RowBox[{"{", 
                RowBox[{"i", ",", "1", ",", 
                 RowBox[{"Length", "[", "FallData", "]"}]}], "}"}]}], "]"}]}],
             ";", 
            RowBox[{"CT", "=", "ColorType"}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"ColorType", "\[Equal]", "HUE"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"PlotAll", "=", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"ListPointPlot3D", "[", 
               RowBox[{
                RowBox[{"FAll", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], ",", 
                RowBox[{"ColorFunctionScaling", "\[Rule]", "False"}], ",", 
                RowBox[{"ColorFunction", "->", 
                 RowBox[{"Function", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"x", ",", "y", ",", "z"}], "}"}], ",", 
                   RowBox[{"Hue", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"EvolTemp", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Min", "[", 
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"FAll", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", "y", ",", "z"}], "}"}]}], "]"}], "]"}], 
                    "]"}], "]"}], "/", 
                    RowBox[{"Max", "[", "EvolTemp", "]"}]}], ",", "1."}], 
                    "]"}]}], "]"}]}], ",", 
                RowBox[{"ImageSize", "\[Rule]", "200"}], ",", 
                RowBox[{"ViewPoint", "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{"1.3", ",", " ", 
                   RowBox[{"-", "2.4"}], ",", " ", "2."}], "}"}]}]}], "]"}], 
              ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", "1", ",", 
                RowBox[{"Length", "[", "FallData", "]"}]}], "}"}]}], 
             "]"}]}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"===", "===", "==="}], "=", 
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Collecting", " ", "information", " ", "to", " ", "skip", " ", "extra",
         " ", "work", " ", "if", " ", "user", " ", "only", " ", "changes", 
        " ", "plot", " ", "configs"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"CT", "=", "ColorType"}], ";", "\[IndentingNewLine]", 
      RowBox[{"OB", "=", "OpacityButton"}], ";", "\[IndentingNewLine]", 
      RowBox[{"SB", "=", "ShowButton"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "==="}]}]}], "="}],
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"Plot", " ", "2"}], " ", "*)"}], "\[IndentingNewLine]", 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "==="}]}]}], "="}],
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{"Label", "[", "Plotting2", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"===", "===", "==="}], "=", 
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Getting", " ", "final", " ", "X", " ", "and", " ", "Y", " ", 
        "positions", " ", "from", " ", "FAll", " ", "table"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"FinalPosTab", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"FAll", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"-", "1"}], "]"}], "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{"FAll", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"-", "1"}], "]"}], "]"}], "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", 
           RowBox[{"Length", "[", "FAll", "]"}]}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"===", "===", "==="}], "=", 
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "Deleting", " ", "cases", " ", "where", " ", "frag", " ", "gets", " ",
          "to", " ", "ground", " ", "but", " ", "with", " ", "mass", " ", 
         "virtally"}], " ", "=", " ", "0"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Correcting", " ", "for", " ", "frags", " ", "that", " ", "evaporate", 
        " ", "and", " ", "the", " ", "X", " ", "value", " ", "is", " ", 
        "still", " ", "recorded", " ", 
        RowBox[{"(", 
         RowBox[{"so", " ", "it", " ", 
          RowBox[{"can", "'"}], "t", " ", "display", " ", "on", " ", "final", 
          " ", "plot"}], ")"}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"SurvivedFrags", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"i", "=", "1"}], ",", 
        RowBox[{"i", "\[LessEqual]", 
         RowBox[{"Length", "[", "FAll", "]"}]}], ",", 
        RowBox[{"i", "++"}], ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"FAll", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "[", 
              RowBox[{"[", 
               RowBox[{"-", "1"}], "]"}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"-", "1"}], "]"}], "]"}], "==", "0"}], "&&", " ", 
           RowBox[{
            RowBox[{"FinalMassAll", "[", 
             RowBox[{"[", "i", "]"}], "]"}], ">", "0"}]}], ",", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"SurvivedFrags", ",", "i"}], "]"}]}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"===", "===", "==="}], "=", 
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"Calculating", " ", "Center", " ", "of", " ", "Mass"}], " ", 
       "*)"}], " ", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"SetNumb", "[", "n_", "]"}], ":=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"-", 
           RowBox[{"10.", "^", "4"}]}], "<", 
          RowBox[{"N", "[", "n", "]"}], "<", 
          RowBox[{"10.", "^", "4"}]}], ",", 
         RowBox[{"Return", "[", 
          RowBox[{"NumberForm", "[", 
           RowBox[{
            RowBox[{"N", "[", "n", "]"}], ",", "3"}], "]"}], "]"}], ",", 
         RowBox[{"Return", "[", 
          RowBox[{"NumberForm", "[", 
           RowBox[{
            RowBox[{"N", "[", "n", "]"}], ",", "3", ",", 
            RowBox[{"ExponentFunction", "->", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"4", 
                RowBox[{"Quotient", "[", 
                 RowBox[{"#", ",", "4"}], "]"}]}], "&"}], ")"}]}]}], "]"}], 
          "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"XCM", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Total", "[", 
           RowBox[{"FinalMassAll", "[", 
            RowBox[{"[", "SurvivedFrags", "]"}], "]"}], "]"}], "\[NotEqual]", 
          "0"}], ",", 
         RowBox[{
          RowBox[{"Total", "[", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"FinalMassAll", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "*", 
              RowBox[{
               RowBox[{
                RowBox[{"FAll", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "[", 
                RowBox[{"[", 
                 RowBox[{"-", "1"}], "]"}], "]"}], "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", "SurvivedFrags"}], "}"}]}], "]"}], "]"}], "/", 
          RowBox[{"(", 
           RowBox[{"Total", "[", 
            RowBox[{"FinalMassAll", "[", 
             RowBox[{"[", "SurvivedFrags", "]"}], "]"}], "]"}], ")"}]}], ",", 
         RowBox[{
          RowBox[{"Total", "[", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"FinalMassAll", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "*", 
              RowBox[{
               RowBox[{
                RowBox[{"FAll", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "[", 
                RowBox[{"[", 
                 RowBox[{"-", "1"}], "]"}], "]"}], "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", "SurvivedFrags"}], "}"}]}], "]"}], "]"}], "/", 
          RowBox[{"(", 
           RowBox[{"1", "+", 
            RowBox[{"Total", "[", 
             RowBox[{"FinalMassAll", "[", 
              RowBox[{"[", "SurvivedFrags", "]"}], "]"}], "]"}]}], ")"}]}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"YCM", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Total", "[", 
           RowBox[{"FinalMassAll", "[", 
            RowBox[{"[", "SurvivedFrags", "]"}], "]"}], "]"}], "\[NotEqual]", 
          "0"}], ",", 
         RowBox[{
          RowBox[{"Total", "[", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"FinalMassAll", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "*", 
              RowBox[{
               RowBox[{
                RowBox[{"FAll", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "[", 
                RowBox[{"[", 
                 RowBox[{"-", "1"}], "]"}], "]"}], "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", "SurvivedFrags"}], "}"}]}], "]"}], "]"}], "/", 
          RowBox[{"(", 
           RowBox[{"Total", "[", 
            RowBox[{"FinalMassAll", "[", 
             RowBox[{"[", "SurvivedFrags", "]"}], "]"}], "]"}], ")"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Total", "[", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"FinalMassAll", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "*", 
              RowBox[{
               RowBox[{
                RowBox[{"FAll", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "[", 
                RowBox[{"[", 
                 RowBox[{"-", "1"}], "]"}], "]"}], "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", "SurvivedFrags"}], "}"}]}], "]"}], "]"}], "/", 
          RowBox[{"(", 
           RowBox[{"1", "+", 
            RowBox[{"Total", "[", 
             RowBox[{"FinalMassAll", "[", 
              RowBox[{"[", "SurvivedFrags", "]"}], "]"}], "]"}]}], ")"}]}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"===", "===", "==="}], "=", 
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"SurvivedFrags", "\[Equal]", 
         RowBox[{"{", "}"}]}], ",", 
        RowBox[{"Goto", "[", "NoPoints", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MassDecal", "\[Equal]", "DecalON"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"FinalPos", "=", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"ListPlot", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"FinalPosTab", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "}"}], ",", 
             RowBox[{"PlotStyle", "\[Rule]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"FinalMassAll", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "\[Equal]", "0"}], ",", 
                "White", ",", 
                RowBox[{"GrayLevel", "[", 
                 RowBox[{".2", ",", 
                  RowBox[{"1.2", "*", 
                   RowBox[{
                    RowBox[{"FinalMassAll", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "/", 
                    RowBox[{"Max", "[", 
                    RowBox[{"FinalMassAll", "[", 
                    RowBox[{"[", "SurvivedFrags", "]"}], "]"}], "]"}]}]}]}], 
                 "]"}]}], "]"}]}], ",", 
             RowBox[{"Axes", "\[Rule]", "axis2"}], ",", 
             RowBox[{"PlotMarkers", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"\"\<\[FilledCircle]\>\"", ",", "10"}], "}"}]}]}], 
            "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "SurvivedFrags"}], "}"}]}], "]"}]}]}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MassDecal", "\[Equal]", "DecalOFF"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"FinalPos", "=", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"ListPlot", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"FinalPosTab", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "}"}], ",", 
             RowBox[{"PlotStyle", "\[Rule]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"FinalMassAll", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "\[Equal]", "0"}], ",", 
                "White", ",", 
                RowBox[{"GrayLevel", "[", ".2", "]"}]}], "]"}]}], ",", 
             RowBox[{"Axes", "\[Rule]", "axis2"}], ",", 
             RowBox[{"PlotMarkers", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"\"\<\[FilledCircle]\>\"", ",", "10"}], "}"}]}], ",", 
             RowBox[{"ImageSize", "\[Rule]", "200"}]}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "SurvivedFrags"}], "}"}]}], "]"}]}]}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"Label", "[", "NoPoints", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"FinalPosTab", "\[Equal]", 
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"ValuesPlot", "=", 
         RowBox[{"ListPlot", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"XCM", ",", "YCM"}], "}"}], "}"}], ",", 
           RowBox[{"PlotStyle", "\[Rule]", "White"}], ",", 
           RowBox[{"ImageSize", "\[Rule]", "200"}]}], "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"FinalPosTab", "!=", 
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"ValuesPlot", "=", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"ListPlot", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"FinalPosTab", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "}"}], ",", 
             RowBox[{"Axes", "\[Rule]", "axis2"}], ",", 
             RowBox[{"PlotMarkers", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Labeled", "[", 
                 RowBox[{"\"\< \>\"", ",", 
                  RowBox[{"SetNumb", "[", 
                   RowBox[{"FinalMassAll", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", 
                  RowBox[{"LabelStyle", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{"Black", ",", "10"}], "}"}]}], ",", 
                  RowBox[{"ImageMargins", "\[Rule]", "0"}], ",", 
                  RowBox[{"BaselinePosition", "\[Rule]", "Top"}], ",", 
                  RowBox[{"ImageMargins", "\[Rule]", "0"}], ",", 
                  RowBox[{"ImageSize", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{"30", ",", "10"}], "}"}]}]}], "]"}], ",", "10"}], 
               "}"}]}], ",", 
             RowBox[{"ImageSize", "\[Rule]", "200"}]}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "SurvivedFrags"}], "}"}]}], "]"}]}]}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"JoinedPoints", "=", 
       RowBox[{"ListPlot", "[", 
        RowBox[{"FinalPosTab", ",", 
         RowBox[{"Joined", "\[Rule]", "True"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"CMPlot", "=", 
       RowBox[{"ListPlot", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"XCM", ",", "YCM"}], "}"}], "}"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", "Red"}], ",", 
         RowBox[{"PlotMarkers", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Labeled", "[", 
             RowBox[{"\"\<\[FilledCircle]\>\"", ",", "CM", ",", 
              RowBox[{"BaselinePosition", "\[Rule]", "Top"}]}], "]"}], ",", 
            "7"}], "}"}]}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "200"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"FinalPosPlot", "=", 
       RowBox[{"{", "FinalPos", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"FinalPosTab", "\[Equal]", 
         RowBox[{"{", "}"}]}], ",", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"FinalPosPlot", ",", 
          RowBox[{"ListPlot", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"{", 
              RowBox[{"XCM", ",", "YCM"}], "}"}], "}"}], ",", 
            RowBox[{"PlotStyle", "\[Rule]", "White"}]}], "]"}]}], "]"}]}], 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MassValues", "\[Equal]", "ValuesON"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"FinalPosPlot", ",", "ValuesPlot"}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"DisplayCM", "\[Equal]", "CMON"}], ",", "\[IndentingNewLine]", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"FinalPosPlot", ",", "CMPlot"}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"JoinPoints", "\[Equal]", "JOINON"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"FinalPosPlot", ",", "JoinedPoints"}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"===", "===", "==="}], "=", 
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Collecting", " ", "information", " ", "to", " ", "skip", " ", "extra",
         " ", "work", " ", "if", " ", "user", " ", "only", " ", "changes", 
        " ", "plot", " ", "configs"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"J2", "=", "JoinPoints"}], ";", "\[IndentingNewLine]", 
      RowBox[{"D2", "=", "DisplayCM"}], ";", "\[IndentingNewLine]", 
      RowBox[{"MV", "=", "MassValues"}], ";", "\[IndentingNewLine]", 
      RowBox[{"MD", "=", "MassDecal"}], ";", "\[IndentingNewLine]", 
      RowBox[{"AX", "=", "axis2"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "==="}]}]}], "="}],
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Setting", " ", "X", " ", "and", " ", "Y", " ", "range", " ", "for", 
         " ", "Plot", " ", "1"}], " ", "*)"}], "\[IndentingNewLine]", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "==="}]}]}], "="}],
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{"Label", "[", "PerformingPlots", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"XRange", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "1.35"}], "*", 
          RowBox[{"Max", "[", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"FAll", "[", 
               RowBox[{"[", "pos", "]"}], "]"}], "[", 
              RowBox[{"[", 
               RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"pos", ",", "1", ",", 
               RowBox[{"Length", "[", "FAll", "]"}]}], "}"}]}], "]"}], 
           "]"}]}], ",", 
         RowBox[{"1.35", "*", 
          RowBox[{"Max", "[", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"FAll", "[", 
               RowBox[{"[", "pos", "]"}], "]"}], "[", 
              RowBox[{"[", 
               RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"pos", ",", "1", ",", 
               RowBox[{"Length", "[", "FAll", "]"}]}], "}"}]}], "]"}], 
           "]"}]}]}], "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"YRange", "=", "XRange"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "==="}]}]}], "="}],
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Setting", " ", "X", " ", "and", " ", "Y", " ", "range", " ", "for", 
         " ", "Plot", " ", "2"}], " ", "*)"}], "\[IndentingNewLine]", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "==="}]}]}], "="}],
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{"PlotPosTab", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"FinalPosTab", "[", 
          RowBox[{"[", "i", "]"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "SurvivedFrags"}], "}"}]}], "]"}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Correcting", " ", "by", " ", "getting", " ", "only", " ", "those", 
        " ", "frags", " ", "that", " ", "got", " ", "to", " ", "the", " ", 
        "ground"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"PlotPosTab", "\[Equal]", 
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"XRange2", "=", "XRange"}], ";", "\[IndentingNewLine]", 
         RowBox[{"YRange2", "=", "YRange"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"XRange2", "=", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"Min", "[", 
              RowBox[{"PlotPosTab", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}], "-", 
             RowBox[{".1", "*", 
              RowBox[{"Abs", "[", 
               RowBox[{
                RowBox[{"Abs", "[", 
                 RowBox[{"Min", "[", 
                  RowBox[{"PlotPosTab", "[", 
                   RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}], "]"}], 
                "-", 
                RowBox[{"Abs", "[", 
                 RowBox[{"Max", "[", 
                  RowBox[{"PlotPosTab", "[", 
                   RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}], "]"}]}], 
               "]"}]}]}], ",", 
            RowBox[{
             RowBox[{"Max", "[", 
              RowBox[{"PlotPosTab", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}], "+", 
             RowBox[{".1", "*", 
              RowBox[{"Abs", "[", 
               RowBox[{
                RowBox[{"Abs", "[", 
                 RowBox[{"Min", "[", 
                  RowBox[{"PlotPosTab", "[", 
                   RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}], "]"}], 
                "-", 
                RowBox[{"Abs", "[", 
                 RowBox[{"Max", "[", 
                  RowBox[{"PlotPosTab", "[", 
                   RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}], "]"}]}], 
               "]"}]}]}]}], "}"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"YRange2", "=", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"Min", "[", 
              RowBox[{"PlotPosTab", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "2"}], "]"}], "]"}], "]"}], "-", 
             RowBox[{".1", "*", 
              RowBox[{"Abs", "[", 
               RowBox[{"Min", "[", 
                RowBox[{"PlotPosTab", "[", 
                 RowBox[{"[", 
                  RowBox[{"All", ",", "2"}], "]"}], "]"}], "]"}], "]"}]}]}], 
            ",", 
            RowBox[{
             RowBox[{"Max", "[", 
              RowBox[{"PlotPosTab", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "2"}], "]"}], "]"}], "]"}], "+", 
             RowBox[{".1", 
              RowBox[{"Abs", "[", 
               RowBox[{"Max", "[", 
                RowBox[{"PlotPosTab", "[", 
                 RowBox[{"[", 
                  RowBox[{"All", ",", "2"}], "]"}], "]"}], "]"}], "]"}]}]}]}],
            "}"}]}]}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "==="}]}]}], "="}],
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"Preparing", " ", "Files", " ", "to", " ", "Export", " ", 
         RowBox[{"(", "Graphics", ")"}]}], " ", "*)"}], " ", 
       "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "==="}]}]}], "="}],
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{"fragNumber", "=", "1"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"===", "===", "==="}], "=", 
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"Fragmentation", " ", "Plots"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"RegularView", "=", 
       RowBox[{"Labeled", "[", 
        RowBox[{
         RowBox[{"Show", "[", 
          RowBox[{"PlotAll", ",", 
           RowBox[{"PlotRange", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"XRange", ",", "YRange", ",", 
              RowBox[{"{", 
               RowBox[{"0", ",", "H"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"BoxRatios", "\[Rule]", "ShowButton"}]}], "]"}], ",", 
         RowBox[{"Style", "[", 
          RowBox[{"\"\<Full View\>\"", ",", "Bold", ",", "15"}], "]"}], ",", 
         "Top"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"LeftView", "=", 
       RowBox[{"Labeled", "[", 
        RowBox[{
         RowBox[{"Show", "[", 
          RowBox[{"PlotAll", ",", 
           RowBox[{"PlotRange", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"XRange", ",", "YRange", ",", 
              RowBox[{"{", 
               RowBox[{"0", ",", "H"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"BoxRatios", "\[Rule]", "ShowButton"}], ",", 
           RowBox[{"ImageSize", "\[Rule]", "185"}], ",", 
           RowBox[{"ViewPoint", "\[Rule]", "Front"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
            RowBox[{"Directive", "[", "Black", "]"}]}], ",", 
           RowBox[{"ImageMargins", "\[Rule]", "20"}]}], "]"}], ",", 
         RowBox[{"Style", "[", 
          RowBox[{"\"\<Left View\>\"", ",", "Bold", ",", "15"}], "]"}], ",", 
         "Top"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"FrontalView", "=", 
       RowBox[{"Labeled", "[", 
        RowBox[{
         RowBox[{"Show", "[", 
          RowBox[{"PlotAll", ",", 
           RowBox[{"PlotRange", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"XRange", ",", "YRange", ",", 
              RowBox[{"{", 
               RowBox[{"0", ",", "H"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"BoxRatios", "\[Rule]", "ShowButton"}], ",", 
           RowBox[{"ImageSize", "\[Rule]", "185"}], ",", 
           RowBox[{"ViewPoint", "\[Rule]", "Right"}], ",", 
           RowBox[{"ImageMargins", "\[Rule]", "20"}]}], "]"}], ",", 
         RowBox[{"Style", "[", 
          RowBox[{"\"\<Front View\>\"", ",", "Bold", ",", "15"}], "]"}], ",", 
         "Top"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"TopView", "=", 
       RowBox[{"Labeled", "[", 
        RowBox[{
         RowBox[{"Show", "[", 
          RowBox[{"FinalPosPlot", ",", 
           RowBox[{"Frame", "\[Rule]", "True"}], ",", 
           RowBox[{"FrameStyle", "\[Rule]", "12"}], ",", 
           RowBox[{"PlotRange", "->", 
            RowBox[{"{", 
             RowBox[{"XRange2", ",", "YRange2"}], "}"}]}], ",", 
           RowBox[{"AspectRatio", "\[Rule]", "aspect2"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
            RowBox[{"Directive", "[", "Black", "]"}]}], ",", 
           RowBox[{"FrameLabel", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"x", ",", "y"}], "}"}]}], ",", 
           RowBox[{"ImageSize", "\[Rule]", "220"}]}], "]"}], ",", 
         RowBox[{"Style", "[", 
          RowBox[{"\"\<Top View\>\"", ",", "Bold", ",", "15"}], "]"}], ",", 
         "Top"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"mainExpo", "=", 
       RowBox[{"{", 
        RowBox[{
        "RegularView", ",", "LeftView", ",", "FrontalView", ",", "TopView"}], 
        "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"===", "===", "==="}], "=", 
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"Time", " ", "Plots"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"TrajectTime", "=", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"EvolTime", "[", 
           RowBox[{"[", "fragNumber", "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{"FAll", "[", 
             RowBox[{"[", "fragNumber", "]"}], "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "1"}], "]"}], "]"}], "/", 
           RowBox[{"10", "^", "3"}]}]}], "}"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"MassTimePlot", "=", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"EvolTime", "[", 
           RowBox[{"[", "fragNumber", "]"}], "]"}], ",", 
          RowBox[{"EvolMassAll", "[", 
           RowBox[{"[", "fragNumber", "]"}], "]"}]}], "}"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"TempTimePlot", "=", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"EvolTime", "[", 
           RowBox[{"[", "fragNumber", "]"}], "]"}], ",", 
          RowBox[{"EvolTemp", "[", 
           RowBox[{"[", "fragNumber", "]"}], "]"}]}], "}"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"VelTimePlot", "=", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"EvolTime", "[", 
           RowBox[{"[", "fragNumber", "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{"EvolVel", "[", 
            RowBox[{"[", "fragNumber", "]"}], "]"}], "/", 
           RowBox[{"10", "^", "3"}]}]}], "}"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"End", " ", "of", " ", "Transposes", " ", "for", " ", "Time"}],
        " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"RowP1Expo", "=", 
       RowBox[{"ListLinePlot", "[", 
        RowBox[{"TrajectTime", ",", 
         RowBox[{"Frame", "\[Rule]", "True"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", "Thick"}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "350"}], ",", 
         RowBox[{"FrameLabel", "\[Rule]", 
          RowBox[{"{", " ", 
           RowBox[{"\"\<t[s]\>\"", ",", "\"\<X[km]\>\""}], "}"}]}], ",", 
         RowBox[{"FrameStyle", "\[Rule]", 
          RowBox[{"Directive", "[", 
           RowBox[{"Black", ",", "15"}], "]"}]}], ",", 
         RowBox[{"ImageMargins", "\[Rule]", "2"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"RowP2Expo", "=", 
       RowBox[{"ListLinePlot", "[", 
        RowBox[{"MassTimePlot", ",", 
         RowBox[{"Frame", "\[Rule]", "True"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", "Thick"}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "350"}], ",", 
         RowBox[{"FrameLabel", "\[Rule]", 
          RowBox[{"{", " ", 
           RowBox[{"\"\<t[s]\>\"", ",", "\"\<M[KG]\>\""}], "}"}]}], ",", 
         RowBox[{"FrameStyle", "\[Rule]", 
          RowBox[{"Directive", "[", 
           RowBox[{"Black", ",", "15"}], "]"}]}], ",", 
         RowBox[{"ImageMargins", "\[Rule]", "2"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"RowP3Expo", "=", 
       RowBox[{"ListLinePlot", "[", 
        RowBox[{"TempTimePlot", ",", 
         RowBox[{"Frame", "\[Rule]", "True"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", "Thick"}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "350"}], ",", 
         RowBox[{"FrameLabel", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<t[s]\>\"", ",", "\"\<T[K]\>\""}], "}"}]}], ",", 
         RowBox[{"FrameStyle", "\[Rule]", 
          RowBox[{"Directive", "[", 
           RowBox[{"Black", ",", "15"}], "]"}]}], ",", 
         RowBox[{"ImageMargins", "\[Rule]", "2"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"RowP4Expo", "=", 
       RowBox[{"ListLinePlot", "[", 
        RowBox[{"VelTimePlot", ",", 
         RowBox[{"Frame", "\[Rule]", "True"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", "Thick"}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "350"}], ",", 
         RowBox[{"FrameLabel", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<t[s]\>\"", ",", "\"\<V[km/s]\>\""}], "}"}]}], ",", 
         RowBox[{"FrameStyle", "\[Rule]", 
          RowBox[{"Directive", "[", 
           RowBox[{"Black", ",", "15"}], "]"}]}], ",", 
         RowBox[{"ImageMargins", "\[Rule]", "2"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"TimeExpo", "=", 
       RowBox[{"{", 
        RowBox[{
        "RowP1Expo", ",", "RowP2Expo", ",", "RowP3Expo", ",", "RowP4Expo"}], 
        "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"===", "===", "==="}], "=", 
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"Height", " ", "Plots"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"ZPlot", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"FAll", "[", 
          RowBox[{"[", "fragNumber", "]"}], "]"}], "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", 
           RowBox[{"-", "1"}]}], "]"}], "]"}], "/", 
        RowBox[{"10", "^", "3"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"TrajectZi", "=", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"FAll", "[", 
             RowBox[{"[", "fragNumber", "]"}], "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "1"}], "]"}], "]"}], "/", 
           RowBox[{"10", "^", "3"}]}], ",", "ZPlot"}], "}"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"MassZiPlot", "=", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"EvolMassAll", "[", 
           RowBox[{"[", "fragNumber", "]"}], "]"}], ",", "ZPlot"}], "}"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"TempZiPlot", "=", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"EvolTemp", "[", 
           RowBox[{"[", "fragNumber", "]"}], "]"}], ",", "ZPlot"}], "}"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"VelZiPlot", "=", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"EvolVel", "[", 
            RowBox[{"[", "fragNumber", "]"}], "]"}], "/", 
           RowBox[{"10", "^", "3"}]}], ",", "ZPlot"}], "}"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "End", " ", "of", " ", "Transposes", " ", "for", " ", "Height"}], " ", 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"ColP1Expo", "=", 
       RowBox[{"ListLinePlot", "[", 
        RowBox[{"TrajectZi", ",", 
         RowBox[{"Frame", "\[Rule]", "True"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", "Thick"}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "350"}], ",", 
         RowBox[{"FrameLabel", "\[Rule]", 
          RowBox[{"{", " ", 
           RowBox[{"\"\<X[km]\>\"", ",", "\"\<Z[km]\>\""}], "}"}]}], ",", 
         RowBox[{"FrameStyle", "\[Rule]", 
          RowBox[{"Directive", "[", 
           RowBox[{"Black", ",", "15"}], "]"}]}], ",", 
         RowBox[{"ImageMargins", "\[Rule]", "2"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"ColP2Expo", "=", 
       RowBox[{"ListLinePlot", "[", 
        RowBox[{"MassZiPlot", ",", 
         RowBox[{"Frame", "\[Rule]", "True"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", "Thick"}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "350"}], " ", ",", 
         RowBox[{"FrameLabel", "\[Rule]", 
          RowBox[{"{", " ", 
           RowBox[{"\"\<M[KG]\>\"", ",", "\"\<Z[km]\>\""}], "}"}]}], ",", 
         RowBox[{"FrameStyle", "\[Rule]", 
          RowBox[{"Directive", "[", 
           RowBox[{"Black", ",", "15"}], "]"}]}], ",", 
         RowBox[{"ImageMargins", "\[Rule]", "2"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"ColP3Expo", "=", 
       RowBox[{"ListLinePlot", "[", 
        RowBox[{"TempZiPlot", ",", 
         RowBox[{"Frame", "\[Rule]", "True"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", "Thick"}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "350"}], ",", 
         RowBox[{"FrameLabel", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<T[K]\>\"", ",", "\"\<Z[km]\>\""}], "}"}]}], ",", 
         RowBox[{"FrameStyle", "\[Rule]", 
          RowBox[{"Directive", "[", 
           RowBox[{"Black", ",", "15"}], "]"}]}], ",", 
         RowBox[{"ImageMargins", "\[Rule]", "2"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"ColP4Expo", "=", 
       RowBox[{"ListLinePlot", "[", 
        RowBox[{"VelZiPlot", ",", 
         RowBox[{"Frame", "\[Rule]", "True"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", "Thick"}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "350"}], ",", 
         RowBox[{"FrameLabel", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<V[km/s]\>\"", ",", "\"\<Z[km]\>\""}], "}"}]}], ",", 
         RowBox[{"FrameStyle", "\[Rule]", 
          RowBox[{"Directive", "[", 
           RowBox[{"Black", ",", "15"}], "]"}]}], ",", 
         RowBox[{"ImageMargins", "\[Rule]", "2"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"ZExpo", "=", 
       RowBox[{"{", 
        RowBox[{
        "ColP1Expo", ",", "ColP2Expo", ",", "ColP3Expo", ",", "ColP4Expo"}], 
        "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"===", "===", "==="}], "=", 
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Defyning", " ", "Output", " ", "File", " ", "and", " ", "Directory", 
        " ", "Name"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"===", "===", "==="}], "=", 
        RowBox[{
         RowBox[{"===", "===", "===", "===", "===", "===", "===", "==="}], 
         "="}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", "Dir", " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"OutputDir", "=", 
       RowBox[{
        RowBox[{"NotebookDirectory", "[", "]"}], "<>", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"NameOfFile", "\[Equal]", "\"\<\>\""}], ",", 
          RowBox[{"NameOfFile", "<>", "\"\<M_\>\""}], ",", 
          RowBox[{"NameOfFile", "<>", "\"\<_M_\>\""}]}], "]"}], "<>", 
        RowBox[{"ToString", "[", "M", "]"}], "<>", "\"\<_Dc_\>\"", "<>", 
        RowBox[{"ToString", "[", "Dc", "]"}], "<>", "\"\<_Lv_\>\"", "<>", 
        RowBox[{"ToString", "[", "Lv", "]"}], "<>", "\"\<_rho_\>\"", "<>", 
        RowBox[{"ToString", "[", "rho", "]"}], "<>", "\"\<_cp_\>\"", "<>", 
        RowBox[{"ToString", "[", "cp", "]"}], "<>", "\"\<_H_\>\"", "<>", 
        RowBox[{"ToString", "[", "H", "]"}], "<>", "\"\<_VE_\>\"", "<>", 
        RowBox[{"ToString", "[", "VE", "]"}], "<>", "\"\<_PhiE_\>\"", "<>", 
        RowBox[{"ToString", "[", "\[Phi]E", "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"===", "===", "==="}], "=", 
        RowBox[{
         RowBox[{"===", "===", "===", "===", "===", "===", "===", "==="}], 
         "="}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"Table", " ", "File"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"OutputFileName", "=", 
       RowBox[{"OutputDir", "<>", "\"\<\\\\\>\"", "<>", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"NameOfFile", "\[Equal]", "\"\<\>\""}], ",", 
          RowBox[{"NameOfFile", "<>", "\"\<M_\>\""}], ",", 
          RowBox[{"NameOfFile", "<>", "\"\<_M_\>\""}]}], "]"}], "<>", 
        RowBox[{"ToString", "[", "M", "]"}], "<>", "\"\<_Dc_\>\"", "<>", 
        RowBox[{"ToString", "[", "Dc", "]"}], "<>", "\"\<_Lv_\>\"", "<>", 
        RowBox[{"ToString", "[", "Lv", "]"}], "<>", "\"\<_rho_\>\"", "<>", 
        RowBox[{"ToString", "[", "rho", "]"}], "<>", "\"\<_cp_\>\"", "<>", 
        RowBox[{"ToString", "[", "cp", "]"}], "<>", "\"\<_H_\>\"", "<>", 
        RowBox[{"ToString", "[", "H", "]"}], "<>", "\"\<_VE_\>\"", "<>", 
        RowBox[{"ToString", "[", "VE", "]"}], "<>", "\"\<_PhiE_\>\"", "<>", 
        RowBox[{"ToString", "[", "\[Phi]E", "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"===", "===", "==="}], "=", 
        RowBox[{
         RowBox[{"===", "===", "===", "===", "===", "===", "===", "==="}], 
         "="}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Defying", " ", "specific", " ", "names", " ", "for", " ", "Evolution",
         " ", "Plot", " ", "files"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"TimeName", "=", 
       RowBox[{"OutputDir", "<>", "\"\<\\\\\>\"", "<>", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"NameOfFile", "\[Equal]", "\"\<\>\""}], ",", 
          RowBox[{"NameOfFile", "<>", "\"\<Time\>\""}], ",", 
          RowBox[{"NameOfFile", "<>", "\"\<_Time\>\""}]}], "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"ZName", "=", 
       RowBox[{"OutputDir", "<>", "\"\<\\\\\>\"", "<>", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"NameOfFile", "\[Equal]", "\"\<\>\""}], ",", 
          RowBox[{"NameOfFile", "<>", "\"\<Z\>\""}], ",", 
          RowBox[{"NameOfFile", "<>", "\"\<_Z\>\""}]}], "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"===", "===", "==="}], "=", 
        RowBox[{
         RowBox[{"===", "===", "===", "===", "===", "===", "===", "==="}], 
         "="}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Defying", " ", "specific", " ", "name", " ", "for", " ", 
        "Fragmentation", " ", "Plot", " ", "files"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"FragsName", "=", 
       RowBox[{"OutputDir", "<>", "\"\<\\\\\>\"", "<>", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"NameOfFile", "\[Equal]", "\"\<\>\""}], ",", 
          RowBox[{"NameOfFile", "<>", "\"\<Frags\>\""}], ",", 
          RowBox[{"NameOfFile", "<>", "\"\<_Frags\>\""}]}], "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "==="}]}]}], "="}],
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Defining", " ", "Time", " ", "and", " ", "Height", " ", "Plots", " ", 
         RowBox[{"(", 
          RowBox[{"Row", " ", "and", " ", "Column"}], ")"}]}], " ", "*)"}], 
       "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "==="}]}]}], "="}],
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"===", "===", "==="}], "=", 
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"Time", " ", "Plots"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"RowP1", "=", 
       RowBox[{"ListLinePlot", "[", 
        RowBox[{"TrajectTime", ",", 
         RowBox[{"Frame", "\[Rule]", "True"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", "Thick"}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "170"}], ",", 
         RowBox[{"ImageMargins", "\[Rule]", "2"}], ",", 
         RowBox[{"Prolog", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"White", ",", 
            RowBox[{"Rectangle", "[", 
             RowBox[{
              RowBox[{"Scaled", "[", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}], "]"}], ",", 
              RowBox[{"Scaled", "[", 
               RowBox[{"{", 
                RowBox[{"1", ",", "1"}], "}"}], "]"}]}], "]"}]}], "}"}]}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"RowP2", "=", 
       RowBox[{"ListLinePlot", "[", 
        RowBox[{"MassTimePlot", ",", 
         RowBox[{"Frame", "\[Rule]", "True"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", "Thick"}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "170"}], ",", 
         RowBox[{"Prolog", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"White", ",", 
            RowBox[{"Rectangle", "[", 
             RowBox[{
              RowBox[{"Scaled", "[", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}], "]"}], ",", 
              RowBox[{"Scaled", "[", 
               RowBox[{"{", 
                RowBox[{"1", ",", "1"}], "}"}], "]"}]}], "]"}]}], "}"}]}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"RowP3", "=", 
       RowBox[{"ListLinePlot", "[", 
        RowBox[{"TempTimePlot", ",", 
         RowBox[{"Frame", "\[Rule]", "True"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", "Thick"}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "170"}], ",", 
         RowBox[{"Prolog", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"White", ",", 
            RowBox[{"Rectangle", "[", 
             RowBox[{
              RowBox[{"Scaled", "[", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}], "]"}], ",", 
              RowBox[{"Scaled", "[", 
               RowBox[{"{", 
                RowBox[{"1", ",", "1"}], "}"}], "]"}]}], "]"}]}], "}"}]}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"RowP4", "=", 
       RowBox[{"ListLinePlot", "[", 
        RowBox[{"VelTimePlot", ",", 
         RowBox[{"Frame", "\[Rule]", "True"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", "Thick"}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "170"}], ",", 
         RowBox[{"Prolog", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"White", ",", 
            RowBox[{"Rectangle", "[", 
             RowBox[{
              RowBox[{"Scaled", "[", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}], "]"}], ",", 
              RowBox[{"Scaled", "[", 
               RowBox[{"{", 
                RowBox[{"1", ",", "1"}], "}"}], "]"}]}], "]"}]}], "}"}]}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"===", "===", "==="}], "=", 
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"Height", " ", "Plots"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"ColP1", "=", 
       RowBox[{"ListLinePlot", "[", 
        RowBox[{"TrajectZi", ",", 
         RowBox[{"Frame", "\[Rule]", "True"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", "Thick"}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "170"}], ",", 
         RowBox[{"ImageMargins", "\[Rule]", "2"}], ",", 
         RowBox[{"FrameTicks", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"None", ",", "All"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"All", ",", "None"}], "}"}]}], "}"}]}], ",", 
         RowBox[{"Prolog", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"White", ",", 
            RowBox[{"Rectangle", "[", 
             RowBox[{
              RowBox[{"Scaled", "[", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}], "]"}], ",", 
              RowBox[{"Scaled", "[", 
               RowBox[{"{", 
                RowBox[{"1", ",", "1"}], "}"}], "]"}]}], "]"}]}], "}"}]}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"ColP2", "=", 
       RowBox[{"ListLinePlot", "[", 
        RowBox[{"MassZiPlot", ",", 
         RowBox[{"Frame", "\[Rule]", "True"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", "Thick"}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "170"}], ",", 
         RowBox[{"ScalingFunctions", "\[Rule]", 
          RowBox[{"{", "\"\<Reverse\>\"", "}"}]}], " ", ",", 
         RowBox[{"FrameTicks", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"None", ",", "All"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"All", ",", "None"}], "}"}]}], "}"}]}], ",", 
         RowBox[{"Prolog", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"White", ",", 
            RowBox[{"Rectangle", "[", 
             RowBox[{
              RowBox[{"Scaled", "[", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}], "]"}], ",", 
              RowBox[{"Scaled", "[", 
               RowBox[{"{", 
                RowBox[{"1", ",", "1"}], "}"}], "]"}]}], "]"}]}], "}"}]}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"ColP3", "=", 
       RowBox[{"ListLinePlot", "[", 
        RowBox[{"TempZiPlot", ",", 
         RowBox[{"Frame", "\[Rule]", "True"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", "Thick"}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "170"}], ",", 
         RowBox[{"FrameTicks", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"None", ",", "All"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"All", ",", "None"}], "}"}]}], "}"}]}], ",", 
         RowBox[{"Prolog", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"White", ",", 
            RowBox[{"Rectangle", "[", 
             RowBox[{
              RowBox[{"Scaled", "[", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}], "]"}], ",", 
              RowBox[{"Scaled", "[", 
               RowBox[{"{", 
                RowBox[{"1", ",", "1"}], "}"}], "]"}]}], "]"}]}], "}"}]}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"ColP4", "=", 
       RowBox[{"ListLinePlot", "[", 
        RowBox[{"VelZiPlot", ",", 
         RowBox[{"Frame", "\[Rule]", "True"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", "Thick"}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "170"}], ",", 
         RowBox[{"ScalingFunctions", "\[Rule]", 
          RowBox[{"{", "\"\<Reverse\>\"", "}"}]}], ",", 
         RowBox[{"FrameTicks", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"None", ",", "All"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"All", ",", "None"}], "}"}]}], "}"}]}], ",", 
         RowBox[{"Prolog", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"White", ",", 
            RowBox[{"Rectangle", "[", 
             RowBox[{
              RowBox[{"Scaled", "[", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}], "]"}], ",", 
              RowBox[{"Scaled", "[", 
               RowBox[{"{", 
                RowBox[{"1", ",", "1"}], "}"}], "]"}]}], "]"}]}], "}"}]}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"===", "===", "==="}], "=", 
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", "Row", " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"MyRow", "=", 
       RowBox[{"Column", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Row", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Legended", "[", 
               RowBox[{"RowP1", ",", 
                RowBox[{"Placed", "[", 
                 RowBox[{"\"\<X[km]\>\"", ",", "Center"}], "]"}]}], "]"}], 
              ",", 
              RowBox[{"Legended", "[", 
               RowBox[{"RowP2", ",", 
                RowBox[{"Placed", "[", 
                 RowBox[{"\"\<Mass[kg]\>\"", ",", "Center"}], "]"}]}], "]"}], 
              ",", 
              RowBox[{"Legended", "[", 
               RowBox[{"RowP3", ",", 
                RowBox[{"Placed", "[", 
                 RowBox[{"\"\<Temperature[K]\>\"", ",", "Center"}], "]"}]}], 
               "]"}], ",", 
              RowBox[{"Legended", "[", 
               RowBox[{"RowP4", ",", 
                RowBox[{"Placed", "[", 
                 RowBox[{"\"\<Velocity[km/s]\>\"", ",", "Center"}], "]"}]}], 
               "]"}]}], "}"}], "]"}], ",", "\"\<Time Span[s]\>\""}], "}"}], 
         ",", 
         RowBox[{"Alignment", "\[Rule]", "Center"}], ",", 
         RowBox[{"Spacings", "\[Rule]", "0"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"===", "===", "==="}], "=", 
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", "Collumn", " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"MyCol", "=", 
       RowBox[{"Labeled", "[", 
        RowBox[{
         RowBox[{"Column", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Legended", "[", 
              RowBox[{"ColP1", ",", 
               RowBox[{"Placed", "[", 
                RowBox[{"\"\<X[km]\>\"", ",", "Center"}], "]"}]}], "]"}], ",", 
             RowBox[{"Legended", "[", 
              RowBox[{"ColP2", ",", 
               RowBox[{"Placed", "[", 
                RowBox[{"\"\<Mass[kg]\>\"", ",", "Center"}], "]"}]}], "]"}], 
             ",", 
             RowBox[{"Legended", "[", 
              RowBox[{"ColP3", ",", 
               RowBox[{"Placed", "[", 
                RowBox[{"\"\<Temperature[K]\>\"", ",", "Center"}], "]"}]}], 
              "]"}], ",", 
             RowBox[{"Legended", "[", 
              RowBox[{"ColP4", ",", 
               RowBox[{"Placed", "[", 
                RowBox[{"\"\<Velocity[km/s]\>\"", ",", "Center"}], "]"}]}], 
              "]"}]}], "}"}], ",", 
           RowBox[{"Alignment", "\[Rule]", "Right"}], ",", 
           RowBox[{"Spacings", "\[Rule]", ".5"}]}], "]"}], ",", 
         "\"\<Heigh[km]\>\"", ",", "Right", ",", 
         RowBox[{"RotateLabel", "\[Rule]", "True"}], ",", 
         RowBox[{"Spacings", "\[Rule]", ".2"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "==="}]}]}], "="}],
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"Creating", " ", "Day"}], " ", "&"}], " ", "Night", " ", 
         "Arts", " ", "for", " ", "Main", " ", "Plot"}], " ", "*)"}], " ", 
       "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "==="}]}]}], "="}],
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "==="}]}]}], "="}],
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"The", " ", "Day"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"PlotArt", "\[Equal]", "Day"}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"===", "===", "==="}], "=", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
            "===", "===", 
           RowBox[{"\[Equal]", 
            RowBox[{
            "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"Creating", " ", "the", " ", "Mountains"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"mountains", "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"XRange", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", "i", ",", 
              RowBox[{"(*", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"Cos", "[", "i", "]"}], "^", "4"}], "*", 
                 RowBox[{"H", "/", "6"}]}], "+"}], "*)"}], 
              RowBox[{
               RowBox[{
                RowBox[{"Sin", "[", "i", "]"}], "^", "2"}], "*", 
               RowBox[{"H", "/", "4"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", 
              RowBox[{"YRange", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", 
              RowBox[{"YRange", "[", 
               RowBox[{"[", "2", "]"}], "]"}], ",", 
              RowBox[{"Round", "[", 
               RowBox[{
                RowBox[{"Round", "[", 
                 RowBox[{
                  RowBox[{"Differences", "[", "YRange", "]"}], "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "]"}], "/", "80."}], 
               "]"}]}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"PreContour", "=", 
          RowBox[{"ListPointPlot3D", "[", 
           RowBox[{"mountains", ",", 
            RowBox[{"PlotRange", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Round", "[", 
                   RowBox[{"XRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "-", "1"}], ",", 
                 RowBox[{
                  RowBox[{"Round", "[", 
                   RowBox[{"XRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], "+", "1"}]}], 
                "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Round", "[", 
                   RowBox[{"YRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "-", "1"}], ",", 
                 RowBox[{
                  RowBox[{"Round", "[", 
                   RowBox[{"YRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], "+", "1"}]}], 
                "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "H"}], "}"}]}], "}"}]}], ",", 
            RowBox[{"Filling", "\[Rule]", "Bottom"}], ",", 
            RowBox[{"FillingStyle", "\[Rule]", 
             RowBox[{"Opacity", "[", 
              RowBox[{".6", ",", 
               RowBox[{"Blend", "[", 
                RowBox[{"{", 
                 RowBox[{"Brown", ",", "Green"}], "}"}], "]"}]}], "]"}]}], 
            ",", 
            RowBox[{"PlotStyle", "\[Rule]", 
             RowBox[{"Opacity", "[", 
              RowBox[{".6", ",", 
               RowBox[{"Blend", "[", 
                RowBox[{"{", 
                 RowBox[{"Brown", ",", "Green"}], "}"}], "]"}]}], "]"}]}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"===", "===", "==="}], "=", 
           RowBox[{
           "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
             "===", "===", 
            RowBox[{"\[Equal]", 
             RowBox[{
             "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "Creating", " ", "art", " ", "for", " ", "each", " ", "plane"}], 
          " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Right", " ", "Plane"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"contRight", "=", 
          RowBox[{"ContourPlot3D", "[", " ", 
           RowBox[{
            RowBox[{"y", "\[Equal]", 
             RowBox[{"XRange", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], ",", 
            RowBox[{"{", 
             RowBox[{"x", ",", 
              RowBox[{"XRange", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", 
              RowBox[{"XRange", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"y", ",", 
              RowBox[{"YRange", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", 
              RowBox[{"YRange", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"z", ",", "0", ",", "H"}], "}"}], ",", 
            RowBox[{"Mesh", "\[Rule]", "None"}], ",", 
            RowBox[{"ContourStyle", "\[Rule]", 
             RowBox[{"Opacity", "[", 
              RowBox[{".8", ",", 
               RowBox[{"Lighter", "[", 
                RowBox[{"Cyan", ",", ".7"}], "]"}]}], "]"}]}], ",", 
            RowBox[{"Lighting", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"\"\<Ambient\>\"", ",", " ", 
                RowBox[{"Lighter", "[", 
                 RowBox[{"Blue", ",", ".88"}], "]"}]}], "}"}], "}"}]}], ",", 
            RowBox[{"PlotRange", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"XRange", ",", "YRange", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "H"}], "}"}]}], "}"}]}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Left", " ", "Plane"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"contLeft", "=", 
          RowBox[{"ContourPlot3D", "[", " ", 
           RowBox[{
            RowBox[{"y", "\[Equal]", 
             RowBox[{"XRange", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], ",", 
            RowBox[{"{", 
             RowBox[{"x", ",", 
              RowBox[{"XRange", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", 
              RowBox[{"XRange", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"y", ",", 
              RowBox[{"YRange", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", 
              RowBox[{"YRange", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"z", ",", "0", ",", "H"}], "}"}], ",", 
            RowBox[{"Mesh", "\[Rule]", "None"}], ",", 
            RowBox[{"ContourStyle", "\[Rule]", 
             RowBox[{"Opacity", "[", 
              RowBox[{".8", ",", 
               RowBox[{"Lighter", "[", 
                RowBox[{"Cyan", ",", ".7"}], "]"}]}], "]"}]}], ",", 
            RowBox[{"Lighting", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"\"\<Ambient\>\"", ",", " ", 
                RowBox[{"Lighter", "[", 
                 RowBox[{"Blue", ",", ".88"}], "]"}]}], "}"}], "}"}]}], ",", 
            RowBox[{"PlotRange", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"XRange", ",", "YRange", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "H"}], "}"}]}], "}"}]}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Back", " ", "Plane"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"contBack", "=", 
          RowBox[{"ContourPlot3D", "[", 
           RowBox[{
            RowBox[{"x", "\[Equal]", 
             RowBox[{"YRange", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], ",", 
            RowBox[{"{", 
             RowBox[{"x", ",", 
              RowBox[{"XRange", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", 
              RowBox[{"XRange", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"y", ",", 
              RowBox[{"YRange", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", 
              RowBox[{"YRange", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"z", ",", "0", ",", "H"}], "}"}], ",", 
            RowBox[{"Mesh", "\[Rule]", "None"}], ",", 
            RowBox[{"ContourStyle", "\[Rule]", 
             RowBox[{"Opacity", "[", 
              RowBox[{".8", ",", 
               RowBox[{"Lighter", "[", 
                RowBox[{"Cyan", ",", ".7"}], "]"}]}], "]"}]}], ",", 
            RowBox[{"Lighting", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"\"\<Ambient\>\"", ",", " ", 
                RowBox[{"Lighter", "[", 
                 RowBox[{"Blue", ",", ".88"}], "]"}]}], "}"}], "}"}]}], ",", 
            RowBox[{"PlotRange", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"XRange", ",", "YRange", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "H"}], "}"}]}], "}"}]}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Front", " ", "Plane"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"contFront", "=", 
          RowBox[{"ContourPlot3D", "[", 
           RowBox[{
            RowBox[{"x", "\[Equal]", 
             RowBox[{"YRange", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], ",", 
            RowBox[{"{", 
             RowBox[{"x", ",", 
              RowBox[{"XRange", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", 
              RowBox[{"XRange", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"y", ",", 
              RowBox[{"YRange", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", 
              RowBox[{"YRange", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"z", ",", "0", ",", "H"}], "}"}], ",", 
            RowBox[{"Mesh", "\[Rule]", "None"}], ",", 
            RowBox[{"ContourStyle", "\[Rule]", 
             RowBox[{"Opacity", "[", 
              RowBox[{".8", ",", 
               RowBox[{"Lighter", "[", 
                RowBox[{"Cyan", ",", ".7"}], "]"}]}], "]"}]}], ",", 
            RowBox[{"Lighting", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"\"\<Ambient\>\"", ",", " ", 
                RowBox[{"Lighter", "[", 
                 RowBox[{"Blue", ",", ".88"}], "]"}]}], "}"}], "}"}]}], ",", 
            RowBox[{"PlotRange", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"XRange", ",", "YRange", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "H"}], "}"}]}], "}"}]}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Botton", " ", "Plane"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"contBott", "=", 
          RowBox[{"Plot3D", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"x", "=", "0"}], ",", 
              RowBox[{"y", "=", "0"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"x", ",", 
              RowBox[{"XRange", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", 
              RowBox[{"XRange", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"y", ",", 
              RowBox[{"YRange", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", 
              RowBox[{"YRange", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
            RowBox[{"PlotStyle", "\[Rule]", 
             RowBox[{"Opacity", "[", 
              RowBox[{".2", ",", 
               RowBox[{"Blend", "[", 
                RowBox[{"{", 
                 RowBox[{"Brown", ",", "Green"}], "}"}], "]"}]}], "]"}]}], 
            ",", 
            RowBox[{"Lighting", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"\"\<Ambient\>\"", ",", " ", "White"}], "}"}], "}"}]}],
             ",", 
            RowBox[{"PlotRange", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"XRange", ",", "YRange", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "H"}], "}"}]}], "}"}]}], ",", 
            RowBox[{"Mesh", "\[Rule]", "None"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "Top", " ", "Plane", " ", "for", " ", "view", " ", "from", " ", 
           "top"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"contTop", "=", 
          RowBox[{"Plot3D", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"x", "=", "H"}], ",", 
              RowBox[{"y", "=", "H"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"x", ",", 
              RowBox[{"XRange", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", 
              RowBox[{"XRange", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"y", ",", 
              RowBox[{"YRange", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", 
              RowBox[{"YRange", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
            RowBox[{"PlotStyle", "\[Rule]", 
             RowBox[{"Opacity", "[", 
              RowBox[{".3", ",", 
               RowBox[{"Lighter", "[", 
                RowBox[{"Cyan", ",", ".75"}], "]"}]}], "]"}]}], ",", 
            RowBox[{"Lighting", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"\"\<Ambient\>\"", ",", " ", 
                RowBox[{"Lighter", "[", " ", 
                 RowBox[{"Blue", ",", ".9"}], "]"}]}], "}"}], "}"}]}], ",", 
            RowBox[{"PlotRange", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"XRange", ",", "YRange", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "H"}], "}"}]}], "}"}]}], ",", 
            RowBox[{"Mesh", "\[Rule]", "None"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "Top", " ", "Plane", " ", "for", " ", "view", " ", "from", " ", 
           "below"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"contTop2", "=", 
          RowBox[{"Plot3D", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"x", "=", "H"}], ",", 
              RowBox[{"y", "=", "H"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"x", ",", 
              RowBox[{"XRange", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", 
              RowBox[{"XRange", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"y", ",", 
              RowBox[{"YRange", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", 
              RowBox[{"YRange", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
            RowBox[{"PlotStyle", "\[Rule]", 
             RowBox[{"Opacity", "[", 
              RowBox[{".3", ",", 
               RowBox[{"Lighter", "[", 
                RowBox[{"Cyan", ",", ".7"}], "]"}]}], "]"}]}], ",", 
            RowBox[{"Lighting", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"\"\<Ambient\>\"", ",", 
                RowBox[{"Lighter", "[", " ", 
                 RowBox[{"Blue", ",", ".9"}], "]"}]}], "}"}], "}"}]}], ",", 
            RowBox[{"PlotRange", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"XRange", ",", "YRange", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "H"}], "}"}]}], "}"}]}], ",", 
            RowBox[{"Mesh", "\[Rule]", "None"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Creating", " ", "art", " ", "lists"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"contoursDiag", "=", 
          RowBox[{"Show", "[", 
           RowBox[{
           "contBack", ",", "contRight", ",", "contBott", ",", "contTop"}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"contoursFront", "=", 
          RowBox[{"Show", "[", 
           RowBox[{
           "contBack", ",", "contRight", ",", "contFront", ",", "contBott", 
            ",", "contTop2"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"contoursLeft", "=", 
          RowBox[{"Show", "[", 
           RowBox[{
           "contBack", ",", "contLeft", ",", "contRight", ",", "contBott", 
            ",", "contTop2"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"contoursFromTop", "=", 
          RowBox[{"RegionPlot", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"x", ">", 
              RowBox[{"2", "*", 
               RowBox[{"XRange", "[", 
                RowBox[{"[", "1", "]"}], "]"}]}]}], "||", 
             RowBox[{"y", ">", 
              RowBox[{"2", "*", 
               RowBox[{"YRange", "[", 
                RowBox[{"[", "1", "]"}], "]"}]}]}]}], ",", 
            RowBox[{"{", 
             RowBox[{"x", ",", 
              RowBox[{"2.", "*", 
               RowBox[{"XRange", "[", 
                RowBox[{"[", "1", "]"}], "]"}]}], ",", 
              RowBox[{"2", "*", 
               RowBox[{"XRange", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"y", ",", 
              RowBox[{"2", "*", 
               RowBox[{"YRange", "[", 
                RowBox[{"[", "1", "]"}], "]"}]}], ",", 
              RowBox[{"2", "*", 
               RowBox[{"YRange", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
            RowBox[{"PlotStyle", "\[Rule]", 
             RowBox[{"Opacity", "[", 
              RowBox[{".18", ",", 
               RowBox[{"Blend", "[", 
                RowBox[{"{", 
                 RowBox[{"Brown", ",", "Green"}], "}"}], "]"}]}], "]"}]}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"===", "===", "==="}], "=", 
           RowBox[{
           "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
             "===", "===", 
            RowBox[{"\[Equal]", 
             RowBox[{
             "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Creating", " ", "the", " ", "Sun"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"sun", "=", 
          RowBox[{"ListPointPlot3D", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"XRange", "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", 
               RowBox[{"YRange", "[", 
                RowBox[{"[", "2", "]"}], "]"}], ",", 
               RowBox[{"H", "-", 
                RowBox[{".05", "*", "H"}]}]}], "}"}], "}"}], ",", 
            RowBox[{"PlotRange", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"XRange", ",", "YRange", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "H"}], "}"}]}], "}"}]}], ",", 
            RowBox[{"PlotStyle", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"PointSize", "[", ".16", "]"}], ",", "Yellow"}], 
              "}"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"===", "===", "==="}], "=", 
           RowBox[{
           "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
             "===", "===", 
            RowBox[{"\[Equal]", 
             RowBox[{
             "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", "\[IndentingNewLine]", 
          RowBox[{"===", "===", " ", "Main", " ", "===", "==="}], 
          "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"main", "=", 
          RowBox[{"Framed", "[", 
           RowBox[{
            RowBox[{"Grid", "[", 
             RowBox[{
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{"Diag", " ", "View"}], " ", "*)"}], 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Show", "[", 
                   RowBox[{
                   "PlotAll", ",", "PreContour", ",", "sun", ",", 
                    "contoursDiag", ",", 
                    RowBox[{"Lighting", "\[Rule]", "None"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"XRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "-", 
                    RowBox[{"0.03", "*", 
                    RowBox[{"XRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}]}], ",", 
                    RowBox[{
                    RowBox[{"XRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "-", 
                    RowBox[{"0.03", "*", 
                    RowBox[{"XRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"YRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "-", 
                    RowBox[{"0.03", "*", 
                    RowBox[{"YRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}]}], ",", 
                    RowBox[{
                    RowBox[{"YRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "-", 
                    RowBox[{"0.03", "*", 
                    RowBox[{"YRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "H"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"BoxRatios", "\[Rule]", "ShowButton"}]}], "]"}], 
                  ",", "\[IndentingNewLine]", 
                  RowBox[{"(*", " ", 
                   RowBox[{"Front", " ", "View"}], " ", "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"Show", "[", 
                   RowBox[{
                   "PlotAll", ",", "PreContour", ",", "sun", ",", 
                    "contoursFront", ",", 
                    RowBox[{"Lighting", "\[Rule]", "None"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"XRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "-", 
                    RowBox[{"0.03", "*", 
                    RowBox[{"XRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}]}], ",", 
                    RowBox[{
                    RowBox[{"XRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "-", 
                    RowBox[{"0.03", "*", 
                    RowBox[{"XRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"YRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "-", 
                    RowBox[{"0.03", "*", 
                    RowBox[{"YRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}]}], ",", 
                    RowBox[{
                    RowBox[{"YRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "-", 
                    RowBox[{"0.03", "*", 
                    RowBox[{"YRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "H"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"BoxRatios", "\[Rule]", "ShowButton"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "185"}], ",", 
                    RowBox[{"ViewPoint", "\[Rule]", "Front"}]}], "]"}]}], 
                 "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{"Left", " ", "View"}], " ", "*)"}], 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Show", "[", 
                   RowBox[{
                   "PlotAll", ",", "PreContour", ",", "sun", ",", 
                    "contoursLeft", ",", 
                    RowBox[{"Lighting", "\[Rule]", "None"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"XRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "-", 
                    RowBox[{"0.03", "*", 
                    RowBox[{"XRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}]}], ",", 
                    RowBox[{
                    RowBox[{"XRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "-", 
                    RowBox[{"0.03", "*", 
                    RowBox[{"XRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"YRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "-", 
                    RowBox[{"0.03", "*", 
                    RowBox[{"YRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}]}], ",", 
                    RowBox[{
                    RowBox[{"YRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "-", 
                    RowBox[{"0.03", "*", 
                    RowBox[{"YRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "H"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"BoxRatios", "\[Rule]", "ShowButton"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "185"}], ",", 
                    RowBox[{"ViewPoint", "\[Rule]", "Right"}]}], "]"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"(*", " ", 
                   RowBox[{"Top", " ", "View"}], " ", "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"Show", "[", 
                   RowBox[{"FinalPosPlot", ",", "contoursFromTop", ",", 
                    RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                    RowBox[{"FrameStyle", "\[Rule]", "10"}], ",", 
                    RowBox[{"PlotRange", "->", 
                    RowBox[{"{", 
                    RowBox[{"XRange2", ",", "YRange2"}], "}"}]}], ",", 
                    RowBox[{"AspectRatio", "\[Rule]", "aspect2"}]}], "]"}]}], 
                 "}"}]}], "}"}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Center"}], ",", 
              RowBox[{"Spacings", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{"2.5", ",", ".5"}], "\[IndentingNewLine]", "}"}]}]}], 
             "]"}], ",", 
            RowBox[{"ImageSize", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"484", ",", "460"}], "}"}]}], ",", 
            RowBox[{"ImageMargins", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "12"}], "}"}]}], "}"}]}], ",", 
            RowBox[{"Background", "\[Rule]", "White"}], ",", 
            RowBox[{"FrameStyle", "\[Rule]", "Black"}], ",", 
            RowBox[{"Alignment", "\[Rule]", "Center"}]}], "]"}]}]}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "==="}]}]}], "="}],
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"The", " ", "Night"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"PlotArt", "\[Equal]", "Night"}], ",", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"===", "===", "==="}], "=", 
           RowBox[{
           "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
             "===", "===", 
            RowBox[{"\[Equal]", 
             RowBox[{
             "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Creating", " ", "the", " ", "Mountains"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"mountains", "=", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"XRange", "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", "i", ",", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"Cos", "[", "i", "]"}], "^", "4"}], "*", 
                  RowBox[{"H", "/", "6"}]}], "+"}], "*)"}], 
               RowBox[{
                RowBox[{
                 RowBox[{"Sin", "[", "i", "]"}], "^", "2"}], "*", 
                RowBox[{"H", "/", "4"}]}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", 
               RowBox[{"YRange", "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", 
               RowBox[{"YRange", "[", 
                RowBox[{"[", "2", "]"}], "]"}], ",", 
               RowBox[{"Round", "[", 
                RowBox[{
                 RowBox[{"Round", "[", 
                  RowBox[{
                   RowBox[{"Differences", "[", "YRange", "]"}], "[", 
                   RowBox[{"[", "1", "]"}], "]"}], "]"}], "/", "80."}], 
                "]"}]}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"PreContour", "=", 
           RowBox[{"ListPointPlot3D", "[", 
            RowBox[{"mountains", ",", 
             RowBox[{"PlotRange", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Round", "[", 
                    RowBox[{"XRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "-", "1"}], ",", 
                  RowBox[{
                   RowBox[{"Round", "[", 
                    RowBox[{"XRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], "+", "1"}]}], 
                 "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Round", "[", 
                    RowBox[{"YRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "-", "1"}], ",", 
                  RowBox[{
                   RowBox[{"Round", "[", 
                    RowBox[{"YRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], "+", "1"}]}], 
                 "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"0", ",", "H"}], "}"}]}], "}"}]}], ",", 
             RowBox[{"Filling", "\[Rule]", "Bottom"}], ",", 
             RowBox[{"FillingStyle", "\[Rule]", 
              RowBox[{"Opacity", "[", 
               RowBox[{".6", ",", 
                RowBox[{"Blend", "[", 
                 RowBox[{"{", 
                  RowBox[{"Brown", ",", "Green"}], "}"}], "]"}]}], "]"}]}], 
             ",", 
             RowBox[{"PlotStyle", "\[Rule]", 
              RowBox[{"Opacity", "[", 
               RowBox[{".6", ",", 
                RowBox[{"Blend", "[", 
                 RowBox[{"{", 
                  RowBox[{"Brown", ",", "Green"}], "}"}], "]"}]}], "]"}]}]}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"===", "===", "==="}], "=", 
            RowBox[{
            "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
              "===", "===", 
             RowBox[{"\[Equal]", 
              RowBox[{
              "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Creating", " ", "art", " ", "for", " ", "each", " ", "plane"}], 
           " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"Right", " ", "Plane"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"contRight", "=", 
           RowBox[{"ContourPlot3D", "[", " ", 
            RowBox[{
             RowBox[{"y", "\[Equal]", 
              RowBox[{"XRange", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", 
               RowBox[{"XRange", "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", 
               RowBox[{"XRange", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"y", ",", 
               RowBox[{"YRange", "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", 
               RowBox[{"YRange", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"z", ",", "0", ",", "H"}], "}"}], ",", 
             RowBox[{"Mesh", "\[Rule]", "None"}], ",", 
             RowBox[{"ContourStyle", "\[Rule]", 
              RowBox[{"RGBColor", "[", 
               RowBox[{"0.041", ",", "0.118", ",", "0.738", ",", "0.869"}], 
               "]"}]}], ",", 
             RowBox[{"Lighting", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{"\"\<Ambient\>\"", ",", " ", "Gray"}], "}"}], "}"}]}],
              ",", 
             RowBox[{"PlotRange", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"XRange", ",", "YRange", ",", 
                RowBox[{"{", 
                 RowBox[{"0", ",", "H"}], "}"}]}], "}"}]}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"Left", " ", "Plane"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"contLeft", "=", 
           RowBox[{"ContourPlot3D", "[", " ", 
            RowBox[{
             RowBox[{"y", "\[Equal]", 
              RowBox[{"XRange", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", 
               RowBox[{"XRange", "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", 
               RowBox[{"XRange", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"y", ",", 
               RowBox[{"YRange", "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", 
               RowBox[{"YRange", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"z", ",", "0", ",", "H"}], "}"}], ",", 
             RowBox[{"Mesh", "\[Rule]", "None"}], ",", 
             RowBox[{"ContourStyle", "\[Rule]", 
              RowBox[{"RGBColor", "[", 
               RowBox[{"0.041", ",", "0.118", ",", "0.738", ",", "0.869"}], 
               "]"}]}], ",", 
             RowBox[{"Lighting", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{"\"\<Ambient\>\"", ",", " ", "Gray"}], "}"}], "}"}]}],
              ",", 
             RowBox[{"PlotRange", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"XRange", ",", "YRange", ",", 
                RowBox[{"{", 
                 RowBox[{"0", ",", "H"}], "}"}]}], "}"}]}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"Back", " ", "Plane"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"contBack", "=", 
           RowBox[{"ContourPlot3D", "[", 
            RowBox[{
             RowBox[{"x", "\[Equal]", 
              RowBox[{"YRange", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", 
               RowBox[{"XRange", "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", 
               RowBox[{"XRange", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"y", ",", 
               RowBox[{"YRange", "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", 
               RowBox[{"YRange", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"z", ",", "0", ",", "H"}], "}"}], ",", 
             RowBox[{"Mesh", "\[Rule]", "None"}], ",", 
             RowBox[{"ContourStyle", "\[Rule]", 
              RowBox[{"RGBColor", "[", 
               RowBox[{"0.041", ",", "0.118", ",", "0.738", ",", "0.869"}], 
               "]"}]}], ",", 
             RowBox[{"Lighting", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{"\"\<Ambient\>\"", ",", " ", "Gray"}], "}"}], "}"}]}],
              ",", 
             RowBox[{"PlotRange", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"XRange", ",", "YRange", ",", 
                RowBox[{"{", 
                 RowBox[{"0", ",", "H"}], "}"}]}], "}"}]}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"Front", " ", "Plane"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"contFront", "=", 
           RowBox[{"ContourPlot3D", "[", 
            RowBox[{
             RowBox[{"x", "\[Equal]", 
              RowBox[{"YRange", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", 
               RowBox[{"XRange", "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", 
               RowBox[{"XRange", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"y", ",", 
               RowBox[{"YRange", "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", 
               RowBox[{"YRange", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"z", ",", "0", ",", "H"}], "}"}], ",", 
             RowBox[{"Mesh", "\[Rule]", "None"}], ",", 
             RowBox[{"ContourStyle", "\[Rule]", 
              RowBox[{"RGBColor", "[", 
               RowBox[{"0.041", ",", "0.118", ",", "0.738", ",", "0.9"}], 
               "]"}]}], ",", 
             RowBox[{"Lighting", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{"\"\<Ambient\>\"", ",", " ", "Gray"}], "}"}], "}"}]}],
              ",", 
             RowBox[{"PlotRange", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"XRange", ",", "YRange", ",", 
                RowBox[{"{", 
                 RowBox[{"0", ",", "H"}], "}"}]}], "}"}]}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"Botton", " ", "Plane"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"contBott", "=", 
           RowBox[{"Plot3D", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"x", "=", "0"}], ",", 
               RowBox[{"y", "=", "0"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", 
               RowBox[{"XRange", "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", 
               RowBox[{"XRange", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"y", ",", 
               RowBox[{"YRange", "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", 
               RowBox[{"YRange", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
             RowBox[{"PlotStyle", "\[Rule]", 
              RowBox[{"Opacity", "[", 
               RowBox[{".6", ",", 
                RowBox[{"Blend", "[", 
                 RowBox[{"{", 
                  RowBox[{"Brown", ",", "Green"}], "}"}], "]"}]}], "]"}]}], 
             ",", 
             RowBox[{"Lighting", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{"\"\<Ambient\>\"", ",", " ", "Brown"}], "}"}], 
               "}"}]}], ",", 
             RowBox[{"PlotRange", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"XRange", ",", "YRange", ",", 
                RowBox[{"{", 
                 RowBox[{"0", ",", "H"}], "}"}]}], "}"}]}], ",", 
             RowBox[{"Mesh", "\[Rule]", "None"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Top", " ", "Plane", " ", "for", " ", "view", " ", "from", " ", 
            "top"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"contTop", "=", 
           RowBox[{"Plot3D", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"x", "=", "H"}], ",", 
               RowBox[{"y", "=", "H"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", 
               RowBox[{"XRange", "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", 
               RowBox[{"XRange", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"y", ",", 
               RowBox[{"YRange", "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", 
               RowBox[{"YRange", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
             RowBox[{"PlotStyle", "\[Rule]", 
              RowBox[{"RGBColor", "[", 
               RowBox[{"0.041", ",", "0.118", ",", "0.738", ",", "0.4"}], 
               "]"}]}], ",", 
             RowBox[{"Lighting", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{"\"\<Ambient\>\"", ",", " ", "Brown"}], "}"}], 
               "}"}]}], ",", 
             RowBox[{"PlotRange", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"XRange", ",", "YRange", ",", 
                RowBox[{"{", 
                 RowBox[{"0", ",", "H"}], "}"}]}], "}"}]}], ",", 
             RowBox[{"Mesh", "\[Rule]", "None"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Top", " ", "Plane", " ", "for", " ", "view", " ", "from", " ", 
            "below"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"contTop2", "=", 
           RowBox[{"Plot3D", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"x", "=", "H"}], ",", 
               RowBox[{"y", "=", "H"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", 
               RowBox[{"XRange", "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", 
               RowBox[{"XRange", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"y", ",", 
               RowBox[{"YRange", "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", 
               RowBox[{"YRange", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
             RowBox[{"PlotStyle", "\[Rule]", 
              RowBox[{"RGBColor", "[", 
               RowBox[{"0.041", ",", "0.118", ",", "0.738", ",", "0.8"}], 
               "]"}]}], ",", 
             RowBox[{"PlotRange", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"XRange", ",", "YRange", ",", 
                RowBox[{"{", 
                 RowBox[{"0", ",", "H"}], "}"}]}], "}"}]}], ",", 
             RowBox[{"Mesh", "\[Rule]", "None"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"Creating", " ", "art", " ", "lists"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"contoursDiag", "=", 
           RowBox[{"Show", "[", 
            RowBox[{
            "contBack", ",", "contRight", ",", "contBott", ",", "contTop"}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"contoursFront", "=", 
           RowBox[{"Show", "[", 
            RowBox[{
            "contBack", ",", "contRight", ",", "contFront", ",", "contBott", 
             ",", "contTop2"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"contoursLeft", "=", 
           RowBox[{"Show", "[", 
            RowBox[{
            "contBack", ",", "contLeft", ",", "contRight", ",", "contBott", 
             ",", "contTop2"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"contoursFromTop", "=", 
           RowBox[{"RegionPlot", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"x", ">", 
               RowBox[{"2", "*", 
                RowBox[{"XRange", "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}]}], "||", 
              RowBox[{"y", ">", 
               RowBox[{"2", "*", 
                RowBox[{"YRange", "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}]}]}], ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", 
               RowBox[{"2.", "*", 
                RowBox[{"XRange", "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}], ",", 
               RowBox[{"2", "*", 
                RowBox[{"XRange", "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"y", ",", 
               RowBox[{"2", "*", 
                RowBox[{"YRange", "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}], ",", 
               RowBox[{"2", "*", 
                RowBox[{"YRange", "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
             RowBox[{"PlotStyle", "\[Rule]", 
              RowBox[{"RGBColor", "[", 
               RowBox[{"0.433", ",", "0.58", ",", "0.191", ",", "0.41100"}], 
               "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"===", "===", "==="}], "=", 
            RowBox[{
            "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
              "===", "===", 
             RowBox[{"\[Equal]", 
              RowBox[{
              "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"Creating", " ", "the", " ", "Stars"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"star1", "=", 
           RowBox[{"RandomReal", "[", 
            RowBox[{"XRange", ",", 
             RowBox[{"{", 
              RowBox[{"30", ",", "2"}], "}"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"star2", "=", 
           RowBox[{"RandomReal", "[", 
            RowBox[{"XRange", ",", 
             RowBox[{"{", 
              RowBox[{"50", ",", "2"}], "}"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"star3", "=", 
           RowBox[{"RandomReal", "[", 
            RowBox[{"XRange", ",", 
             RowBox[{"{", 
              RowBox[{"30", ",", "2"}], "}"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"star4", "=", 
           RowBox[{"RandomReal", "[", 
            RowBox[{"YRange", ",", 
             RowBox[{"{", 
              RowBox[{"50", ",", "2"}], "}"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"topStars", "=", 
           RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"backStars", "=", 
           RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"leftStars", "=", 
           RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"rightStars", "=", 
           RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"Top", " ", "\[Rule]", " ", "star1"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"For", "[", 
           RowBox[{
            RowBox[{"i", "=", "1"}], ",", 
            RowBox[{"i", "\[LessEqual]", 
             RowBox[{"Length", "[", "star1", "]"}]}], ",", 
            RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
            RowBox[{"AppendTo", "[", 
             RowBox[{"topStars", ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"star1", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", 
                 RowBox[{"[", "1", "]"}], "]"}], ",", 
                RowBox[{
                 RowBox[{"star1", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", 
                 RowBox[{"[", "2", "]"}], "]"}], ",", "H"}], "}"}]}], "]"}]}],
            "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"starsTop", "=", 
           RowBox[{"ListPointPlot3D", "[", 
            RowBox[{"topStars", ",", 
             RowBox[{"PlotRange", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Round", "[", 
                    RowBox[{"XRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "-", "1"}], ",", 
                  RowBox[{
                   RowBox[{"Round", "[", 
                    RowBox[{"XRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], "+", "1"}]}], 
                 "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Round", "[", 
                    RowBox[{"YRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "+", "1"}], ",", 
                  RowBox[{
                   RowBox[{"Round", "[", 
                    RowBox[{"YRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], "-", "1"}]}], 
                 "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"0", ",", "H"}], "}"}]}], "}"}]}], ",", 
             RowBox[{"PlotStyle", "\[Rule]", 
              RowBox[{"Lighter", "[", 
               RowBox[{"Gray", ",", ".5"}], "]"}]}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"Right", " ", "\[Rule]", " ", "star2"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"For", "[", 
           RowBox[{
            RowBox[{"i", "=", "1"}], ",", 
            RowBox[{"i", "\[LessEqual]", 
             RowBox[{"Length", "[", "star2", "]"}]}], ",", 
            RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
            RowBox[{"AppendTo", "[", 
             RowBox[{"rightStars", ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"star2", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", 
                 RowBox[{"[", "1", "]"}], "]"}], ",", 
                RowBox[{"YRange", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], ",", 
                RowBox[{
                 RowBox[{"star2", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "]"}]}], "]"}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"starsRight", "=", 
           RowBox[{"ListPointPlot3D", "[", 
            RowBox[{"rightStars", ",", 
             RowBox[{"PlotRange", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Round", "[", 
                    RowBox[{"XRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "-", "1"}], ",", 
                  RowBox[{
                   RowBox[{"Round", "[", 
                    RowBox[{"XRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], "+", "1"}]}], 
                 "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Round", "[", 
                    RowBox[{"YRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "+", "1"}], ",", 
                  RowBox[{
                   RowBox[{"Round", "[", 
                    RowBox[{"YRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], "+", "50"}]}], 
                 "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"0", ",", "H"}], "}"}]}], "}"}]}], ",", 
             RowBox[{"PlotStyle", "\[Rule]", 
              RowBox[{"Glow", "[", "White", "]"}]}], ",", 
             RowBox[{"Lighting", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{"\"\<Point\>\"", ",", "White", ",", 
                 RowBox[{"{", 
                  RowBox[{"0", ",", 
                   RowBox[{"H", "/", "2"}], ",", 
                   RowBox[{"H", "/", "2."}]}], "}"}]}], "}"}], "}"}]}]}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"Left", "  ", "\[Rule]", " ", "star3"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"For", "[", 
           RowBox[{
            RowBox[{"i", "=", "1"}], ",", 
            RowBox[{"i", "\[LessEqual]", 
             RowBox[{"Length", "[", "star3", "]"}]}], ",", 
            RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
            RowBox[{"AppendTo", "[", 
             RowBox[{"leftStars", ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"star3", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", 
                 RowBox[{"[", "1", "]"}], "]"}], ",", 
                RowBox[{"YRange", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], ",", 
                RowBox[{
                 RowBox[{"star3", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "]"}]}], "]"}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"starsLeft", "=", 
           RowBox[{"ListPointPlot3D", "[", 
            RowBox[{"leftStars", ",", 
             RowBox[{"PlotRange", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Round", "[", 
                    RowBox[{"XRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "-", "1"}], ",", 
                  RowBox[{
                   RowBox[{"Round", "[", 
                    RowBox[{"XRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], "+", "1"}]}], 
                 "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Round", "[", 
                    RowBox[{"YRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "-", "1"}], ",", 
                  RowBox[{
                   RowBox[{"Round", "[", 
                    RowBox[{"YRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], "+", "1"}]}], 
                 "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"0", ",", "H"}], "}"}]}], "}"}]}], ",", 
             RowBox[{"PlotStyle", "\[Rule]", 
              RowBox[{"Lighter", "[", 
               RowBox[{"Gray", ",", ".5"}], "]"}]}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"Back", " ", "\[Rule]", " ", "star4"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"For", "[", 
           RowBox[{
            RowBox[{"i", "=", "1"}], ",", 
            RowBox[{"i", "\[LessEqual]", 
             RowBox[{"Length", "[", "star4", "]"}]}], ",", 
            RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
            RowBox[{"AppendTo", "[", 
             RowBox[{"backStars", ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"YRange", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], ",", 
                RowBox[{
                 RowBox[{"star4", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", 
                 RowBox[{"[", "1", "]"}], "]"}], ",", 
                RowBox[{
                 RowBox[{"star4", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "]"}]}], "]"}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"starsBack", "=", 
           RowBox[{"ListPointPlot3D", "[", 
            RowBox[{"backStars", ",", 
             RowBox[{"PlotRange", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Round", "[", 
                    RowBox[{"XRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "-", "1"}], ",", 
                  RowBox[{
                   RowBox[{"Round", "[", 
                    RowBox[{"XRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], "+", "1"}]}], 
                 "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Round", "[", 
                    RowBox[{"YRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "-", "1"}], ",", 
                  RowBox[{
                   RowBox[{"Round", "[", 
                    RowBox[{"YRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], "+", "1"}]}], 
                 "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"H", "/", "3"}], ",", "H"}], "}"}]}], "}"}]}], ",", 
             RowBox[{"PlotStyle", "\[Rule]", 
              RowBox[{"Glow", "[", "White", "]"}]}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"===", "===", "==="}], "=", 
            RowBox[{
            "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
              "===", "===", 
             RowBox[{"\[Equal]", 
              RowBox[{
              "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{"(*", " ", "\[IndentingNewLine]", 
           RowBox[{"===", "===", " ", "Main", " ", "===", "==="}], 
           "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"main", "=", 
           RowBox[{"Framed", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Grid", "[", 
              RowBox[{
               RowBox[{"{", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{"(*", " ", 
                   RowBox[{"Diag", " ", "Plot"}], " ", "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Show", "[", 
                    RowBox[{
                    "PlotAll", ",", "PreContour", ",", "starsTop", ",", 
                    "starsBack", ",", "starsRight", ",", "contoursDiag", ",", 
                    RowBox[{"Lighting", "\[Rule]", "None"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"XRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "-", 
                    RowBox[{"0.03", "*", 
                    RowBox[{"XRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}]}], ",", 
                    RowBox[{
                    RowBox[{"XRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "-", 
                    RowBox[{"0.03", "*", 
                    RowBox[{"XRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"YRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "-", 
                    RowBox[{"0.03", "*", 
                    RowBox[{"YRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}]}], ",", 
                    RowBox[{
                    RowBox[{"YRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "-", 
                    RowBox[{"0.03", "*", 
                    RowBox[{"YRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "H"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"BoxRatios", "\[Rule]", "ShowButton"}]}], "]"}], 
                   ",", "\[IndentingNewLine]", 
                   RowBox[{"(*", " ", 
                    RowBox[{"Left", " ", "View", " ", "Plot"}], " ", "*)"}], 
                   "\[IndentingNewLine]", 
                   RowBox[{"Show", "[", 
                    RowBox[{
                    "PlotAll", ",", "starsTop", ",", "starsBack", ",", 
                    "starsRight", ",", "PreContour", ",", "contoursFront", 
                    ",", 
                    RowBox[{"Lighting", "\[Rule]", "None"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"XRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "-", 
                    RowBox[{"0.03", "*", 
                    RowBox[{"XRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}]}], ",", 
                    RowBox[{
                    RowBox[{"XRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "-", 
                    RowBox[{"0.03", "*", 
                    RowBox[{"XRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"YRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "-", 
                    RowBox[{"0.03", "*", 
                    RowBox[{"YRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}]}], ",", 
                    RowBox[{
                    RowBox[{"YRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "-", 
                    RowBox[{"0.03", "*", 
                    RowBox[{"YRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "H"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"BoxRatios", "\[Rule]", "ShowButton"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "185"}], ",", 
                    RowBox[{"ViewPoint", "\[Rule]", "Front"}]}], "]"}]}], 
                  "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{"(*", " ", 
                   RowBox[{"Front", " ", "View", " ", "Plot"}], " ", "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Show", "[", 
                    RowBox[{
                    "PlotAll", ",", "starsTop", ",", "starsBack", ",", 
                    "starsRight", ",", "starsLeft", ",", "PreContour", ",", 
                    "contoursLeft", ",", 
                    RowBox[{"Lighting", "\[Rule]", "None"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"XRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "-", 
                    RowBox[{"0.03", "*", 
                    RowBox[{"XRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}]}], ",", 
                    RowBox[{
                    RowBox[{"XRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "-", 
                    RowBox[{"0", "\[IndentingNewLine]", ".03", "*", 
                    RowBox[{"XRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"YRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "-", 
                    RowBox[{"0.03", "*", 
                    RowBox[{"YRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}]}], ",", 
                    RowBox[{
                    RowBox[{"YRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "-", 
                    RowBox[{"0.03", "*", 
                    RowBox[{"YRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "H"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"BoxRatios", "\[Rule]", "ShowButton"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "185"}], ",", 
                    RowBox[{"ViewPoint", "\[Rule]", "Right"}]}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"(*", " ", 
                    RowBox[{"Top", " ", "View"}], " ", "*)"}], 
                   "\[IndentingNewLine]", 
                   RowBox[{"Show", "[", 
                    RowBox[{"FinalPosPlot", ",", "contoursFromTop", ",", 
                    RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                    RowBox[{"FrameStyle", "\[Rule]", "10"}], ",", 
                    RowBox[{"PlotRange", "->", 
                    RowBox[{"{", 
                    RowBox[{"XRange2", ",", "YRange2"}], "}"}]}], ",", 
                    RowBox[{"AspectRatio", "\[Rule]", "aspect2"}]}], "]"}]}], 
                  "}"}]}], "\[IndentingNewLine]", "}"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"Alignment", "\[Rule]", "Center"}], ",", 
               RowBox[{"Spacings", "\[Rule]", 
                RowBox[{"{", 
                 RowBox[{"2.5", ",", ".5"}], "}"}]}]}], "]"}], ",", 
             RowBox[{"ImageSize", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"484", ",", "460"}], "}"}]}], ",", 
             RowBox[{"ImageMargins", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"0", ",", "0"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"0", ",", "12"}], "}"}]}], "}"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Background", "\[Rule]", "White"}], ",", 
             RowBox[{"FrameStyle", "\[Rule]", "Black"}], ",", 
             RowBox[{"Alignment", "\[Rule]", "Center"}]}], "]"}]}]}]}], 
        "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
           "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
           "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
           "===", "===", "===", "===", "===", "===", "===", "===", 
          RowBox[{"\[Equal]", 
           RowBox[{
           "===", "===", "===", "===", "===", "===", "===", "==="}]}]}], 
         "="}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"The", " ", "Normal"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"PlotArt", "\[Equal]", "None"}], ",", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"===", "===", "==="}], "=", 
           RowBox[{
           "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
             "===", "===", 
            RowBox[{"\[Equal]", 
             RowBox[{
             "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", "\[IndentingNewLine]", 
          RowBox[{"===", "===", " ", "Main", " ", "===", "==="}], 
          "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"main", "=", 
          RowBox[{"Framed", "[", 
           RowBox[{
            RowBox[{"Grid", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"Show", "[", 
                   RowBox[{"PlotAll", ",", 
                    RowBox[{"PlotRange", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"XRange", ",", "YRange", ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "H"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"BoxRatios", "\[Rule]", "ShowButton"}]}], "]"}], 
                  ",", 
                  RowBox[{"Show", "[", 
                   RowBox[{"PlotAll", ",", 
                    RowBox[{"PlotRange", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"XRange", ",", "YRange", ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "H"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"BoxRatios", "\[Rule]", "ShowButton"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "185"}], ",", 
                    RowBox[{"ViewPoint", "\[Rule]", "Front"}]}], "]"}]}], 
                 "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"Show", "[", 
                   RowBox[{"PlotAll", ",", 
                    RowBox[{"PlotRange", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"XRange", ",", "YRange", ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "H"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"BoxRatios", "\[Rule]", "ShowButton"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "185"}], ",", 
                    RowBox[{"ViewPoint", "\[Rule]", "Right"}]}], "]"}], ",", 
                  RowBox[{"Show", "[", 
                   RowBox[{"FinalPosPlot", ",", 
                    RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                    RowBox[{"FrameStyle", "\[Rule]", "10"}], ",", 
                    RowBox[{"PlotRange", "->", 
                    RowBox[{"{", 
                    RowBox[{"XRange2", ",", "YRange2"}], "}"}]}], ",", 
                    RowBox[{"AspectRatio", "\[Rule]", "aspect2"}]}], "]"}]}], 
                 "}"}]}], "}"}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Center"}], ",", 
              RowBox[{"Spacings", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{"2.5", ",", ".5"}], "}"}]}]}], "]"}], ",", 
            RowBox[{"ImageSize", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"484", ",", "460"}], "}"}]}], ",", 
            RowBox[{"ImageMargins", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "12"}], "}"}]}], "}"}]}], ",", 
            RowBox[{"Background", "\[Rule]", "White"}], ",", 
            RowBox[{"FrameStyle", "\[Rule]", "Black"}], ",", 
            RowBox[{"Alignment", "\[Rule]", "Center"}]}], "]"}]}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "==="}]}]}], "="}],
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Performing", " ", "Entire", " ", "Plot", " ", "on", " ", "Right", 
         " ", "Side", " ", "of", " ", "Manipulate"}], " ", "*)"}], 
       "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
          "===", "===", "===", "===", "===", "===", "===", "===", 
         RowBox[{"\[Equal]", 
          RowBox[{
          "===", "===", "===", "===", "===", "===", "===", "==="}]}]}], "="}],
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{"Framed", "[", 
       RowBox[{
        RowBox[{"Column", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Row", "[", 
             RowBox[{"{", 
              RowBox[{
              "\"\<   \>\"", ",", "main", ",", "\"\< \>\"", ",", "MyCol"}], 
              "}"}], "]"}], ",", "\"\<\>\"", ",", "MyRow"}], "}"}], ",", 
          RowBox[{"Spacings", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}]}], ",", 
          RowBox[{"Background", "\[Rule]", 
           RowBox[{"Dynamic", "[", 
            RowBox[{"Lighter", "[", 
             RowBox[{"MyColor", ",", " ", ".96"}], "]"}], "]"}]}]}], "]"}], 
        ",", 
        RowBox[{"FrameStyle", "\[Rule]", 
         RowBox[{"Dynamic", "[", 
          RowBox[{"Lighter", "[", 
           RowBox[{"MyColor", ",", " ", ".69"}], "]"}], "]"}]}], ",", 
        RowBox[{"RoundingRadius", "\[Rule]", "5"}], ",", 
        RowBox[{"Background", "\[Rule]", 
         RowBox[{"Dynamic", "[", 
          RowBox[{"Lighter", "[", 
           RowBox[{"MyColor", ",", " ", "0.69"}], "]"}], "]"}]}], ",", 
        RowBox[{"FrameMargins", "\[Rule]", "2"}], ",", 
        RowBox[{"ImageMargins", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "5"}]}], "}"}]}], "}"}]}]}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"===", "===", "==="}], "=", 
       RowBox[{
       "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
         "===", 
        RowBox[{"\[Equal]", 
         RowBox[{
         "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", " ", "\[IndentingNewLine]", "   ", 
      RowBox[{
       RowBox[{
       "This", " ", "is", " ", "the", " ", "end", " ", "of", " ", "the", " ", 
        "work", " ", "on", " ", "output", " ", 
        RowBox[{"definition", ".", " ", "\[IndentingNewLine]", " ", "From"}], 
        " ", "now", " ", "on", " ", 
        RowBox[{"there", "'"}], "s", " ", "only", " ", "control", " ", 
        "configuration", " ", 
        RowBox[{"(", 
         RowBox[{"position", ",", " ", "name", ",", " ", "type"}], ")"}], " ",
         "for", " ", "Manipulate", " ", 
        RowBox[{"function", ".", " ", "\[IndentingNewLine]", " ", "Here"}], 
        " ", "they", " ", 
        RowBox[{"are", ":", " ", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "Manipulate", " ", "Variables", " ", "in", " ", "this", " ", 
           "problem"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"nfrags", " ", "=", " ", 
           RowBox[{"N\[UAcute]mero", " ", "de", " ", "fragmentos"}]}], " ", 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"M", " ", "=", " ", 
           RowBox[{
           "Massa", " ", "do", " ", "corpo", " ", "em", " ", "kilos"}]}], " ",
           "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Dc", " ", "=", " ", 
           RowBox[{
           "0.5", " ", "\[EAcute]", " ", "Coeficiente", " ", "de", " ", 
            "resist\[EHat]ncia", " ", "da", " ", "esfera"}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Lv", " ", "=", " ", 
           RowBox[{
           "Calor", " ", "Latente", " ", "de", " ", 
            "vaporiza\[CCedilla]\[ATilde]o", " ", "do", " ", "corpo", " ", 
            "em", " ", 
            RowBox[{"J", "/", "kg"}]}]}], " ", "*)"}], " ", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"rho", " ", "=", " ", 
           RowBox[{"Densidade", " ", "do", " ", "corpo", " ", "em", " ", 
            RowBox[{"kg", "/", 
             RowBox[{"m", "^", "3"}]}]}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"cp", " ", "=", " ", 
            RowBox[{
             RowBox[{
             "Meteoroid", " ", "heat", " ", "capacity", " ", "in", " ", 
              RowBox[{"J", "/", 
               RowBox[{"(", 
                RowBox[{"kg", " ", "K"}], ")"}]}]}], " ", "=", " ", 
             RowBox[{"480", "-", 
              RowBox[{"930", " ", "for", " ", "chondrites"}]}]}]}], ",", " ", 
           RowBox[{"770", "-", 
            RowBox[{"530", " ", "for", " ", "stony"}], "-", "iron"}]}], " ", 
          "*)"}], " ", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"H", " ", "=", " ", 
           RowBox[{
           "Altura", " ", "de", " ", "primeiro", " ", "avistamento", " ", 
            "do", " ", "corpo", " ", "em", " ", "m"}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"VE", " ", "=", " ", 
           RowBox[{"Velocidade", " ", "de", " ", "entrada", "  ", "em", " ", 
            RowBox[{"m", "/", "s"}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"\[Phi]E", " ", "=", " ", 
           RowBox[{
           "\[CapitalAHat]ngulo", " ", "vertical", " ", "de", " ", 
            "entrada"}]}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"HFrag", " ", "=", " ", 
           RowBox[{
           "Altura", " ", "de", " ", "fragmenta\[CCedilla]\[ATilde]o", " ", 
            "do", " ", "corpo", " ", "em", " ", "m"}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Efr", " ", "=", " ", 
           RowBox[{
           "Energia", " ", "de", " ", "fragmenta\[CCedilla]\[ATilde]o", " ", 
            "em", " ", "J"}]}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"mass", " ", "=", " ", 
           RowBox[{
           "Mass", " ", "distribution", " ", "among", " ", "fragments"}]}], 
          " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"nfrags", " ", "=", " ", 
           RowBox[{"numero", " ", "de", " ", "fragmentos"}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "Checkbox", " ", "for", " ", "fragments", " ", "azimutal", " ", 
           "angle", " ", "distribution"}], " ", "*)"}], "\[IndentingNewLine]",
          "   ", 
         RowBox[{"After", " ", "parameters", " ", "controls"}]}]}], ",", " ", 
       RowBox[{
        RowBox[{"there", " ", "is"}], " ", "\[IndentingNewLine]", 
        RowBox[{"(*", "  ", 
         RowBox[{"On", " ", "Second", " ", "Column"}], "      ", "*)"}], 
        " \t", "\[IndentingNewLine]", "\t", ">", 
        RowBox[{
         RowBox[{"Simmulation", " ", "Evolution"}], "\[IndentingNewLine]", 
         "\t", "-", "Heigh", "\[IndentingNewLine]", "\t", "-", "Mass"}], 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"On", " ", "Third", " ", "Column"}], "        ", "*)"}], 
        "\[IndentingNewLine]", "\t", ">", 
        RowBox[{
         RowBox[{"Definitions", " ", "for", " ", "Model"}], 
         "\[IndentingNewLine]", "\t", "-", 
         RowBox[{"Time", " ", "Step"}], "\[IndentingNewLine]", "\t", "-", 
         RowBox[{"Mass", " ", "Limit"}]}], "\[IndentingNewLine]", "\t", ">", 
        RowBox[{
         RowBox[{"Plot", " ", "options"}], "\[IndentingNewLine]", "    ", "-", 
         RowBox[{"Top", " ", "view", " ", "graph"}], "\[IndentingNewLine]", 
         "\t", "-", 
         RowBox[{"3", "D", " ", "graphs"}]}], "\[IndentingNewLine]", "    ", 
        ">", 
        RowBox[{
         RowBox[{"Export", " ", "options"}], "\[IndentingNewLine]", "\t", "-", 
         RowBox[{"Table", " ", "of", " ", "values"}], "\[IndentingNewLine]", 
         "\t", "-", 
         RowBox[{"Evolution", " ", "Plots"}], "\[IndentingNewLine]", "\t", 
         "-", 
         RowBox[{"Fragmentation", " ", "Plots"}]}]}]}], "\[IndentingNewLine]",
       "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
       "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
         "===", "===", "===", "===", "===", "===", "===", 
        RowBox[{"\[Equal]", 
         RowBox[{"===", "===", "===", "===", "===", "===", "===", "==="}]}]}],
        "="}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"Setting", " ", "Manipulate", " ", "labels"}], ",", " ", 
        RowBox[{"style", " ", "and", " ", "position"}]}], " ", "*)"}], 
      "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
       "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
         "===", "===", "===", "===", "===", "===", "===", 
        RowBox[{"\[Equal]", 
         RowBox[{"===", "===", "===", "===", "===", "===", "===", "==="}]}]}],
        "="}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"===", "===", "==="}], "=", 
       RowBox[{
       "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
         "===", 
        RowBox[{"\[Equal]", 
         RowBox[{
         "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "Column", " ", "and", " ", "Frame", " ", "for", " ", "Left", " ", 
       "part", " ", "of", " ", "Manipulate"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"===", "===", "==="}], "=", 
       RowBox[{
       "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
         "===", 
        RowBox[{"\[Equal]", 
         RowBox[{
         "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"Simulation", " ", "Paramenters", " ", "Declaration"}], " ", 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Framed", "[", 
      RowBox[{
       RowBox[{"Column", "[", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"===", "===", "==="}], "=", 
           RowBox[{
           "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
             "===", "===", 
            RowBox[{"\[Equal]", 
             RowBox[{
             "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Top", " ", "Frame"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Framed", "[", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{
             RowBox[{"===", "===", "==="}], "=", 
             RowBox[{
             "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
               "===", "===", 
              RowBox[{"\[Equal]", 
               RowBox[{
               "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
            "*)"}], "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{"Top", " ", "Grid"}], " ", "*)"}], "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Grid", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"{", "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"===", "===", "==="}], "=", 
                  RowBox[{
                  "===", "===", "===", "===", "===", "===", "===", "===", "===",
                    "===", "===", "===", 
                   RowBox[{"\[Equal]", 
                    RowBox[{
                    "===", "===", "===", "===", "===", "===", "===", 
                    "=="}]}]}]}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", " ", 
                 RowBox[{"First", " ", "Column"}], " ", "*)"}], 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Column", "[", 
                  RowBox[{
                   RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{"===", "===", "==="}], "=", 
                    RowBox[{
                    "===", "===", "===", "===", "===", "===", "===", "===", "===",
                     "===", "===", "===", 
                    RowBox[{"\[Equal]", 
                    RowBox[{
                    "===", "===", "===", "===", "===", "===", "===", 
                    "=="}]}]}]}], "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{"Object", " ", "Parameters"}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\< Object Parameters\>\"", ",", "12", ",", "Bold"}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{"M", " ", "=", " ", 
                    RowBox[{
                    "Massa", " ", "do", " ", "corpo", " ", "em", " ", 
                    "kilos"}]}], " ", "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Style", "[", "\"\< Object Mass\>\"", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Labeled", "[", 
                    RowBox[{
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "M", "]"}], ",", "Number", ",", 
                    RowBox[{"FieldHint", "\[Rule]", "\"\<10-15000000\>\""}], 
                    ",", 
                    RowBox[{"FieldSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"7.5", ",", "1.05"}], "}"}]}], ",", 
                    RowBox[{"ImageMargins", "\[Rule]", "0"}]}], "]"}], ",", 
                    "\"\<kg\>\"", ",", "Right"}], "]"}]}], "}"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{"Dc", " ", "=", " ", 
                    RowBox[{
                    "0.5", " ", "\[EAcute]", " ", "Coeficiente", " ", "de", 
                    " ", "resist\[EHat]ncia", " ", "da", " ", "esfera"}]}], 
                    " ", "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Style", "[", "\"\< Air Resit. Coeff.\>\"", "]"}],
                     ",", "\[IndentingNewLine]", 
                    RowBox[{"Labeled", "[", 
                    RowBox[{
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "Dc", "]"}], ",", "Number", ",", 
                    RowBox[{"FieldHint", "\[Rule]", "\"\<0-3\>\""}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"7.5", ",", "1.05"}], "}"}]}]}], "]"}], ",", 
                    "\"\<Smth\>\"", ",", "Right"}], "]"}]}], "}"}], "]"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{"Lv", " ", "=", " ", 
                    RowBox[{
                    "Calor", " ", "Latente", " ", "de", " ", 
                    "vaporiza\[CCedilla]\[ATilde]o", " ", "do", " ", "corpo", 
                    " ", "em", " ", 
                    RowBox[{"J", "/", "kg"}]}]}], " ", "*)"}], " ", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Style", "[", "\"\< Vaporization Heat\>\"", "]"}],
                     ",", "\[IndentingNewLine]", 
                    RowBox[{"Labeled", "[", 
                    RowBox[{
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "Lv", "]"}], ",", "Number", ",", 
                    RowBox[{"FieldHint", "\[Rule]", "\"\<1000-50000\>\""}], 
                    ",", 
                    RowBox[{"FieldSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"7.5", ",", "1.05"}], "}"}]}]}], "]"}], ",", 
                    "\"\<J/kg\>\"", ",", "Right"}], "]"}]}], "}"}], "]"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{"rho", " ", "=", " ", 
                    RowBox[{
                    "Densidade", " ", "do", " ", "corpo", " ", "em", " ", 
                    RowBox[{"kg", "/", 
                    RowBox[{"m", "^", "3"}]}]}]}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Style", "[", "\"\< Density\>\"", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Labeled", "[", 
                    RowBox[{
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "rho", "]"}], ",", "Number", ",", 
                    RowBox[{"FieldHint", "\[Rule]", "\"\<2000-3500\>\""}], 
                    ",", 
                    RowBox[{"FieldSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"7.5", ",", "1.05"}], "}"}]}]}], "]"}], ",", 
                    "\"\<kg/\!\(\*SuperscriptBox[\(m\), \(3\)]\)\>\"", ",", 
                    "Right"}], "]"}]}], "}"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{"cp", " ", "=", " ", 
                    RowBox[{
                    "Meteoroid", " ", "heat", " ", "capacity", " ", "in", " ", 
                    RowBox[{"J", "/", 
                    RowBox[{"(", 
                    RowBox[{"kg", " ", "K"}], ")"}]}]}]}], " ", "*)"}], " ", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    "Style", "[", " ", "\"\< Heat Capacity\>\"", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Labeled", "[", 
                    RowBox[{
                    RowBox[{"DynamicModule", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"cp", "=", "500"}], "}"}], ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "cp", "]"}], ",", "Number", ",", 
                    RowBox[{"FieldHint", "\[Rule]", "\"\<400-900\>\""}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"7.5", ",", "1.05"}], "}"}]}]}], "]"}]}], "]"}], 
                    ",", "\"\<J/(kg K)\>\"", ",", "Right"}], "]"}]}], "}"}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{"===", "===", "==="}], "=", 
                    RowBox[{
                    "===", "===", "===", "===", "===", "===", "===", "===", "===",
                     "===", "===", "===", 
                    RowBox[{"\[Equal]", 
                    RowBox[{
                    "===", "===", "===", "===", "===", "===", "===", 
                    "=="}]}]}]}], "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{"Entrance", " ", "Parameters"}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\< Entrance Parameters    \>\"", ",", "12", ",", 
                    "Bold"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{"H", " ", "=", " ", 
                    RowBox[{
                    "Altura", " ", "de", " ", "primeiro", " ", "avistamento", 
                    " ", "do", " ", "corpo", " ", "em", " ", "m"}]}], " ", 
                    "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Style", "[", "\"\< Height\>\"", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Labeled", "[", 
                    RowBox[{
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "H", "]"}], ",", "Number", ",", 
                    RowBox[{"FieldHint", "\[Rule]", "\"\<0-100000\>\""}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "True"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"7.5", ",", "1.05"}], "}"}]}]}], "]"}], ",", 
                    "\"\<m\>\"", ",", "Right"}], "]"}]}], "}"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{"VE", " ", "=", " ", 
                    RowBox[{
                    "Velocidade", " ", "de", " ", "entrada", "  ", "em", " ", 
                    RowBox[{"m", "/", "s"}]}]}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Style", "[", "\"\< Entrance Velocity\>\"", "]"}],
                     ",", "\[IndentingNewLine]", 
                    RowBox[{"Labeled", "[", 
                    RowBox[{
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "VE", "]"}], ",", "Number", ",", 
                    RowBox[{"FieldHint", "\[Rule]", "\"\<10-20000\>\""}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"7.5", ",", "1.05"}], "}"}]}]}], "]"}], ",", 
                    "\"\<m/s\>\"", ",", "Right"}], "]"}]}], "}"}], "]"}], ",",
                     "\[IndentingNewLine]", 
                    RowBox[{"(*", "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{"\[Phi]E", " ", "=", " ", 
                    RowBox[{
                    "\[CapitalAHat]ngulo", " ", "vertical", " ", "de", " ", 
                    "entrada"}]}], " ", "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Style", "[", "\"\< Entrance Angle\>\"", "]"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"Labeled", "[", 
                    RowBox[{
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "\[Phi]E", "]"}], ",", "Number", 
                    ",", 
                    RowBox[{"FieldHint", "\[Rule]", "\"\<90-180\>\""}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"7.5", ",", "1.05"}], "}"}]}]}], "]"}], ",", 
                    "\"\<\[Degree]\>\"", ",", "Right"}], "]"}]}], "}"}], 
                    "]"}]}], "}"}], ",", "Left", ",", 
                    RowBox[{"Dividers", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"2", "\[Rule]", 
                    RowBox[{"Dynamic", "[", "MyColor", "]"}]}], ",", 
                    RowBox[{"1", "\[Rule]", 
                    RowBox[{"Dynamic", "[", "MyColor", "]"}]}]}], "}"}]}], 
                    "}"}]}], ",", 
                    RowBox[{"Spacings", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{".5", ",", "1"}], "}"}]}]}], "]"}]}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{"===", "===", "==="}], "=", 
                    RowBox[{
                    "===", "===", "===", "===", "===", "===", "===", "===", "===",
                     "===", "===", "===", 
                    RowBox[{"\[Equal]", 
                    RowBox[{
                    "===", "===", "===", "===", "===", "===", "===", 
                    "=="}]}]}]}], "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{"End", " ", "of", " ", "First", " ", "Column"}], 
                    " ", "*)"}], "\[IndentingNewLine]", "}"}], ",", 
                   "\[IndentingNewLine]", "Left", ",", 
                   RowBox[{"Dividers", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"2", "->", 
                    RowBox[{"Dynamic", "[", "MyColor", "]"}]}], ",", 
                    RowBox[{"1", "->", 
                    RowBox[{"Dynamic", "[", "MyColor", "]"}]}]}], "}"}]}], 
                    "}"}]}], ",", 
                   RowBox[{"Spacings", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{".5", ",", "1.0"}], "}"}]}]}], "]"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"(*", 
                  RowBox[{
                   RowBox[{"===", "===", "==="}], "=", 
                   RowBox[{
                   "===", "===", "===", "===", "===", "===", "===", "===", "===",
                     "===", "===", "===", 
                    RowBox[{"\[Equal]", 
                    RowBox[{
                    "===", "===", "===", "===", "===", "===", "===", 
                    "=="}]}]}]}], "*)"}], "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{"Second", " ", "Column"}], " ", "*)"}], 
                 "\[IndentingNewLine]", 
                 RowBox[{"Column", "[", 
                  RowBox[{
                   RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{"===", "===", "==="}], "=", 
                    RowBox[{
                    "===", "===", "===", "===", "===", "===", "===", "===", "===",
                     "===", "===", "===", 
                    RowBox[{"\[Equal]", 
                    RowBox[{
                    "===", "===", "===", "===", "===", "===", "===", 
                    "=="}]}]}]}], "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{"Fragmentation", " ", "Parameters"}], " ", "*)"}],
                     "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\< Fragmentation Parameters\>\"", ",", "12", ",", 
                    "Bold"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{"HFrag", " ", "=", " ", 
                    RowBox[{
                    "Altura", " ", "de", " ", 
                    "fragmenta\[CCedilla]\[ATilde]o", " ", "do", " ", "corpo",
                     " ", "em", " ", "m"}]}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    "Style", "[", "\"\< Fragmentation Height\>\"", "]"}], ",",
                     "\[IndentingNewLine]", 
                    RowBox[{"Labeled", "[", 
                    RowBox[{
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "HFrag", "]"}], ",", "Number", 
                    ",", 
                    RowBox[{"FieldHint", "\[Rule]", "\"\<0-100000\>\""}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"7.5", ",", "1.05"}], "}"}]}]}], "]"}], ",", 
                    "\"\<m\>\"", ",", "Right"}], "]"}]}], "}"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{"Efr", " ", "=", " ", 
                    RowBox[{
                    "Energia", " ", "de", " ", 
                    "fragmenta\[CCedilla]\[ATilde]o", " ", "em", " ", "J"}]}],
                     " ", "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    "Style", "[", "\"\< Fragmentation Energy\>\"", "]"}], ",",
                     "\[IndentingNewLine]", 
                    RowBox[{"Labeled", "[", 
                    RowBox[{
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "Efr", "]"}], ",", "Number", ",", 
                    RowBox[{"FieldHint", "\[Rule]", "\"\<0-1000000\>\""}], 
                    ",", 
                    RowBox[{"FieldSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"7.5", ",", "1.05"}], "}"}]}]}], "]"}], ",", 
                    "\"\<J\>\"", ",", "Right"}], "]"}]}], "}"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{"nfrags", " ", "=", " ", 
                    RowBox[{"numero", " ", "de", " ", "fragmentos"}]}], " ", 
                    "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    "Style", "[", "\"\<Number of Fragments\>\"", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"nfrags", ",", "1", ",", "\"\<\>\""}], "}"}], ",",
                     "1", ",", "24", ",", "1", ",", 
                    RowBox[{"ControlType", "\[Rule]", "PopupMenu"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"40", ",", "22"}], "}"}]}]}], "}"}], "]"}]}], 
                    "}"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{"mass", " ", "=", " ", 
                    RowBox[{
                    "Mass", " ", "distribution", " ", "among", " ", 
                    "fragments"}]}], " ", "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Style", "[", "\"\<Mass Distribution\>\"", "]"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"mass", ",", "unif", ",", "\"\<\>\""}], "}"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"nfrags", ">", "1"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"unif", "\[Rule]", "\"\<Uniform\>\""}], ",", 
                    RowBox[{"random", "\[Rule]", "\"\<Random\>\""}], ",", 
                    RowBox[{"cresce", "\[Rule]", "\"\<Crescente\>\""}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"nfrags", ">", "2"}], ",", 
                    RowBox[{"cresce2", "\[Rule]", "\"\<Crescente(2)\>\""}]}], 
                    "]"}], ",", 
                    RowBox[{"decresce", "\[Rule]", "\"\<Decrescente\>\""}], 
                    ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"nfrags", ">", "2"}], ",", 
                    RowBox[{
                    "decresce2", "\[Rule]", "\"\<Decrescente(2)\>\""}]}], 
                    "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"unif", "\[Rule]", "\"\<Uniform\>\""}], "}"}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"ControlType", "\[Rule]", "PopupMenu"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"98", ",", "22"}], "}"}]}]}], "}"}], "]"}]}], 
                    "}"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{
                    "Checkbox", " ", "for", " ", "fragments", " ", "azimutal",
                     " ", "angle", " ", "distribution"}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", " ", 
                    RowBox[{
                    "\"\<Fragments Direction\>\"", ",", "\"\<\>\"", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Column", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<       Uniform\>\"", ",", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "UnifAngle", ",", "True", ",", "\"\<         \>\""}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"True", ",", "False"}], "}"}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "Checkbox"}], ",", 
                    RowBox[{"Background", "\[Rule]", 
                    RowBox[{"Dynamic", "[", "MyColor", "]"}]}], ",", 
                    RowBox[{"Enabled", "->", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"RandomAngle", "\[Equal]", "True"}], ",", "False",
                     ",", "True"}], "]"}]}]}], "}"}], "]"}]}], "}"}], "]"}], 
                    ",", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<   Random\>\"", ",", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "RandomAngle", ",", "False", ",", "\"\<     \>\""}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"True", ",", "False"}], "}"}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "Checkbox"}], ",", 
                    RowBox[{"Background", "\[Rule]", 
                    RowBox[{"Dynamic", "[", "MyColor", "]"}]}], ",", 
                    RowBox[{"Enabled", "->", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"UnifAngle", "\[Equal]", "True"}], ",", "False", 
                    ",", "True"}], "]"}]}]}], "}"}], "]"}]}], "}"}], "]"}]}], 
                    "}"}], "]"}], ",", "\[IndentingNewLine]", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<        Spread on Quadrant\>\"", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Column", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Labeled", "[", 
                    RowBox[{
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Q2", ",", "False", ",", "\"\<\>\""}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"True", ",", "False"}], "}"}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "Checkbox"}], ",", 
                    RowBox[{"Background", "\[Rule]", 
                    RowBox[{"Dynamic", "[", "MyColor", "]"}]}], ",", 
                    RowBox[{"Enabled", "->", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"UnifAngle", "||", 
                    RowBox[{"RandomAngle", "\[Equal]", "True"}]}], ",", 
                    "False", ",", "True"}], "]"}]}]}], "}"}], "]"}], ",", 
                    "\"\<         \!\(\*SuperscriptBox[\(2\), \(nd\)]\)\>\"", 
                    ",", "Left", ",", 
                    RowBox[{"Spacings", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", " ", "0"}], "}"}]}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Labeled", "[", 
                    RowBox[{
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Q3", ",", "False", ",", "\"\<\>\""}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"True", ",", "False"}], "}"}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "Checkbox"}], ",", 
                    RowBox[{"Background", "\[Rule]", 
                    RowBox[{"Dynamic", "[", "MyColor", "]"}]}], ",", 
                    RowBox[{"Enabled", "->", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"UnifAngle", "||", 
                    RowBox[{"RandomAngle", "\[Equal]", "True"}]}], ",", 
                    "False", ",", "True"}], "]"}]}]}], "}"}], "]"}], ",", 
                    "\"\<         \!\(\*SuperscriptBox[\(3\), \(rd\)]\) \>\"",
                     ",", "Left", ",", 
                    RowBox[{"Spacings", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", " ", "0"}], "}"}]}]}], "]"}]}], "}"}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Labeled", "[", 
                    RowBox[{
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Q1", ",", "False", ",", "\"\<\>\""}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"True", ",", "False"}], "}"}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "Checkbox"}], ",", 
                    RowBox[{"Background", "\[Rule]", 
                    RowBox[{"Dynamic", "[", "MyColor", "]"}]}], ",", 
                    RowBox[{"Enabled", "->", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"UnifAngle", "||", 
                    RowBox[{"RandomAngle", "\[Equal]", "True"}]}], ",", 
                    "False", ",", "True"}], "]"}]}]}], "}"}], "]"}], ",", 
                    "\"\<\!\(\*SuperscriptBox[\(1\), \(\(st\)\(\\\ \
\)\)]\)\>\"", ",", "Right"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Labeled", "[", 
                    RowBox[{
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Q4", ",", "False", ",", "\"\<\>\""}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"True", ",", "False"}], "}"}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "Checkbox"}], ",", 
                    RowBox[{"Background", "\[Rule]", 
                    RowBox[{"Dynamic", "[", "MyColor", "]"}]}], ",", 
                    RowBox[{"Enabled", "->", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"UnifAngle", "||", 
                    RowBox[{"RandomAngle", "\[Equal]", "True"}]}], ",", 
                    "False", ",", "True"}], "]"}]}]}], "}"}], "]"}], ",", 
                    "\"\<\!\(\*SuperscriptBox[\(4\), \(th\)]\)\>\"", ",", 
                    "Right"}], "]"}]}], "}"}], "]"}]}], "\[IndentingNewLine]",
                     "}"}], "]"}]}], "\[IndentingNewLine]", "}"}], "]"}], 
                    ",", "\"\<\>\""}], "}"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"Alignment", "\[Rule]", "Center"}], ",", 
                    RowBox[{"Spacings", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    RowBox[{"-", ".2"}]}], "}"}]}]}], "]"}]}], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Left"}], ",", 
                    RowBox[{"Spacings", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}]}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{
                    "Grid", " ", "with", " ", "Infos", " ", "about", " ", 
                    "simulation"}], " ", "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"Labeled", "[", 
                    RowBox[{
                    RowBox[{"Framed", "[", 
                    RowBox[{
                    RowBox[{"Grid", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<#\>\"", ",", "\"\<Param.\>\"", ",", 
                    "\"\<Value\>\""}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"ToString", "[", "fragID", "]"}], "]"}], ",", 
                    "\"\<Height\>\"", " ", ",", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"Zi", "[", 
                    RowBox[{"[", 
                    RowBox[{"-", "1"}], "]"}], "]"}], "]"}]}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"ToString", "[", "fragID", "]"}], "]"}], ",", 
                    "\"\<Mass\>\"", " ", ",", 
                    RowBox[{"Dynamic", "[", "dm", "]"}]}], "}"}]}], "}"}], 
                    ",", 
                    RowBox[{"Alignment", "\[Rule]", "Left"}], ",", 
                    RowBox[{"Background", "\[Rule]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"Lighter", "[", 
                    RowBox[{"MyColor", ",", " ", ".9"}], "]"}], "]"}]}], ",", 
                    RowBox[{"ItemStyle", "->", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"FontSize", "\[Rule]", "11.5"}], ",", "Black"}], 
                    "]"}]}]}], "]"}], ",", 
                    RowBox[{"Background", "\[Rule]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"Lighter", "[", 
                    RowBox[{"MyColor", ",", " ", ".9"}], "]"}], "]"}]}], ",", 
                    RowBox[{"FrameStyle", "\[Rule]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"Lighter", "[", 
                    RowBox[{"MyColor", ",", " ", ".1"}], "]"}], "]"}]}], ",", 
                    RowBox[{"RoundingRadius", "\[Rule]", "2"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Left"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"160", ",", "Automatic"}], "}"}]}]}], "]"}], ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Simulation Evolution\>\"", ",", "12"}], 
                    "]"}], ",", "Top"}], "]"}]}], "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{"===", "===", "==="}], "=", 
                    RowBox[{
                    "===", "===", "===", "===", "===", "===", "===", "===", "===",
                     "===", "===", "===", 
                    RowBox[{"\[Equal]", 
                    RowBox[{
                    "===", "===", "===", "===", "===", "===", "===", 
                    "=="}]}]}]}], "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{"End", " ", "of", " ", "Second", " ", "Column"}], 
                    " ", "*)"}], "\[IndentingNewLine]", "}"}], ",", 
                   "\[IndentingNewLine]", "Left", ",", 
                   RowBox[{"Dividers", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"1", "->", 
                    RowBox[{"Dynamic", "[", "MyColor", "]"}]}], ",", 
                    RowBox[{"2", "->", 
                    RowBox[{"Dynamic", "[", "MyColor", "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"-", "2"}], "->", 
                    RowBox[{"Dynamic", "[", "MyColor", "]"}]}]}], "}"}]}], 
                    "}"}]}], ",", 
                   RowBox[{"Spacings", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{".5", ",", "1.0"}], "}"}]}]}], "]"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{
                  "Simulation", " ", "Paramenters", " ", "Declaration"}], " ",
                   "*)"}], "\[IndentingNewLine]", 
                 RowBox[{"(*", 
                  RowBox[{
                   RowBox[{"===", "===", "==="}], "=", 
                   RowBox[{
                   "===", "===", "===", "===", "===", "===", "===", "===", "===",
                     "===", "===", "===", 
                    RowBox[{"\[Equal]", 
                    RowBox[{
                    "===", "===", "===", "===", "===", "===", "===", 
                    "=="}]}]}]}], "*)"}], "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{"Third", " ", "Column"}], " ", "*)"}], 
                 "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{
                   RowBox[{"Setting", " ", "Time", " ", "Step"}], ",", " ", 
                   RowBox[{
                   "Mass", " ", "Limit", " ", "and", " ", "Plots", " ", 
                    "Option"}]}], " ", "*)"}], "\[IndentingNewLine]", 
                 RowBox[{"Column", "[", 
                  RowBox[{
                   RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{"(*", "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{
                    "Time", " ", "Step", " ", "and", " ", "Mass", " ", 
                    "Limit"}], " ", "*)"}], "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\< Definitions\>\"", ",", "12", ",", "Bold"}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Style", "[", "\"\< Time Step\>\"", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Labeled", "[", 
                    RowBox[{
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "TimeStep", "]"}], ",", "Number", 
                    ",", 
                    RowBox[{"FieldHint", "\[Rule]", "\"\<10-15000000\>\""}], 
                    ",", 
                    RowBox[{"FieldSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"7.5", ",", "1.05"}], "}"}]}], ",", 
                    RowBox[{"ImageMargins", "\[Rule]", "0"}]}], "]"}], ",", 
                    "\"\<s\>\"", ",", "Right"}], "]"}]}], "}"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Style", "[", "\"\< Mass Limit\>\"", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Labeled", "[", 
                    RowBox[{
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "MTolerance", "]"}], ",", 
                    "Number", ",", 
                    RowBox[{"FieldHint", "\[Rule]", "\"\<10-15000000\>\""}], 
                    ",", 
                    RowBox[{"FieldSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"7.5", ",", "1.05"}], "}"}]}], ",", 
                    RowBox[{"ImageMargins", "\[Rule]", "0"}]}], "]"}], ",", 
                    "\"\<kg\>\"", ",", "Right"}], "]"}]}], "}"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{"Plot", " ", "Options"}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\< Plot Options\>\"", ",", "12", ",", "Bold"}],
                     "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Top View\>\"", ",", "10", ",", "Bold"}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Labeled", "[", 
                    RowBox[{
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"MassDecal", ",", "DecalOFF", ",", "\"\<\>\""}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"DecalOFF", "\[Rule]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Off\>\"", ",", "10"}], "]"}]}], ",", 
                    RowBox[{"DecalON", "\[Rule]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<On\>\"", ",", "10"}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "Setter"}], ",", 
                    RowBox[{"Appearance", "->", "\"\<DialogBox\>\""}], ",", 
                    RowBox[{"ImageMargins", "\[Rule]", "0"}], ",", 
                    RowBox[{"FrameMargins", "\[Rule]", "0"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}]}], "}"}], "]"}], 
                    ",", "\"\<Mass Opacity\>\"", ",", "Right"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Labeled", "[", 
                    RowBox[{
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"MassValues", ",", "ValuesOFF", ",", "\"\<\>\""}],
                     "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"ValuesOFF", "\[Rule]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Off\>\"", ",", "10"}], "]"}]}], ",", 
                    RowBox[{"ValuesON", "\[Rule]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<On\>\"", ",", "10"}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "Setter"}], ",", 
                    RowBox[{"Appearance", "->", "\"\<DialogBox\>\""}], ",", 
                    RowBox[{"ImageMargins", "\[Rule]", "0"}], ",", 
                    RowBox[{"FrameMargins", "\[Rule]", "0"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}]}], "}"}], "]"}], 
                    ",", "\"\<Mass Values\>\"", ",", "Right"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Labeled", "[", 
                    RowBox[{
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"DisplayCM", ",", "CMOFF", ",", "\"\<\>\""}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"CMOFF", "->", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Off\>\"", ",", "10"}], "]"}]}], ",", 
                    RowBox[{"CMON", "\[Rule]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<On\>\"", ",", "10"}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "Setter"}], ",", 
                    RowBox[{"Appearance", "->", "\"\<DialogBox\>\""}], ",", 
                    RowBox[{"ImageMargins", "\[Rule]", "0"}], ",", 
                    RowBox[{"FrameMargins", "\[Rule]", "0"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}]}], "}"}], "]"}], 
                    ",", "\"\<Display CM\>\"", ",", "Right"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Labeled", "[", 
                    RowBox[{
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"JoinPoints", ",", "JOINOFF", ",", "\"\<\>\""}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"JOINOFF", "\[Rule]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Off\>\"", ",", "10"}], "]"}]}], ",", 
                    RowBox[{"JOINON", "\[Rule]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<On\>\"", ",", "10"}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "Setter"}], ",", 
                    RowBox[{"Appearance", "->", "\"\<DialogBox\>\""}], ",", 
                    RowBox[{"ImageMargins", "\[Rule]", "0"}], ",", 
                    RowBox[{"FrameMargins", "\[Rule]", "0"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}]}], "}"}], "]"}], 
                    ",", "\"\<Join Dots\>\"", ",", "Right"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Labeled", "[", 
                    RowBox[{
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"axis2", ",", "False", ",", "\"\<\>\""}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"False", "\[Rule]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Off\>\"", ",", "10"}], "]"}]}], ",", 
                    RowBox[{"True", "\[Rule]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<On\>\"", ",", "10"}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "Setter"}], ",", 
                    RowBox[{"Appearance", "->", "\"\<DialogBox\>\""}], ",", 
                    RowBox[{"ImageMargins", "\[Rule]", "0"}], ",", 
                    RowBox[{"FrameMargins", "\[Rule]", "0"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}]}], "}"}], "]"}], 
                    ",", "\"\<Display Axis\>\"", ",", "Right"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Labeled", "[", 
                    RowBox[{
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"aspect2", ",", "1", ",", "\"\<\>\""}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"1", "\[Rule]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<1x1\>\"", ",", "10"}], "]"}]}], ",", 
                    RowBox[{"Automatic", "\[Rule]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Realistic\>\"", ",", "10"}], "]"}]}]}], 
                    "}"}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "Setter"}], ",", 
                    RowBox[{"Appearance", "->", "\"\<DialogBox\>\""}], ",", 
                    RowBox[{"ImageMargins", "\[Rule]", "0"}], ",", 
                    RowBox[{"FrameMargins", "\[Rule]", "0"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}]}], "}"}], "]"}], 
                    ",", "\"\<Aspect\>\"", ",", "Right"}], "]"}]}], "}"}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<3D Plots\>\"", ",", "10", ",", "Bold"}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Labeled", "[", 
                    RowBox[{
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "OpacityButton", ",", "OpacityOff", ",", "\"\<\>\""}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"OpacityOff", "\[Rule]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Off\>\"", ",", "10"}], "]"}]}], ",", 
                    RowBox[{"OpacityOn", "\[Rule]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<On\>\"", ",", "10"}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "Setter"}], ",", 
                    RowBox[{"Appearance", "->", "\"\<DialogBox\>\""}], ",", 
                    RowBox[{"ImageMargins", "\[Rule]", "0"}], ",", 
                    RowBox[{"FrameMargins", "\[Rule]", "0"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}]}], "}"}], "]"}], 
                    ",", "\"\<Mass Evol.\>\"", ",", "Right"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Labeled", "[", 
                    RowBox[{
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"ColorType", ",", "GRAY", ",", "\"\<\>\""}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"GRAY", "\[Rule]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Off\>\"", ",", "10"}], "]"}]}], ",", 
                    RowBox[{"HUE", "\[Rule]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<On\>\"", ",", "10"}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "Setter"}], ",", 
                    RowBox[{"Appearance", "->", "\"\<DialogBox\>\""}], ",", 
                    RowBox[{"ImageMargins", "\[Rule]", "0"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}]}], "}"}], "]"}], 
                    ",", "\"\<Color Map\>\"", ",", "Right"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Labeled", "[", 
                    RowBox[{
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"ShowButton", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
                    "\"\<\>\""}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1", ",", "1"}], "}"}], "\[Rule]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<1x1x1\>\"", ",", "10"}], "]"}]}], ",", 
                    RowBox[{"Automatic", "\[Rule]", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Realistic\>\"", ",", "10"}], "]"}]}]}], 
                    "}"}], ",", 
                    RowBox[{"ControlPlacement", "\[Rule]", "Left"}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "Setter"}], ",", 
                    RowBox[{"Appearance", "->", "\"\<DialogBox\>\""}], ",", 
                    RowBox[{"ImageMargins", "\[Rule]", "0"}], ",", 
                    RowBox[{"FrameMargins", "\[Rule]", "0"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}]}], "}"}], "]"}], 
                    ",", "\"\<Aspect\>\"", ",", "Right"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], "}"}], ",", "Left",
                     ",", 
                    RowBox[{"Dividers", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"3", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Dotted", ",", 
                    RowBox[{"Dynamic", "[", "MyColor", "]"}]}], "}"}]}], ",", 
                    RowBox[{"2", "\[Rule]", 
                    RowBox[{"Dynamic", "[", "MyColor", "]"}]}], ",", 
                    RowBox[{"1", "\[Rule]", 
                    RowBox[{"Dynamic", "[", "MyColor", "]"}]}]}], "}"}]}], 
                    "}"}]}], ",", 
                    RowBox[{"Spacings", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{".5", ",", ".6"}], "}"}]}]}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", 
                   RowBox[{"(*", 
                    RowBox[{
                    RowBox[{"===", "===", "==="}], "=", 
                    RowBox[{
                    "===", "===", "===", "===", "===", "===", "===", "===", "===",
                     "===", "===", "===", 
                    RowBox[{"\[Equal]", 
                    RowBox[{
                    "===", "===", "===", "===", "===", "===", "===", 
                    "=="}]}]}]}], "*)"}], "\[IndentingNewLine]", 
                   RowBox[{"(*", " ", 
                    RowBox[{"End", " ", "of", " ", "Third", " ", "Column"}], 
                    " ", "*)"}], "\[IndentingNewLine]", ",", "Left", ",", 
                   RowBox[{"Dividers", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"2", "->", 
                    RowBox[{"Dynamic", "[", "MyColor", "]"}]}], ",", 
                    RowBox[{"1", "->", 
                    RowBox[{"Dynamic", "[", "MyColor", "]"}]}]}], "}"}]}], 
                    "}"}]}], ",", 
                   RowBox[{"Spacings", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{".5", ",", "1.0"}], "}"}]}], ",", 
                   RowBox[{"Background", "\[Rule]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"Lighter", "[", 
                    RowBox[{"MyColor", ",", " ", ".96"}], "]"}], "]"}]}]}], 
                  "]"}]}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"===", "===", "==="}], "=", 
                  RowBox[{
                  "===", "===", "===", "===", "===", "===", "===", "===", "===",
                    "===", "===", "===", 
                   RowBox[{"\[Equal]", 
                    RowBox[{
                    "===", "===", "===", "===", "===", "===", "===", 
                    "=="}]}]}]}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", " ", 
                 RowBox[{"End", " ", "of", " ", "Top", " ", "Grid"}], " ", 
                 "*)"}], "\[IndentingNewLine]", "}"}], "}"}], ",", 
              RowBox[{"Dividers", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"1", "\[Rule]", "None"}], ",", 
                   RowBox[{"2", "\[Rule]", 
                    RowBox[{"Dynamic", "[", "MyColor", "]"}]}], ",", 
                   RowBox[{"3", "\[Rule]", 
                    RowBox[{"Dynamic", "[", "MyColor", "]"}]}], ",", 
                   RowBox[{"4", "\[Rule]", "None"}]}], "}"}], ",", "None"}], 
                "}"}]}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Top"}], ",", 
              RowBox[{"Spacings", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{"1", ",", "0"}], "}"}]}], ",", 
              RowBox[{"Background", "\[Rule]", 
               RowBox[{"Dynamic", "[", 
                RowBox[{"Lighter", "[", 
                 RowBox[{"MyColor", ",", " ", ".96"}], "]"}], "]"}]}]}], 
             "]"}], "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{"===", "===", "==="}], "=", 
              RowBox[{
              "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
                "===", "===", 
               RowBox[{"\[Equal]", 
                RowBox[{
                "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}],
              "*)"}], "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{"End", " ", "of", " ", "Top", " ", "Frame"}], " ", 
             "*)"}], "\[IndentingNewLine]", ",", 
            RowBox[{"FrameStyle", "\[Rule]", 
             RowBox[{"Dynamic", "[", 
              RowBox[{"Lighter", "[", 
               RowBox[{"MyColor", ",", " ", ".8"}], "]"}], "]"}]}], ",", 
            RowBox[{"Background", "\[Rule]", 
             RowBox[{"Dynamic", "[", 
              RowBox[{"Lighter", "[", 
               RowBox[{"MyColor", ",", " ", ".96"}], "]"}], "]"}]}], ",", 
            RowBox[{"RoundingRadius", "\[Rule]", "5"}], ",", 
            RowBox[{"ImageSize", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"475", ",", "Automatic"}], "}"}]}]}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"===", "===", "==="}], "=", 
            RowBox[{
            "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
              "===", "===", 
             RowBox[{"\[Equal]", 
              RowBox[{
              "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"===", "===", "==="}], "=", 
            RowBox[{
            "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
              "===", "===", 
             RowBox[{"\[Equal]", 
              RowBox[{
              "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"Bottom", " ", "Frame"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"Framed", "[", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{
             RowBox[{"===", "===", "==="}], "=", 
             RowBox[{
             "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
               "===", "===", 
              RowBox[{"\[Equal]", 
               RowBox[{
               "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
            "*)"}], "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{"Bottom", " ", "Row"}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Row", "[", 
             RowBox[{
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"===", "===", "==="}], "=", 
                 RowBox[{
                 "===", "===", "===", "===", "===", "===", "===", "===", "===",
                   "===", "===", "===", 
                  RowBox[{"\[Equal]", 
                   RowBox[{
                   "===", "===", "===", "===", "===", "===", "===", 
                    "=="}]}]}]}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{"Bottom", " ", "Column", " ", 
                 RowBox[{"(", 
                  RowBox[{"only", " ", "one"}], ")"}]}], " ", "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Column", "[", 
                 RowBox[{
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\< Export Results \>\"", ",", "12", ",", "Bold"}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{"===", "===", "==="}], "=", 
                    RowBox[{
                    "===", "===", "===", "===", "===", "===", "===", "===", "===",
                     "===", "===", "===", 
                    RowBox[{"\[Equal]", 
                    RowBox[{
                    "===", "===", "===", "===", "===", "===", "===", 
                    "=="}]}]}]}], "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{"Table", " ", "of", " ", "Results"}], " ", "*)"}],
                     "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Table of Results \>\"", ",", "\[IndentingNewLine]", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "NameOfFile", "]"}], ",", 
                    "String", ",", 
                    RowBox[{"FieldHint", "\[Rule]", "\"\<Name of File\>\""}], 
                    ",", 
                    RowBox[{"FieldSize", "\[Rule]", "Small"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<pdf\>\"", ",", "10"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"DirectoryQ", "[", "OutputDir", "]"}], "\[Equal]",
                     "False"}], ",", 
                    RowBox[{"CreateDirectory", "[", "OutputDir", "]"}]}], 
                    "]"}], ";", " ", 
                    RowBox[{"(*", " ", 
                    RowBox[{
                    "Checking", " ", "if", " ", "Output", " ", "Dir", " ", 
                    "is", " ", "already", " ", "created"}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"OutputFileName", "<>", "\"\<.pdf\>\""}]}], ",", 
                    "MeteoPdf"}], "]"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"27", ",", "20"}], "}"}]}], ",", 
                    RowBox[{"FrameMargins", "\[Rule]", "0"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<xls\>\"", ",", "10"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"DirectoryQ", "[", "OutputDir", "]"}], "\[Equal]",
                     "False"}], ",", 
                    RowBox[{"CreateDirectory", "[", "OutputDir", "]"}]}], 
                    "]"}], ";", " ", 
                    RowBox[{"(*", " ", 
                    RowBox[{
                    "Checking", " ", "if", " ", "Output", " ", "Dir", " ", 
                    "is", " ", "already", " ", "created"}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"OutputFileName", "<>", "\"\<.xls\>\""}]}], ",", 
                    "MeteoTable"}], "]"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"27", ",", "20"}], "}"}]}], ",", 
                    RowBox[{"FrameMargins", "\[Rule]", "0"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<png\>\"", ",", "10"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"DirectoryQ", "[", "OutputDir", "]"}], "\[Equal]",
                     "False"}], ",", 
                    RowBox[{"CreateDirectory", "[", "OutputDir", "]"}]}], 
                    "]"}], ";", " ", 
                    RowBox[{"(*", " ", 
                    RowBox[{
                    "Checking", " ", "if", " ", "Output", " ", "Dir", " ", 
                    "is", " ", "already", " ", "created"}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"OutputFileName", "<>", "\"\<.png\>\""}]}], ",", 
                    "MeteoPNG"}], "]"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"27", ",", "20"}], "}"}]}], ",", 
                    RowBox[{"FrameMargins", "\[Rule]", "0"}]}], "]"}]}], 
                    "}"}], ",", "\"\<  \>\""}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{"===", "===", "==="}], "=", 
                    RowBox[{
                    "===", "===", "===", "===", "===", "===", "===", "===", "===",
                     "===", "===", "===", 
                    RowBox[{"\[Equal]", 
                    RowBox[{
                    "===", "===", "===", "===", "===", "===", "===", 
                    "=="}]}]}]}], "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{"Evolution", " ", "Plots"}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{"===", "===", "==="}], "=", 
                    RowBox[{
                    "===", "===", "===", "===", "===", "===", "===", "===", "===",
                     "===", "===", "===", 
                    RowBox[{"\[Equal]", 
                    RowBox[{
                    "===", "===", "===", "===", "===", "===", "===", 
                    "=="}]}]}]}], "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{
                    "Configuring", " ", "Export", " ", "Option", " ", 
                    "Boxes"}], " ", "*)"}], "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Evolution Plots\>\"", ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Xexp", "=", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<   X\>\"", ",", "\[IndentingNewLine]", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"XxZ", ",", "True", ",", "\"\<\>\""}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"True", ",", "False"}], "}"}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "Checkbox"}], ",", 
                    RowBox[{"Enabled", "->", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"AllZ", "\[Equal]", "True"}], ",", "False", ",", 
                    "True"}], "]"}]}]}], "}"}], "]"}], ",", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Xxt", ",", "True", ",", "\"\<\>\""}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"True", ",", "False"}], "}"}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "Checkbox"}], ",", 
                    RowBox[{"Enabled", "->", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"Allt", "\[Equal]", "True"}], ",", "False", ",", 
                    "True"}], "]"}]}]}], "}"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"Spacings", "\[Rule]", "0"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Mexp", "=", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<   M\>\"", ",", "\[IndentingNewLine]", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"MxZ", ",", "True", ",", "\"\<\>\""}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"True", ",", "False"}], "}"}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "Checkbox"}], ",", 
                    RowBox[{"Enabled", "->", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"AllZ", "\[Equal]", "True"}], ",", "False", ",", 
                    "True"}], "]"}]}]}], "}"}], "]"}], ",", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Mxt", ",", "True", ",", "\"\<\>\""}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"True", ",", "False"}], "}"}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "Checkbox"}], ",", 
                    RowBox[{"Enabled", "->", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"Allt", "\[Equal]", "True"}], ",", "False", ",", 
                    "True"}], "]"}]}]}], "}"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"Spacings", "\[Rule]", "0"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Texp", "=", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<   T\>\"", ",", "\[IndentingNewLine]", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"TxZ", ",", "True", ",", "\"\<\>\""}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"True", ",", "False"}], "}"}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "Checkbox"}], ",", 
                    RowBox[{"Enabled", "->", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"AllZ", "\[Equal]", "True"}], ",", "False", ",", 
                    "True"}], "]"}]}]}], "}"}], "]"}], ",", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Txt", ",", "True", ",", "\"\<\>\""}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"True", ",", "False"}], "}"}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "Checkbox"}], ",", 
                    RowBox[{"Enabled", "->", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"Allt", "\[Equal]", "True"}], ",", "False", ",", 
                    "True"}], "]"}]}]}], "}"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"Spacings", "\[Rule]", "0"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Vexp", "=", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<   V\>\"", ",", "\[IndentingNewLine]", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"VxZ", ",", "True", ",", "\"\<\>\""}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"True", ",", "False"}], "}"}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "Checkbox"}], ",", 
                    RowBox[{"Enabled", "->", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"AllZ", "\[Equal]", "True"}], ",", "False", ",", 
                    "True"}], "]"}]}]}], "}"}], "]"}], ",", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Vxt", ",", "True", ",", "\"\<\>\""}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"True", ",", "False"}], "}"}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "Checkbox"}], ",", 
                    RowBox[{"Enabled", "->", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"Allt", "\[Equal]", "True"}], ",", "False", ",", 
                    "True"}], "]"}]}]}], "}"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"Spacings", "\[Rule]", "0"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"ExpoResult", "=", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "Xexp", ",", "Mexp", ",", "Texp", ",", "Vexp", ",", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<\>\"", ",", "\"\<  Height  \>\"", ",", 
                    "\"\<  Time  \>\""}], "}"}], ",", 
                    RowBox[{"Spacings", "\[Rule]", "0"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Left"}]}], "]"}]}], 
                    "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"Alltime", "=", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\< \>\"", ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\< All\>\"", ",", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"AllZ", ",", "True", ",", "\"\<\>\""}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"True", ",", "False"}], "}"}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "Checkbox"}]}], "}"}], 
                    "]"}]}], "}"}], "]"}], ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\< All\>\"", ",", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Allt", ",", "True", ",", "\"\<\>\""}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"True", ",", "False"}], "}"}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "Checkbox"}]}], "}"}], 
                    "]"}]}], "}"}], "]"}]}], "}"}], ",", 
                    RowBox[{"Spacings", "\[Rule]", "0"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"Alltime", ",", "\"\< \>\"", ",", "ExpoResult"}], 
                    "}"}], "]"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{"===", "===", "==="}], "=", 
                    RowBox[{
                    "===", "===", "===", "===", "===", "===", "===", "===", "===",
                     "===", "===", "===", 
                    RowBox[{"\[Equal]", 
                    RowBox[{
                    "===", "===", "===", "===", "===", "===", "===", 
                    "=="}]}]}]}], "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{"Configuring", " ", "Export", " ", "Buttons"}], 
                    " ", "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", "eps", " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<eps\>\"", ",", "10"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"DirectoryQ", "[", "OutputDir", "]"}], "\[Equal]",
                     "False"}], ",", 
                    RowBox[{"CreateDirectory", "[", "OutputDir", "]"}]}], 
                    "]"}], ";", " ", 
                    RowBox[{"(*", " ", 
                    RowBox[{
                    "Checking", " ", "if", " ", "Output", " ", "Dir", " ", 
                    "is", " ", "already", " ", "created"}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"*", " ", "Time"}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Xxt", ",", "Mxt", ",", "Txt", ",", "Vxt"}], 
                    "}"}], ",", "True"}], "]"}], "!=", "0"}], ",", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"TimeName", "<>", "\"\<.eps\>\""}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"0", "<", 
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Xxt", ",", "Mxt", ",", "Txt", ",", "Vxt"}], 
                    "}"}], ",", "True"}], "]"}], "\[LessEqual]", "3"}], ",", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"Labeled", "[", 
                    RowBox[{
                    RowBox[{"GraphicsRow", "[", 
                    RowBox[{
                    RowBox[{"Extract", "[", 
                    RowBox[{"TimeExpo", ",", 
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Xxt", ",", "Mxt", ",", "Txt", ",", "Vxt"}], 
                    "}"}], ",", "True"}], "]"}]}], "]"}], ",", 
                    RowBox[{"ImageSize", "->", 
                    RowBox[{
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"XxZ", ",", "MxZ", ",", "TxZ", ",", "VxZ"}], 
                    "}"}], ",", "True"}], "]"}], "*", "450"}]}]}], "]"}], ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Time Evolution\>\"", ",", "Bold", ",", "25"}], "]"}],
                     ",", "Top"}], "]"}], "]"}], ",", 
                    RowBox[{"Labeled", "[", 
                    RowBox[{
                    RowBox[{"GraphicsGrid", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"RowP1Expo", ",", "RowP2Expo"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"RowP3Expo", ",", "RowP4Expo"}], "}"}]}], "}"}], 
                    ",", 
                    RowBox[{"ImageSize", "\[Rule]", "1500"}]}], "]"}], ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Time Evolution\>\"", ",", "Bold", ",", "25"}], "]"}],
                     ",", "Top"}], "]"}]}], "]"}]}], "]"}]}], "]"}], "&&", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"Allt", "\[Equal]", "True"}], ",", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"TimeName", "<>", "\"\<.eps\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Labeled", "[", 
                    RowBox[{
                    RowBox[{"GraphicsGrid", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"RowP1Expo", ",", "RowP2Expo"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"RowP3Expo", ",", "RowP4Expo"}], "}"}]}], "}"}], 
                    ",", 
                    RowBox[{"ImageSize", "\[Rule]", "1500"}]}], "]"}], ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Time Evolution\>\"", ",", "Bold", ",", "25"}], "]"}],
                     ",", "Top"}], "]"}]}], "]"}]}], "]"}], "&&", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", "Height", " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"XxZ", ",", "MxZ", ",", "TxZ", ",", "VxZ"}], 
                    "}"}], ",", "True"}], "]"}], "!=", "0"}], ",", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"ZName", "<>", "\"\<.eps\>\""}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"0", "<", 
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"XxZ", ",", "MxZ", ",", "TxZ", ",", "VxZ"}], 
                    "}"}], ",", "True"}], "]"}], "\[LessEqual]", "3"}], ",", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"Labeled", "[", 
                    RowBox[{
                    RowBox[{"GraphicsRow", "[", 
                    RowBox[{
                    RowBox[{"Extract", "[", 
                    RowBox[{"ZExpo", ",", 
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"XxZ", ",", "MxZ", ",", "TxZ", ",", "VxZ"}], 
                    "}"}], ",", "True"}], "]"}]}], "]"}], ",", 
                    RowBox[{"ImageSize", "->", 
                    RowBox[{
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"XxZ", ",", "MxZ", ",", "TxZ", ",", "VxZ"}], 
                    "}"}], ",", "True"}], "]"}], "*", "450"}]}]}], "]"}], ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Height Evolution\>\"", ",", "Bold", ",", "25"}], 
                    "]"}], ",", "Top"}], "]"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Labeled", "[", 
                    RowBox[{
                    RowBox[{"GraphicsGrid", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"ColP1Expo", ",", "ColP2Expo"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"ColP3Expo", ",", "ColP4Expo"}], "}"}]}], "}"}], 
                    ",", 
                    RowBox[{"ImageSize", "\[Rule]", "1500"}]}], "]"}], ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Height Evolution\>\"", ",", "Bold", ",", "25"}], 
                    "]"}], ",", "Top"}], "]"}]}], "]"}]}], "]"}]}], "]"}], "&&",
                     "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"AllZ", "\[Equal]", "True"}], ",", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"ZName", "<>", "\"\<.eps\>\""}], ",", 
                    RowBox[{"Labeled", "[", 
                    RowBox[{
                    RowBox[{"GraphicsGrid", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"ColP1Expo", ",", "ColP2Expo"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"ColP3Expo", ",", "ColP4Expo"}], "}"}]}], "}"}], 
                    ",", 
                    RowBox[{"ImageSize", "\[Rule]", "1500"}]}], "]"}], ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Height Evolution\>\"", ",", "Bold", ",", "25"}], 
                    "]"}], ",", "Top"}], "]"}]}], "]"}]}], "]"}]}]}], 
                    "\[IndentingNewLine]", ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"27", ",", "20"}], "}"}]}], ",", 
                    RowBox[{"FrameMargins", "\[Rule]", "0"}]}], "]"}], 
                    "]"}]}], "\[IndentingNewLine]", "}"}], "]"}], ",", 
                    "\[IndentingNewLine]", "\"\<  \>\"", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", "png", " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<png\>\"", ",", "10"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"DirectoryQ", "[", "OutputDir", "]"}], "\[Equal]",
                     "False"}], ",", 
                    RowBox[{"CreateDirectory", "[", "OutputDir", "]"}]}], 
                    "]"}], ";", " ", 
                    RowBox[{"(*", " ", 
                    RowBox[{
                    "Checking", " ", "if", " ", "Output", " ", "Dir", " ", 
                    "is", " ", "already", " ", "created"}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"*", " ", "Time"}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Xxt", ",", "Mxt", ",", "Txt", ",", "Vxt"}], 
                    "}"}], ",", "True"}], "]"}], "!=", "0"}], ",", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"TimeName", "<>", "\"\<.png\>\""}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"0", "<", 
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Xxt", ",", "Mxt", ",", "Txt", ",", "Vxt"}], 
                    "}"}], ",", "True"}], "]"}], "\[LessEqual]", "3"}], ",", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"Labeled", "[", 
                    RowBox[{
                    RowBox[{"GraphicsRow", "[", 
                    RowBox[{
                    RowBox[{"Extract", "[", 
                    RowBox[{"TimeExpo", ",", 
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Xxt", ",", "Mxt", ",", "Txt", ",", "Vxt"}], 
                    "}"}], ",", "True"}], "]"}]}], "]"}], ",", 
                    RowBox[{"ImageSize", "->", 
                    RowBox[{
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"XxZ", ",", "MxZ", ",", "TxZ", ",", "VxZ"}], 
                    "}"}], ",", "True"}], "]"}], "*", "450"}]}]}], "]"}], ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Time Evolution\>\"", ",", "Bold", ",", "25"}], "]"}],
                     ",", "Top"}], "]"}], "]"}], ",", 
                    RowBox[{"Labeled", "[", 
                    RowBox[{
                    RowBox[{"GraphicsGrid", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"RowP1Expo", ",", "RowP2Expo"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"RowP3Expo", ",", "RowP4Expo"}], "}"}]}], "}"}], 
                    ",", 
                    RowBox[{"ImageSize", "\[Rule]", "1500"}]}], "]"}], ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Time Evolution\>\"", ",", "Bold", ",", "25"}], "]"}],
                     ",", "Top"}], "]"}]}], "]"}]}], "]"}]}], "]"}], "&&", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"Allt", "\[Equal]", "True"}], ",", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"TimeName", "<>", "\"\<.png\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Labeled", "[", 
                    RowBox[{
                    RowBox[{"GraphicsGrid", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"RowP1Expo", ",", "RowP2Expo"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"RowP3Expo", ",", "RowP4Expo"}], "}"}]}], "}"}], 
                    ",", 
                    RowBox[{"ImageSize", "\[Rule]", "1500"}]}], "]"}], ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Time Evolution\>\"", ",", "Bold", ",", "25"}], "]"}],
                     ",", "Top"}], "]"}]}], "]"}]}], "]"}], "&&", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", "Height", " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"XxZ", ",", "MxZ", ",", "TxZ", ",", "VxZ"}], 
                    "}"}], ",", "True"}], "]"}], "!=", "0"}], ",", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"ZName", "<>", "\"\<.png\>\""}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"0", "<", 
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"XxZ", ",", "MxZ", ",", "TxZ", ",", "VxZ"}], 
                    "}"}], ",", "True"}], "]"}], "\[LessEqual]", "3"}], ",", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"Labeled", "[", 
                    RowBox[{
                    RowBox[{"GraphicsRow", "[", 
                    RowBox[{
                    RowBox[{"Extract", "[", 
                    RowBox[{"ZExpo", ",", 
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"XxZ", ",", "MxZ", ",", "TxZ", ",", "VxZ"}], 
                    "}"}], ",", "True"}], "]"}]}], "]"}], ",", 
                    RowBox[{"ImageSize", "->", 
                    RowBox[{
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"XxZ", ",", "MxZ", ",", "TxZ", ",", "VxZ"}], 
                    "}"}], ",", "True"}], "]"}], "*", "450"}]}]}], "]"}], ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Height Evolution\>\"", ",", "Bold", ",", "25"}], 
                    "]"}], ",", "Top"}], "]"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Labeled", "[", 
                    RowBox[{
                    RowBox[{"GraphicsGrid", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"ColP1Expo", ",", "ColP2Expo"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"ColP3Expo", ",", "ColP4Expo"}], "}"}]}], "}"}], 
                    ",", 
                    RowBox[{"ImageSize", "\[Rule]", "1500"}]}], "]"}], ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Height Evolution\>\"", ",", "Bold", ",", "25"}], 
                    "]"}], ",", "Top"}], "]"}]}], "]"}]}], "]"}]}], "]"}], "&&",
                     "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"AllZ", "\[Equal]", "True"}], ",", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"ZName", "<>", "\"\<.png\>\""}], ",", 
                    RowBox[{"Labeled", "[", 
                    RowBox[{
                    RowBox[{"GraphicsGrid", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"ColP1Expo", ",", "ColP2Expo"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"ColP3Expo", ",", "ColP4Expo"}], "}"}]}], "}"}], 
                    ",", 
                    RowBox[{"ImageSize", "\[Rule]", "1500"}]}], "]"}], ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Height Evolution\>\"", ",", "Bold", ",", "25"}], 
                    "]"}], ",", "Top"}], "]"}]}], "]"}]}], "]"}]}]}], 
                    "\[IndentingNewLine]", ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"27", ",", "20"}], "}"}]}], ",", 
                    RowBox[{"FrameMargins", "\[Rule]", "0"}]}], "]"}], 
                    "]"}]}], "\[IndentingNewLine]", "}"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Left"}]}], "]"}]}], 
                   "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                    RowBox[{"===", "===", "==="}], "=", 
                    RowBox[{
                    "===", "===", "===", "===", "===", "===", "===", "===", "===",
                     "===", "===", "===", 
                    RowBox[{"\[Equal]", 
                    RowBox[{
                    "===", "===", "===", "===", "===", "===", "===", 
                    "=="}]}]}]}], "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"(*", " ", 
                   RowBox[{"Bottom", " ", "Column"}], " ", "*)"}], 
                  "\[IndentingNewLine]", ",", 
                  RowBox[{"Dividers", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"2", "\[Rule]", "None"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"1", "\[Rule]", "None"}], ",", 
                    RowBox[{"2", "\[Rule]", "None"}], ",", 
                    RowBox[{"3", "\[Rule]", 
                    RowBox[{"Dynamic", "[", "MyColor", "]"}]}]}], "}"}]}], 
                    "}"}]}], ",", 
                  RowBox[{"Spacings", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{"0", ",", ".4"}], "}"}]}]}], "]"}], ",", 
                "\[IndentingNewLine]", "\"\<  \>\"", ",", 
                "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"===", "===", "==="}], "=", 
                  RowBox[{
                  "===", "===", "===", "===", "===", "===", "===", "===", "===",
                    "===", "===", "===", 
                   RowBox[{"\[Equal]", 
                    RowBox[{
                    "===", "===", "===", "===", "===", "===", "===", 
                    "=="}]}]}]}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", " ", 
                 RowBox[{"Fragmentation", " ", "Plots"}], " ", "*)"}], 
                "\[IndentingNewLine]", 
                RowBox[{"Column", "[", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                   "\"\<\>\"", ",", "\"\<  Fragmentation Plots\>\"", ",", 
                    RowBox[{"Labeled", "[", 
                    RowBox[{
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"AllFrags", ",", "True", ",", "\"\<\>\""}], "}"}],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{"True", ",", "False"}], "}"}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "Checkbox"}]}], "}"}], 
                    "]"}], ",", "\"\<All\>\"", ",", "Right"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Grid", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"LeftUp", ",", "True", ",", "\"\<\>\""}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"True", ",", "False"}], "}"}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "Checkbox"}], ",", 
                    RowBox[{"Enabled", "->", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"AllFrags", "\[Equal]", "True"}], ",", "False", 
                    ",", "True"}], "]"}]}]}], "}"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"RightUp", ",", "True", ",", "\"\<\>\""}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"True", ",", "False"}], "}"}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "Checkbox"}], ",", 
                    RowBox[{"Enabled", "->", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"AllFrags", "\[Equal]", "True"}], ",", "False", 
                    ",", "True"}], "]"}]}]}], "}"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"LeftBot", ",", "True", ",", "\"\<\>\""}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"True", ",", "False"}], "}"}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "Checkbox"}], ",", 
                    RowBox[{"Enabled", "->", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"AllFrags", "\[Equal]", "True"}], ",", "False", 
                    ",", "True"}], "]"}]}]}], "}"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"RightBot", ",", "True", ",", "\"\<\>\""}], "}"}],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{"True", ",", "False"}], "}"}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "Checkbox"}], ",", 
                    RowBox[{"Enabled", "->", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"AllFrags", "\[Equal]", "True"}], ",", "False", 
                    ",", "True"}], "]"}]}]}], "}"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}]}], "}"}], ",", 
                    RowBox[{"Spacings", "\[Rule]", "0"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", "\"\<  \>\"", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<eps\>\"", ",", "10"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"DirectoryQ", "[", "OutputDir", "]"}], "\[Equal]",
                     "False"}], ",", 
                    RowBox[{"CreateDirectory", "[", "OutputDir", "]"}]}], 
                    "]"}], ";", " ", 
                    RowBox[{"(*", " ", 
                    RowBox[{
                    "Checking", " ", "if", " ", "Output", " ", "Dir", " ", 
                    "is", " ", "already", " ", "created"}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "LeftUp", ",", "RightUp", ",", "LeftBot", ",", 
                    "RightBot"}], "}"}], ",", "True"}], "]"}], "!=", "0"}], 
                    ",", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"FragsName", "<>", "\"\<.eps\>\""}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"0", "<", 
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "LeftUp", ",", "RightUp", ",", "LeftBot", ",", 
                    "RightBot"}], "}"}], ",", "True"}], "]"}], "\[LessEqual]",
                     "3"}], ",", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"GraphicsRow", "[", 
                    RowBox[{
                    RowBox[{"Extract", "[", 
                    RowBox[{"mainExpo", ",", 
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "LeftUp", ",", "RightUp", ",", "LeftBot", ",", 
                    "RightBot"}], "}"}], ",", "True"}], "]"}]}], "]"}], ",", 
                    RowBox[{"ImageSize", "->", 
                    RowBox[{
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "LeftUp", ",", "RightUp", ",", "LeftBot", ",", 
                    "RightBot"}], "}"}], ",", "True"}], "]"}], "*", 
                    "250"}]}]}], "]"}], "]"}], ",", 
                    RowBox[{"GraphicsGrid", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"RegularView", ",", "LeftView"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"FrontalView", ",", "TopView"}], "}"}]}], "}"}], 
                    ",", 
                    RowBox[{"ImageSize", "\[Rule]", "500"}]}], "]"}]}], 
                    "]"}]}], "]"}]}], "]"}], "&&", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"AllFrags", "\[Equal]", "True"}], ",", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"FragsName", "<>", "\"\<.eps\>\""}], ",", 
                    RowBox[{"GraphicsGrid", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"RegularView", ",", "LeftView"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"FrontalView", ",", "TopView"}], "}"}]}], "}"}], 
                    ",", 
                    RowBox[{"ImageSize", "\[Rule]", "500"}]}], "]"}]}], 
                    "]"}]}], "]"}]}]}], "\[IndentingNewLine]", ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"27", ",", "20"}], "}"}]}], ",", 
                    RowBox[{"FrameMargins", "\[Rule]", "0"}]}], "]"}], "]"}], 
                    ",", "\[IndentingNewLine]", "\"\<  \>\"", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<png\>\"", ",", "10"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"DirectoryQ", "[", "OutputDir", "]"}], "\[Equal]",
                     "False"}], ",", 
                    RowBox[{"CreateDirectory", "[", "OutputDir", "]"}]}], 
                    "]"}], ";", " ", 
                    RowBox[{"(*", " ", 
                    RowBox[{
                    "Checking", " ", "if", " ", "Output", " ", "Dir", " ", 
                    "is", " ", "already", " ", "created"}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "LeftUp", ",", "RightUp", ",", "LeftBot", ",", 
                    "RightBot"}], "}"}], ",", "True"}], "]"}], "!=", "0"}], 
                    ",", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"FragsName", "<>", "\"\<.png\>\""}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"0", "<", 
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "LeftUp", ",", "RightUp", ",", "LeftBot", ",", 
                    "RightBot"}], "}"}], ",", "True"}], "]"}], "\[LessEqual]",
                     "3"}], ",", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"GraphicsRow", "[", 
                    RowBox[{
                    RowBox[{"Extract", "[", 
                    RowBox[{"mainExpo", ",", 
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "LeftUp", ",", "RightUp", ",", "LeftBot", ",", 
                    "RightBot"}], "}"}], ",", "True"}], "]"}]}], "]"}], ",", 
                    RowBox[{"ImageSize", "->", 
                    RowBox[{
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "LeftUp", ",", "RightUp", ",", "LeftBot", ",", 
                    "RightBot"}], "}"}], ",", "True"}], "]"}], "*", 
                    "250"}]}]}], "]"}], "]"}], ",", 
                    RowBox[{"GraphicsGrid", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"RegularView", ",", "LeftView"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"FrontalView", ",", "TopView"}], "}"}]}], "}"}], 
                    ",", 
                    RowBox[{"ImageSize", "\[Rule]", "500"}]}], "]"}]}], 
                    "]"}]}], "]"}]}], "]"}], "&&", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"AllFrags", "\[Equal]", "True"}], ",", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"FragsName", "<>", "\"\<.png\>\""}], ",", 
                    RowBox[{"GraphicsGrid", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"RegularView", ",", "LeftView"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"FrontalView", ",", "TopView"}], "}"}]}], "}"}], 
                    ",", 
                    RowBox[{"ImageSize", "\[Rule]", "500"}]}], "]"}]}], 
                    "]"}]}], "]"}]}]}], "\[IndentingNewLine]", ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"27", ",", "20"}], "}"}]}], ",", 
                    RowBox[{"FrameMargins", "\[Rule]", "0"}]}], "]"}], 
                    "]"}]}], "\[IndentingNewLine]", "}"}], "]"}]}], "}"}], 
                  ",", 
                  RowBox[{"Dividers", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{"1", "\[Rule]", 
                    RowBox[{"Dynamic", "[", "MyColor", "]"}]}], "}"}]}], ",", 
                  RowBox[{"Alignment", "\[Rule]", "Left"}], ",", 
                  RowBox[{"Spacings", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{".2", ",", ".2"}], "}"}]}]}], "]"}]}], 
               "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"===", "===", "==="}], "=", 
                 RowBox[{
                 "===", "===", "===", "===", "===", "===", "===", "===", "===",
                   "===", "===", "===", 
                  RowBox[{"\[Equal]", 
                   RowBox[{
                   "===", "===", "===", "===", "===", "===", "===", 
                    "=="}]}]}]}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{"End", " ", "of", " ", "Bottom", " ", "Row"}], " ", 
                "*)"}], "\[IndentingNewLine]", "}"}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Bottom"}]}], "]"}], 
            "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{"===", "===", "==="}], "=", 
              RowBox[{
              "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
                "===", "===", 
               RowBox[{"\[Equal]", 
                RowBox[{
                "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}],
              "*)"}], "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{"End", " ", "of", " ", "Bottom", " ", "Frame"}], " ", 
             "*)"}], "\[IndentingNewLine]", ",", 
            RowBox[{"FrameStyle", "\[Rule]", 
             RowBox[{"Dynamic", "[", 
              RowBox[{"Lighter", "[", 
               RowBox[{"MyColor", ",", " ", ".8"}], "]"}], "]"}]}], ",", 
            RowBox[{"Background", "\[Rule]", 
             RowBox[{"Dynamic", "[", 
              RowBox[{"Lighter", "[", 
               RowBox[{"MyColor", ",", " ", ".96"}], "]"}], "]"}]}], ",", 
            RowBox[{"RoundingRadius", "\[Rule]", "5"}], ",", 
            RowBox[{"ImageSize", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"475", ",", "Automatic"}], "}"}]}]}], "]"}], 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"===", "===", "==="}], "=", 
            RowBox[{
            "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
              "===", "===", 
             RowBox[{"\[Equal]", 
              RowBox[{
              "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "End", " ", "of", " ", "Column", " ", "for", " ", "Left", " ", 
            "part", " ", "of", " ", "Manipulate"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"===", "===", "==="}], "=", 
            RowBox[{
            "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
              "===", "===", 
             RowBox[{"\[Equal]", 
              RowBox[{
              "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"ADDING", " ", "COLOR", " ", "PALLETE"}], " ", "*)"}], 
          "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"Labeled", "[", 
            RowBox[{
             RowBox[{"ColorSlider", "[", 
              RowBox[{
               RowBox[{"Dynamic", "[", 
                RowBox[{"MyColor", ",", 
                 RowBox[{"Initialization", "\[RuleDelayed]", 
                  RowBox[{"(", 
                   RowBox[{"MyColor", ":=", "Gray"}], ")"}]}]}], "]"}], ",", 
               RowBox[{"ImageSize", "\[Rule]", 
                RowBox[{"{", 
                 RowBox[{"140", ",", "30"}], "}"}]}], ",", 
               RowBox[{"ImageMargins", "\[Rule]", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"0", ",", "0"}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"0", ",", "0"}], "}"}]}], "}"}]}]}], "]"}], ",", 
             RowBox[{"Style", "[", 
              RowBox[{"\"\<Choose Color\>\"", ",", "Bold"}], "]"}], ",", 
             "Right"}], "]"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"Grid", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Labeled", "[", 
                RowBox[{
                 RowBox[{"ColorSlider", "[", 
                  RowBox[{
                   RowBox[{"Dynamic", "[", 
                    RowBox[{"MyColor", ",", 
                    RowBox[{"Initialization", "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{"MyColor", ":=", "Gray"}], ")"}]}]}], "]"}], ",", 
                   RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"140", ",", "30"}], "}"}]}], ",", 
                   RowBox[{"ImageMargins", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}]}], "}"}]}]}], "]"}], ",", 
                 RowBox[{"Style", "[", 
                  RowBox[{"\"\<Background Color\>\"", ",", "Bold"}], "]"}], 
                 ",", "Top"}], "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Labeled", "[", 
                RowBox[{
                 RowBox[{"Control", "[", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"PlotArt", ",", "None", ",", "\"\<\>\""}], "}"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"None", "\[Rule]", "\"\<None\>\""}], ",", 
                    RowBox[{"Day", "\[Rule]", "\"\<Day\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Night", "\[Rule]", "\"\<Night\>\""}]}], 
                    "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"ControlType", "\[Rule]", "SetterBar"}], ",", 
                    RowBox[{"Appearance", "->", "\"\<Row\>\""}], ",", 
                    RowBox[{"ImageMargins", "\[Rule]", "0"}], ",", 
                    RowBox[{"FrameMargins", "\[Rule]", "0"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}]}], "}"}], "]"}], 
                 ",", 
                 RowBox[{"Style", "[", 
                  RowBox[{"\"\<Plot Art\>\"", ",", "Bold"}], "]"}], ",", 
                 "Top"}], "]"}]}], "}"}], "}"}], ",", 
            RowBox[{"Alignment", "\[Rule]", "Center"}], ",", 
            RowBox[{"Dividers", "\[Rule]", 
             RowBox[{"{", " ", 
              RowBox[{
               RowBox[{"2", "->", 
                RowBox[{"Dynamic", "[", "MyColor", "]"}]}], ",", "None"}], 
              "}"}]}], ",", 
            RowBox[{"Spacings", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"20.9", ",", " ", "1"}], "}"}]}]}], "]"}]}], 
         "\[IndentingNewLine]", "}"}], "]"}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"===", "===", "==="}], "=", 
         RowBox[{
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
           "===", "===", 
          RowBox[{"\[Equal]", 
           RowBox[{
           "===", "===", "===", "===", "===", "===", "===", "=="}]}]}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "End", " ", "of", " ", "Frame", " ", "for", " ", "Left", " ", "part", 
         " ", "of", " ", "Manipulate"}], " ", "*)"}], "\[IndentingNewLine]", 
       ",", 
       RowBox[{"Background", "\[Rule]", 
        RowBox[{"Dynamic", "[", 
         RowBox[{"Lighter", "[", 
          RowBox[{"MyColor", ",", " ", "0.69"}], "]"}], "]"}]}], ",", 
       RowBox[{"RoundingRadius", "\[Rule]", "5"}], ",", 
       RowBox[{"FrameStyle", "\[Rule]", 
        RowBox[{"Dynamic", "[", 
         RowBox[{"Lighter", "[", 
          RowBox[{"MyColor", ",", " ", "0.9"}], "]"}], "]"}]}], ",", 
       RowBox[{"Alignment", "\[Rule]", "Center"}], ",", 
       RowBox[{"ImageMargins", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "5"}], "}"}]}], "}"}]}], ",", 
       RowBox[{"ImageSize", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"Automatic", ",", "Automatic"}], "}"}]}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
       "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
         "===", "===", "===", "===", "===", "===", "===", 
        RowBox[{"\[Equal]", 
         RowBox[{"===", "===", "===", "===", "===", "===", "===", "==="}]}]}],
        "="}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"Finishing", " ", "Manipulate"}], " ", "*)"}], 
      "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
       "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
         "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
         "===", "===", "===", "===", "===", "===", "===", 
        RowBox[{"\[Equal]", 
         RowBox[{"===", "===", "===", "===", "===", "===", "===", "==="}]}]}],
        "="}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"ContinuousAction", "\[Rule]", "None"}], ",", 
     RowBox[{"AppearanceElements", "\[Rule]", 
      RowBox[{"{", "\"\<ResetButton\>\"", "}"}]}], ",", 
     RowBox[{"SaveDefinitions", "\[Rule]", "False"}], ",", 
     RowBox[{"SynchronousUpdating", "\[Rule]", "False"}], ",", 
     RowBox[{"Deployed", "\[Rule]", "True"}], ",", 
     RowBox[{"ControlPlacement", "\[Rule]", "Left"}], ",", 
     RowBox[{"Paneled", "\[Rule]", "False"}], ",", 
     RowBox[{"Alignment", "\[Rule]", "Center"}], ",", 
     RowBox[{"ImageMargins", "\[Rule]", "0"}], ",", 
     RowBox[{"ContentSize", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"Automatic", ",", "Automatic"}], "}"}]}], ",", 
     RowBox[{"LocalizeVariables", "\[Rule]", "False"}], ",", 
     RowBox[{"Initialization", "\[RuleDelayed]", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"TimeStep", ":=", "0.01"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"MTolerance", ":=", "0.1"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"M", ":=", "100"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"Dc", ":=", " ", "0.5"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"cp", ":=", "500"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"rho", ":=", " ", "2500"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"Lv", ":=", "20000"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"H", ":=", " ", "100"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"VE", ":=", " ", "100"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"\[Phi]E", ":=", " ", "90"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"HFrag", ":=", "0"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"Efr", ":=", " ", "0"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"nfrags", " ", ":=", " ", "1"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"mass", ":=", "unif"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"UnifAngle", ":=", "True"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"RandomAngle", ":=", "False"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"Q1", ":=", "False"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"Q2", ":=", "False"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"Q3", ":=", "False"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"Q4", ":=", "False"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"NameOfFile", " ", ":=", " ", "\"\<MeteoFile\>\""}], ")"}], 
        ",", 
        RowBox[{"(", 
         RowBox[{"LeftUp", ":=", "True"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"RightUp", ":=", "True"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"LeftBot", ":=", "True"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"RightBot", ":=", "True"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"AllFrags", " ", ":=", " ", "True"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"XxZ", ":=", "True"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"MxZ", ":=", "True"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"TxZ", ":=", "True"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"VxZ", ":=", "True"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"Xxt", ":=", "True"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"Mxt", ":=", "True"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"Txt", ":=", "True"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"Vxt", ":=", "True"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"AllZ", ":=", "True"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"Allt", ":=", "True"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"CT", ":=", "Null"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"OB", ":=", "Null"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"SB", ":=", "Null"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"J2", ":=", "Null"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"D2", ":=", "Null"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"MV", ":=", "Null"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"MD", ":=", "Null"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"AX", ":=", "Null"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"MyColor", ":=", " ", "Gray"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"PlotArt", ":=", " ", "None"}], ")"}], ",", 
        RowBox[{"(", 
         RowBox[{"MassAll", ":=", " ", 
          RowBox[{"{", "}"}]}], ")"}]}], "}"}]}]}], "\[IndentingNewLine]", 
    "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
     "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
       "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
       "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", 
      "===", "===", "===", "===", "===", "===", 
      RowBox[{"\[Equal]", 
       RowBox[{"===", "===", "===", "===", "===", "===", "===", "==="}]}]}], 
     "="}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{"Finishing", " ", "Framed"}], " ", "*)"}], "\[IndentingNewLine]",
     "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
     "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
       "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
       "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
       "===", "===", "===", "===", "===", 
      RowBox[{"\[Equal]", 
       RowBox[{"===", "===", "===", "===", "===", "===", "===", "==="}]}]}], 
     "="}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"Background", "\[Rule]", 
    RowBox[{"Dynamic", "[", 
     RowBox[{"Lighter", "[", 
      RowBox[{"MyColor", ",", " ", ".9"}], "]"}], "]"}]}], ",", 
   RowBox[{"ImageSize", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Automatic", ",", "Automatic"}], "}"}]}], ",", 
   RowBox[{"Alignment", "\[Rule]", "Center"}], ",", 
   RowBox[{"FrameMargins", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"15", ",", "5"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "5"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"RoundingRadius", "\[Rule]", "2"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{{3.6795089641299267`*^9, 3.6795089721533537`*^9}, {
   3.6795091560010157`*^9, 3.6795092495879936`*^9}, {3.6795092914498034`*^9, 
   3.6795093208964314`*^9}, {3.6795093535099583`*^9, 
   3.6795094648087225`*^9}, {3.679510014049128*^9, 3.6795100693835196`*^9}, {
   3.6795102578022275`*^9, 3.6795102991223316`*^9}, {3.6795104243615327`*^9, 
   3.6795105442252064`*^9}, {3.6795105883542767`*^9, 
   3.6795106316062703`*^9}, {3.679510801570418*^9, 3.679510837925561*^9}, {
   3.6795108901990256`*^9, 3.6795109027790675`*^9}, {3.679510942133749*^9, 
   3.6795109767088118`*^9}, {3.679511008487242*^9, 3.679511190761015*^9}, {
   3.6795112436893024`*^9, 3.6795114685165267`*^9}, {3.6795115169328585`*^9, 
   3.679511569707927*^9}, {3.679511604887777*^9, 3.6795116359095984`*^9}, {
   3.67951169295741*^9, 3.679511752051587*^9}, {3.6795119258616395`*^9, 
   3.679511934255026*^9}, {3.679511968984419*^9, 3.6795121036130714`*^9}, {
   3.6795121357302523`*^9, 3.6795129126780467`*^9}, {3.679512959214227*^9, 
   3.6795129873078327`*^9}, {3.67951301810166*^9, 3.6795130733580284`*^9}, {
   3.6795131040037336`*^9, 3.67951322877557*^9}, {3.6795132853759284`*^9, 
   3.6795133449138637`*^9}, {3.6795133803039513`*^9, 
   3.6795134042935047`*^9}, {3.679513580289996*^9, 3.6795135808557014`*^9}, {
   3.6795136136509285`*^9, 3.6795136806238585`*^9}, {3.6795137438725705`*^9, 
   3.6795137475509167`*^9}, {3.679513789666892*^9, 3.679513862751299*^9}, {
   3.6795139113708863`*^9, 3.6795140368456583`*^9}, {3.679514070095703*^9, 
   3.6795142613539925`*^9}, {3.679514296972045*^9, 3.6795143125837297`*^9}, {
   3.679514364858329*^9, 3.6795144378788137`*^9}, {3.6795144909275208`*^9, 
   3.67951457496401*^9}, {3.6795146274007845`*^9, 3.6795149066693563`*^9}, {
   3.6795149658722816`*^9, 3.6795152400132875`*^9}, {3.6795153164403944`*^9, 
   3.6795154308933597`*^9}, {3.6795154663194304`*^9, 
   3.6795155500761995`*^9}, {3.679515595337229*^9, 3.6795156571856165`*^9}, {
   3.6795157289044857`*^9, 3.679515871980263*^9}, {3.679516752814456*^9, 
   3.679516759377364*^9}, {3.6795168404229918`*^9, 3.679517086055832*^9}, {
   3.679517196936123*^9, 3.6795172931836715`*^9}, {3.679517346867964*^9, 
   3.67951739735888*^9}, {3.679517466336464*^9, 3.6795174905484943`*^9}, {
   3.679517528003817*^9, 3.6795176445402937`*^9}, {3.679517699747198*^9, 
   3.6795177766125727`*^9}, {3.679517830095441*^9, 3.6795178753292212`*^9}, {
   3.679517918179832*^9, 3.6795179882267027`*^9}, {3.6795180649581285`*^9, 
   3.6795180938764315`*^9}, {3.6795181271892643`*^9, 
   3.6795181635250387`*^9}, {3.679518198102908*^9, 3.6795182895625873`*^9}, {
   3.679518320416156*^9, 3.6795184409309425`*^9}, {3.6795184980575027`*^9, 
   3.6795185634364986`*^9}, {3.6795186095268173`*^9, 
   3.6795186324764175`*^9}, {3.679518680733186*^9, 3.679518681619458*^9}, {
   3.6795187141025233`*^9, 3.6795187654544888`*^9}, {3.6795188213926554`*^9, 
   3.6795188428368607`*^9}, {3.67951888742043*^9, 3.679518984175025*^9}, 
   3.679519754117781*^9, {3.6795199260067253`*^9, 3.6795199529345703`*^9}, {
   3.679520271514348*^9, 3.679520338284514*^9}, 3.6795240542839413`*^9, {
   3.679524145236741*^9, 3.6795241499843187`*^9}, 3.679527347056814*^9, {
   3.679531201500484*^9, 3.6795312232103977`*^9}, {3.67953971037593*^9, 
   3.6795397116464243`*^9}, {3.6795397471219044`*^9, 3.679539779094922*^9}, {
   3.6795398877681494`*^9, 3.6795398921170483`*^9}, {3.6795399618699045`*^9, 
   3.6795399661924715`*^9}, {3.6795400807032347`*^9, 
   3.6795400834282656`*^9}, {3.6795404789189024`*^9, 3.679540482996065*^9}, {
   3.679540536695442*^9, 3.6795405791386814`*^9}, {3.679540622796062*^9, 
   3.6795406374205637`*^9}, {3.6795408008195715`*^9, 3.679540803189398*^9}, {
   3.679540879203808*^9, 3.679540939710245*^9}, {3.6795410166913176`*^9, 
   3.6795410388546553`*^9}, {3.6795413681234093`*^9, 3.679541412788973*^9}, {
   3.67954319615941*^9, 3.6795432653336353`*^9}, {3.679543302313634*^9, 
   3.6795433782520456`*^9}, 3.679543655391968*^9, {3.6795439182549133`*^9, 
   3.6795439294630623`*^9}, {3.679545069279051*^9, 3.6795451280959682`*^9}, 
   3.6795452369134283`*^9, {3.6795471339229865`*^9, 3.6795471596310797`*^9}, {
   3.6795472494439774`*^9, 3.6795473888829665`*^9}, {3.679547585354774*^9, 
   3.679547655645923*^9}, {3.6795477803038807`*^9, 3.6795477807513065`*^9}, {
   3.6795485660156794`*^9, 3.6795485941775713`*^9}, {3.6795486665746074`*^9, 
   3.6795486966181297`*^9}, {3.679548759643321*^9, 3.6795487600500097`*^9}, 
   3.6795488646462526`*^9, {3.6795489067215776`*^9, 3.679548944232725*^9}, 
   3.679549064066863*^9, {3.679549148158433*^9, 3.679549157499221*^9}, {
   3.679549346203703*^9, 3.679549351322604*^9}, {3.6795496828411837`*^9, 
   3.679549697261443*^9}, {3.679549760328888*^9, 3.679549788850441*^9}, {
   3.6795499367570467`*^9, 3.679550003426938*^9}, {3.6795502426346884`*^9, 
   3.679550261948352*^9}, {3.679550301311065*^9, 3.679550321844124*^9}, {
   3.6795503584494405`*^9, 3.6795504052478747`*^9}, {3.679553673564414*^9, 
   3.679553688692555*^9}, {3.6795537404113393`*^9, 3.6795537515275216`*^9}, {
   3.6795542904149413`*^9, 3.6795543265807695`*^9}, {3.6795552977391677`*^9, 
   3.6795553003662457`*^9}, {3.6795846599082003`*^9, 3.679584660455084*^9}, {
   3.679584693941101*^9, 3.679584767583292*^9}, {3.6795849474230776`*^9, 
   3.679584954501424*^9}, {3.6795850672318954`*^9, 3.6795850675804954`*^9}, {
   3.6795851183581066`*^9, 3.6795851187985945`*^9}, {3.6795852551672287`*^9, 
   3.6795852658260703`*^9}, {3.6795868321819816`*^9, 3.679586872829179*^9}, {
   3.6795869047954063`*^9, 3.6795870814376516`*^9}, {3.6795871149848547`*^9, 
   3.6795871768496037`*^9}, {3.679587248657592*^9, 3.6795873038489084`*^9}, {
   3.6795874114435363`*^9, 3.679587430092288*^9}, 3.6795890187784834`*^9, {
   3.679589074989706*^9, 3.679589115252678*^9}, {3.6795923877892003`*^9, 
   3.6795923954444227`*^9}, {3.6795924312596064`*^9, 
   3.6795924421672163`*^9}, {3.6795927107876635`*^9, 3.67959272532275*^9}, {
   3.6795928244348173`*^9, 3.6795928574211836`*^9}, {3.679592930657813*^9, 
   3.6795929502132406`*^9}, {3.679592983936548*^9, 3.6795930750006213`*^9}, {
   3.6795956444900484`*^9, 3.6795956474139585`*^9}, {3.6795957148295135`*^9, 
   3.6795957687186947`*^9}, {3.6795958025231557`*^9, 
   3.6795958440965147`*^9}, {3.679595880355323*^9, 3.6795959201220217`*^9}, {
   3.679597501986437*^9, 3.679597542441577*^9}, {3.679606977212696*^9, 
   3.67960702385863*^9}, {3.6796071030903487`*^9, 3.679607172151828*^9}, {
   3.6796134433658648`*^9, 3.6796135425831385`*^9}, {3.6796139265090895`*^9, 
   3.6796139416990557`*^9}, {3.679614030281839*^9, 3.6796140365527897`*^9}, {
   3.6796145203880415`*^9, 3.679614615572181*^9}, {3.6796146656274276`*^9, 
   3.6796147117138186`*^9}, {3.679614745622033*^9, 3.679614792713153*^9}, {
   3.679614970758892*^9, 3.679615013482912*^9}, {3.6796160470069156`*^9, 
   3.6796161750078173`*^9}, {3.6796162651720624`*^9, 
   3.6796162667126937`*^9}, {3.679616758516567*^9, 3.6796167680534077`*^9}, {
   3.6796168155408816`*^9, 3.6796168229642076`*^9}, {3.679616907049712*^9, 
   3.6796170067849298`*^9}, {3.679617065810875*^9, 3.679617102751315*^9}, {
   3.6796171386374674`*^9, 3.6796171665159225`*^9}, 3.679617298698116*^9, {
   3.6796173455312037`*^9, 3.6796173630896845`*^9}, {3.67961743013529*^9, 
   3.679617435892456*^9}, {3.6796175099221935`*^9, 3.6796175365290446`*^9}, {
   3.6796177853406267`*^9, 3.6796178178964305`*^9}, {3.679617853424195*^9, 
   3.6796180085952964`*^9}, {3.6796180446406717`*^9, 3.679618069827973*^9}, {
   3.679618133747461*^9, 3.679618155215768*^9}, {3.6796183132443876`*^9, 
   3.67961831728512*^9}, {3.679618361565929*^9, 3.6796184228290305`*^9}, {
   3.679618580754833*^9, 3.679618681499482*^9}, {3.6796187916677675`*^9, 
   3.6796188007581744`*^9}, {3.6796188527023754`*^9, 3.679618882614993*^9}, 
   3.6796189204140043`*^9, {3.6796232280919027`*^9, 3.6796232512043324`*^9}, {
   3.6796235264041862`*^9, 3.6796235780463424`*^9}, {3.679624368777891*^9, 
   3.6796243772709455`*^9}, {3.67962552733331*^9, 3.679625544691187*^9}, 
   3.6796278486775703`*^9, {3.679627924089781*^9, 3.679627939251685*^9}, {
   3.6796279831038485`*^9, 3.6796280051944566`*^9}, {3.679628056202588*^9, 
   3.679628063097394*^9}, 3.679628207347295*^9, {3.6796282431359577`*^9, 
   3.6796282976192455`*^9}, {3.6796283600294876`*^9, 
   3.6796283624731445`*^9}, {3.679628628296904*^9, 3.6796286286889973`*^9}, {
   3.6796288117510023`*^9, 3.679628812076129*^9}, {3.679628917338814*^9, 
   3.6796290364730825`*^9}, {3.6796290743276606`*^9, 
   3.6796291517502456`*^9}, {3.6796292002503815`*^9, 
   3.6796293013355994`*^9}, {3.679629348269925*^9, 3.679629393461647*^9}, {
   3.6796294773862534`*^9, 3.6796294954746065`*^9}, {3.6796295466372614`*^9, 
   3.6796295904277754`*^9}, {3.679629639035825*^9, 3.6796296427364006`*^9}, {
   3.679629780720682*^9, 3.6796297979892406`*^9}, {3.6796298347730713`*^9, 
   3.6796299324189267`*^9}, {3.679629982486079*^9, 3.6796300467360177`*^9}, {
   3.6796301273521843`*^9, 3.6796301278260207`*^9}, {3.6796301653784633`*^9, 
   3.6796301971904593`*^9}, {3.6796303480198665`*^9, 
   3.6796304825432005`*^9}, {3.679630518573186*^9, 3.679630561197731*^9}, {
   3.679630599805363*^9, 3.679630647885544*^9}, {3.6796306845275145`*^9, 
   3.679630723096918*^9}, {3.679630780335374*^9, 3.6796308318995705`*^9}, {
   3.6796308762420354`*^9, 3.679630880753604*^9}, {3.6796309819044056`*^9, 
   3.679630992015645*^9}, {3.6796310607920427`*^9, 3.6796313031033344`*^9}, {
   3.679632608141875*^9, 3.6796326247756124`*^9}, {3.679632702907218*^9, 
   3.6796327048246255`*^9}, 3.6796327410060396`*^9, 3.6796328185962105`*^9, {
   3.6796330860494957`*^9, 3.679633086764824*^9}, 3.679633195619466*^9, {
   3.679636822809001*^9, 3.6796368548612165`*^9}, {3.6796381052616715`*^9, 
   3.679638111165365*^9}, 3.679638199766878*^9, {3.6796388962179456`*^9, 
   3.679638901678007*^9}, {3.6796393079945135`*^9, 3.6796393137576027`*^9}, 
   3.6796395184626417`*^9, 3.6796396124003696`*^9, {3.6796397021344385`*^9, 
   3.6796397236937017`*^9}, {3.6796398624779577`*^9, 
   3.6796399582211933`*^9}, {3.679640030206514*^9, 3.6796400734702377`*^9}, {
   3.679640118295883*^9, 3.679640145423464*^9}, {3.6796402073439054`*^9, 
   3.6796402092848606`*^9}, {3.679640922269107*^9, 3.6796410033315873`*^9}, {
   3.6796410890859337`*^9, 3.679641096564171*^9}, 3.6796411494755497`*^9, {
   3.679641243170951*^9, 3.6796412435388775`*^9}, {3.679641295039917*^9, 
   3.6796413128188562`*^9}, {3.6796422952694135`*^9, 3.6796422979000635`*^9}, 
   3.6796427044889193`*^9, {3.679642742669354*^9, 3.6796427498972616`*^9}, {
   3.679643235174306*^9, 3.6796432414089518`*^9}, {3.679643369890033*^9, 
   3.679643395817974*^9}, {3.6796434619315357`*^9, 3.6796434697323446`*^9}, 
   3.6796689674167347`*^9, 3.6796691826766787`*^9, {3.679669578443344*^9, 
   3.679669611249378*^9}, {3.679669647300379*^9, 3.679669648338973*^9}, {
   3.679669716794397*^9, 3.6796697227454233`*^9}, {3.6796894154479575`*^9, 
   3.679689416533184*^9}, {3.67968950164172*^9, 3.679689533886369*^9}, {
   3.6796896066543674`*^9, 3.679689624516369*^9}, {3.679696915890417*^9, 
   3.679696925987517*^9}, 3.6796973841416416`*^9, {3.6796974288145046`*^9, 
   3.67969746715897*^9}, {3.679697657643715*^9, 3.679697677373383*^9}, {
   3.6796977281388755`*^9, 3.679697728344021*^9}, {3.6796979278983936`*^9, 
   3.6796979426840024`*^9}, 3.679698063217023*^9, {3.6796981201769876`*^9, 
   3.6796981207592382`*^9}, 3.6796981693026776`*^9, {3.679698224443535*^9, 
   3.6796982719885674`*^9}, {3.6796984155256834`*^9, 
   3.6796984353665447`*^9}, {3.679698512511097*^9, 3.6796985714559364`*^9}, {
   3.679698946773596*^9, 3.679698947342001*^9}, 3.679698991316742*^9, {
   3.67969913389217*^9, 3.6796991687487817`*^9}, {3.6796992417493362`*^9, 
   3.6796992454449196`*^9}, {3.679699320565439*^9, 3.6796993222613077`*^9}, {
   3.6796995600095696`*^9, 3.679699597285382*^9}, {3.6796996470317693`*^9, 
   3.679699647561762*^9}, 3.679699756824847*^9, {3.679699799042574*^9, 
   3.6796998332225275`*^9}, {3.67969993106539*^9, 3.6796999429172983`*^9}, 
   3.6797003827306647`*^9, 3.6797004668694057`*^9, {3.6797008288435183`*^9, 
   3.6797008784878387`*^9}, {3.679701129512748*^9, 3.679701192695118*^9}, {
   3.679701625047138*^9, 3.6797016557029057`*^9}, {3.6797026746922855`*^9, 
   3.679702703795149*^9}, 3.679702840488648*^9, {3.679703222599654*^9, 
   3.679703247828209*^9}, {3.6797032791291466`*^9, 3.679703323241894*^9}, 
   3.679703413723243*^9, {3.679703518835743*^9, 3.6797035518828087`*^9}, 
   3.679703600970954*^9, {3.6797036582290573`*^9, 3.679703749837555*^9}, {
   3.6797037826281595`*^9, 3.6797037892693443`*^9}, 3.679703963261508*^9, {
   3.6797040581588297`*^9, 3.6797040969364395`*^9}, {3.6797041640117598`*^9, 
   3.679704167970629*^9}, {3.679705855679449*^9, 3.67970585711547*^9}, {
   3.67970591576889*^9, 3.679706038948081*^9}, {3.679708843109849*^9, 
   3.679708870191142*^9}, {3.679713921548645*^9, 3.6797139341590242`*^9}, {
   3.6797139662337217`*^9, 3.6797140056032815`*^9}, {3.6797140791731453`*^9, 
   3.679714079406577*^9}, {3.6797142454828806`*^9, 3.679714245722031*^9}, {
   3.6797142996902294`*^9, 3.6797143153422513`*^9}, {3.67971452186598*^9, 
   3.679714559762282*^9}, {3.6797146755954065`*^9, 3.67971469890164*^9}, 
   3.6797148503958087`*^9, 3.679714977559396*^9, 3.6797151604890275`*^9, {
   3.6797152053072395`*^9, 3.679715206668662*^9}, 3.6797153101692505`*^9, {
   3.6797153436316414`*^9, 3.679715403067338*^9}, {3.67971543638934*^9, 
   3.6797154392021856`*^9}, 3.679715476533226*^9, {3.679715723001328*^9, 
   3.6797157486412773`*^9}, {3.679715786863371*^9, 3.679715787590889*^9}, {
   3.6797158802205343`*^9, 3.6797159555857716`*^9}, 3.679716362465805*^9, {
   3.679716703890646*^9, 3.6797167223571234`*^9}, 3.6797167630720234`*^9, {
   3.6797168826022673`*^9, 3.679716905476675*^9}, {3.679716959739444*^9, 
   3.6797169607346506`*^9}, 3.6797172065025396`*^9, 3.6797173886262655`*^9, 
   3.679717515601971*^9, {3.6797175791901855`*^9, 3.6797176016227293`*^9}, 
   3.679717675053009*^9, 3.6797177262419944`*^9, 3.679717772943386*^9, 
   3.6797178349709935`*^9, 3.6797179242560735`*^9, {3.6797182420774117`*^9, 
   3.6797182542665386`*^9}, 3.679718577699974*^9, {3.679718713543413*^9, 
   3.67971873125834*^9}, {3.679719893810951*^9, 3.6797199011219935`*^9}, {
   3.6797200862006917`*^9, 3.6797204548055944`*^9}, {3.6797205369140263`*^9, 
   3.6797205836840286`*^9}, {3.679762059938484*^9, 3.679762061948435*^9}, {
   3.6797649658054504`*^9, 3.679765111101728*^9}, {3.679765256815031*^9, 
   3.6797652590191245`*^9}, {3.6797675757384644`*^9, 3.679767576494508*^9}, {
   3.6797676215938377`*^9, 3.6797676218960686`*^9}, {3.6797679100443244`*^9, 
   3.6797679147521744`*^9}, {3.679767991706562*^9, 3.67976799254766*^9}, 
   3.679768229421924*^9, 3.6797686331128864`*^9, {3.6797686674537396`*^9, 
   3.679768696692439*^9}, {3.679769026330787*^9, 3.6797690266044817`*^9}, {
   3.679769069636036*^9, 3.6797691424114714`*^9}, {3.6797692161886654`*^9, 
   3.679769247230071*^9}, {3.679785868403954*^9, 3.679785923975217*^9}, {
   3.6797864241752973`*^9, 3.679786427391337*^9}, 3.6797865308489513`*^9, {
   3.679787026876994*^9, 3.679787091057642*^9}, {3.6797872676578035`*^9, 
   3.67978727618652*^9}, {3.6797888267038*^9, 3.6797888271886635`*^9}, {
   3.679788874263665*^9, 3.679788903860606*^9}, {3.679788951743243*^9, 
   3.6797889565117097`*^9}, {3.679789125318805*^9, 3.679789125887211*^9}, 
   3.679789203243132*^9, {3.679789638750018*^9, 3.6797896481035337`*^9}, {
   3.6797897882940125`*^9, 3.6797898268548746`*^9}, {3.6797899436852636`*^9, 
   3.6797899460551934`*^9}, {3.679790151723161*^9, 3.679790152838601*^9}, {
   3.6797901956682396`*^9, 3.6797901988605103`*^9}, {3.679790403387925*^9, 
   3.679790414810252*^9}, {3.6797905415881596`*^9, 3.679790557363272*^9}, 
   3.679790778555807*^9, {3.6797909196470327`*^9, 3.679790936028655*^9}, 
   3.6797909965572653`*^9, 3.6797911247257423`*^9, {3.6797913238581343`*^9, 
   3.6797913268516455`*^9}, {3.679791425042281*^9, 3.6797914271973467`*^9}, {
   3.6797918708813577`*^9, 3.679791921754984*^9}, {3.6797919706705966`*^9, 
   3.679791996907383*^9}, 3.679792136862709*^9, {3.6797931260397387`*^9, 
   3.679793134170582*^9}, {3.679793259680732*^9, 3.6797932658775206`*^9}, {
   3.679793423391759*^9, 3.6797934260371437`*^9}, {3.6798486052809143`*^9, 
   3.679848606322049*^9}, {3.679858141346596*^9, 3.6798581415972986`*^9}, {
   3.6798612253545046`*^9, 3.6798612320555706`*^9}, {3.6798613737766914`*^9, 
   3.679861375599493*^9}, {3.67986143416413*^9, 3.679861491461581*^9}, {
   3.679861586701912*^9, 3.679861670988108*^9}, 3.679900251912736*^9, {
   3.679900339057995*^9, 3.679900351148899*^9}, 3.6799526487825766`*^9, {
   3.6799595144785175`*^9, 3.679959529335696*^9}, {3.6799595961398683`*^9, 
   3.6799596361239014`*^9}, 3.6799596758825655`*^9, {3.679959724824647*^9, 
   3.6799597477806425`*^9}, {3.6799597961708384`*^9, 3.679959796877688*^9}, {
   3.679959831234354*^9, 3.6799599293769646`*^9}, 3.679959960158223*^9, {
   3.6799600428213615`*^9, 3.6799600456258044`*^9}, 3.6799601400006638`*^9, {
   3.679962899854965*^9, 3.6799629275882387`*^9}, 3.6799630401151114`*^9, {
   3.679963123297063*^9, 3.67996312557353*^9}, {3.6799632063814416`*^9, 
   3.679963249415225*^9}, 3.6799633049761467`*^9, 3.67996362582562*^9, 
   3.6799639037271233`*^9, 3.6799639838361025`*^9, 3.6799640754450274`*^9, 
   3.679964212402731*^9, {3.679964278928239*^9, 3.67996431559763*^9}, {
   3.679964381500599*^9, 3.6799644197210283`*^9}, {3.679964459135063*^9, 
   3.679964486615533*^9}, {3.6799645168888845`*^9, 3.6799645962993746`*^9}, {
   3.6799655579187765`*^9, 3.6799655708897257`*^9}, {3.6799656134256*^9, 
   3.679965811282689*^9}, {3.679966100756736*^9, 3.6799661012631135`*^9}, 
   3.6799681149582415`*^9, {3.6799684413972936`*^9, 3.6799684467481513`*^9}, 
   3.679972191114583*^9, {3.6799722532401485`*^9, 3.6799722581019278`*^9}, {
   3.6799726000209274`*^9, 3.6799726178559637`*^9}, {3.679972771015503*^9, 
   3.6799727722433863`*^9}, {3.679972820504582*^9, 3.6799728234167814`*^9}, {
   3.6799824346800013`*^9, 3.679982437136825*^9}, {3.6799838398865137`*^9, 
   3.6799838473698373`*^9}, {3.679984131290062*^9, 3.6799841351387167`*^9}, {
   3.6799844205199633`*^9, 3.679984447309037*^9}, {3.6799844981825776`*^9, 
   3.6799845008276014`*^9}},ExpressionUUID->"d3dc5762-0a77-46db-808e-\
064b68a887be"],

Cell[BoxData[
 FrameBox[
  TagBox[
   StyleBox[
    DynamicModuleBox[{Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
     Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
     1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
        Hold[$CellContext`nfrags], 1, ""}, 1, 24, 1}, {{
        Hold[$CellContext`mass], $CellContext`unif, ""}, 
       Dynamic[
        If[$CellContext`nfrags > 
         1, {$CellContext`unif -> "Uniform", $CellContext`random -> 
          "Random", $CellContext`cresce -> "Crescente", 
          
          If[$CellContext`nfrags > 2, $CellContext`cresce2 -> 
           "Crescente(2)"], $CellContext`decresce -> "Decrescente", 
          
          If[$CellContext`nfrags > 2, $CellContext`decresce2 -> 
           "Decrescente(2)"]}, {$CellContext`unif -> "Uniform"}]]}, {{
        Hold[$CellContext`UnifAngle], True, "         "}, {True, False}}, {{
        Hold[$CellContext`RandomAngle], False, "     "}, {True, False}}, {{
        Hold[$CellContext`Q2], False, ""}, {True, False}}, {{
        Hold[$CellContext`Q3], False, ""}, {True, False}}, {{
        Hold[$CellContext`Q1], False, ""}, {True, False}}, {{
        Hold[$CellContext`Q4], False, ""}, {True, False}}, {{
        Hold[$CellContext`MassDecal], $CellContext`DecalOFF, 
        ""}, {$CellContext`DecalOFF -> Style["Off", 10], $CellContext`DecalON -> 
        Style["On", 10]}}, {{
        Hold[$CellContext`MassValues], $CellContext`ValuesOFF, 
        ""}, {$CellContext`ValuesOFF -> 
        Style["Off", 10], $CellContext`ValuesON -> Style["On", 10]}}, {{
        Hold[$CellContext`DisplayCM], $CellContext`CMOFF, 
        ""}, {$CellContext`CMOFF -> Style["Off", 10], $CellContext`CMON -> 
        Style["On", 10]}}, {{
        Hold[$CellContext`JoinPoints], $CellContext`JOINOFF, 
        ""}, {$CellContext`JOINOFF -> Style["Off", 10], $CellContext`JOINON -> 
        Style["On", 10]}}, {{
        Hold[$CellContext`axis2], False, ""}, {
       False -> Style["Off", 10], True -> Style["On", 10]}}, {{
        Hold[$CellContext`aspect2], 1, ""}, {
       1 -> Style["1x1", 10], Automatic -> Style["Realistic", 10]}}, {{
        Hold[$CellContext`OpacityButton], $CellContext`OpacityOff, 
        ""}, {$CellContext`OpacityOff -> 
        Style["Off", 10], $CellContext`OpacityOn -> Style["On", 10]}}, {{
        Hold[$CellContext`ColorType], $CellContext`GRAY, 
        ""}, {$CellContext`GRAY -> Style["Off", 10], $CellContext`HUE -> 
        Style["On", 10]}}, {{
        Hold[$CellContext`ShowButton], {1, 1, 1}, ""}, {{1, 1, 1} -> 
        Style["1x1x1", 10], Automatic -> Style["Realistic", 10]}}, {{
        Hold[$CellContext`XxZ], True, ""}, {True, False}}, {{
        Hold[$CellContext`Xxt], True, ""}, {True, False}}, {{
        Hold[$CellContext`MxZ], True, ""}, {True, False}}, {{
        Hold[$CellContext`Mxt], True, ""}, {True, False}}, {{
        Hold[$CellContext`TxZ], True, ""}, {True, False}}, {{
        Hold[$CellContext`Txt], True, ""}, {True, False}}, {{
        Hold[$CellContext`VxZ], True, ""}, {True, False}}, {{
        Hold[$CellContext`Vxt], True, ""}, {True, False}}, {{
        Hold[$CellContext`AllZ], True, ""}, {True, False}}, {{
        Hold[$CellContext`Allt], True, ""}, {True, False}}, {{
        Hold[$CellContext`AllFrags], True, ""}, {True, False}}, {{
        Hold[$CellContext`LeftUp], True, ""}, {True, False}}, {{
        Hold[$CellContext`RightUp], True, ""}, {True, False}}, {{
        Hold[$CellContext`LeftBot], True, ""}, {True, False}}, {{
        Hold[$CellContext`RightBot], True, ""}, {True, False}}, {{
        Hold[$CellContext`PlotArt], None, ""}, {
       None -> "None", $CellContext`Day -> "Day", $CellContext`Night -> 
        "Night"}}, {
       Hold[
        Framed[
         Column[{
           Framed[
            Grid[{{
               Column[{
                 Style[" Object Parameters", 12, Bold], 
                 Column[{
                   Style[" Object Mass"], 
                   Labeled[
                    InputField[
                    Dynamic[$CellContext`M], Number, FieldHint -> 
                    "10-15000000", FieldSize -> {7.5, 1.05}, ImageMargins -> 
                    0], "kg", Right]}], 
                 Column[{
                   Style[" Air Resit. Coeff."], 
                   Labeled[
                    InputField[
                    Dynamic[$CellContext`Dc], Number, FieldHint -> "0-3", 
                    FieldSize -> {7.5, 1.05}], "Smth", Right]}], 
                 Column[{
                   Style[" Vaporization Heat"], 
                   Labeled[
                    InputField[
                    Dynamic[$CellContext`Lv], Number, FieldHint -> 
                    "1000-50000", FieldSize -> {7.5, 1.05}], "J/kg", Right]}], 
                 Column[{
                   Style[" Density"], 
                   Labeled[
                    InputField[
                    Dynamic[$CellContext`rho], Number, FieldHint -> 
                    "2000-3500", FieldSize -> {7.5, 1.05}], 
                    "kg/\!\(\*SuperscriptBox[\(m\), \(3\)]\)", Right]}], 
                 Column[{
                   Style[" Heat Capacity"], 
                   Labeled[
                    DynamicModule[{$CellContext`cp = 500}, 
                    InputField[
                    Dynamic[$CellContext`cp], Number, FieldHint -> "400-900", 
                    FieldSize -> {7.5, 1.05}], DynamicModuleValues :> {}], 
                    "J/(kg K)", Right]}], 
                 Column[{
                   Style[" Entrance Parameters    ", 12, Bold], 
                   Column[{
                    Style[" Height"], 
                    Labeled[
                    InputField[
                    Dynamic[$CellContext`H], Number, FieldHint -> "0-100000", 
                    ContinuousAction -> True, FieldSize -> {7.5, 1.05}], "m", 
                    Right]}], 
                   Column[{
                    Style[" Entrance Velocity"], 
                    Labeled[
                    InputField[
                    Dynamic[$CellContext`VE], Number, FieldHint -> "10-20000",
                     FieldSize -> {7.5, 1.05}], "m/s", Right]}], 
                   Column[{
                    Style[" Entrance Angle"], 
                    Labeled[
                    InputField[
                    Dynamic[$CellContext`\[Phi]E], Number, FieldHint -> 
                    "90-180", FieldSize -> {7.5, 1.05}], "\[Degree]", 
                    Right]}]}, Left, 
                  Dividers -> {
                   None, {2 -> Dynamic[$CellContext`MyColor], 1 -> 
                    Dynamic[$CellContext`MyColor]}}, Spacings -> {0.5, 1}]}, 
                Left, Dividers -> {
                 None, {2 -> Dynamic[$CellContext`MyColor], 1 -> 
                   Dynamic[$CellContext`MyColor]}}, Spacings -> {0.5, 1.}], 
               Column[{
                 Style[" Fragmentation Parameters", 12, Bold], 
                 Column[{
                   Style[" Fragmentation Height"], 
                   Labeled[
                    InputField[
                    Dynamic[$CellContext`HFrag], Number, FieldHint -> 
                    "0-100000", FieldSize -> {7.5, 1.05}], "m", Right]}], 
                 Column[{
                   Style[" Fragmentation Energy"], 
                   Labeled[
                    InputField[
                    Dynamic[$CellContext`Efr], Number, FieldHint -> 
                    "0-1000000", FieldSize -> {7.5, 1.05}], "J", Right]}], 
                 Column[{
                   Style["Number of Fragments"], 
                   Manipulate`Place[1]}], 
                 Column[{
                   Style["Mass Distribution"], 
                   Manipulate`Place[2]}], 
                 Column[{"Fragments Direction", "", 
                   Column[{
                    Row[{
                    Column[{"       Uniform", 
                    Manipulate`Place[3]}], 
                    Column[{"   Random", 
                    Manipulate`Place[4]}]}], Null, 
                    Column[{"        Spread on Quadrant", 
                    Row[{
                    Column[{
                    Labeled[
                    Manipulate`Place[5], 
                    "         \!\(\*SuperscriptBox[\(2\), \(nd\)]\)", Left, 
                    Spacings -> {0, 0}], 
                    Labeled[
                    Manipulate`Place[6], 
                    "         \!\(\*SuperscriptBox[\(3\), \(rd\)]\) ", Left, 
                    Spacings -> {0, 0}]}], 
                    Column[{
                    Labeled[
                    Manipulate`Place[7], 
                    "\!\(\*SuperscriptBox[\(1\), \(\(st\)\(\\ \)\)]\)", 
                    Right], 
                    Labeled[
                    Manipulate`Place[8], 
                    "\!\(\*SuperscriptBox[\(4\), \(th\)]\)", Right]}]}]}], 
                    ""}, Alignment -> Center, Spacings -> {0, -0.2}]}, 
                  Alignment -> Left, Spacings -> {0, 0}], 
                 Labeled[
                  Framed[
                   Grid[{{"#", "Param.", "Value"}, {
                    Dynamic[
                    ToString[$CellContext`fragID]], "Height", 
                    Dynamic[
                    Part[$CellContext`Zi, -1]]}, {
                    Dynamic[
                    ToString[$CellContext`fragID]], "Mass", 
                    Dynamic[$CellContext`dm]}}, Alignment -> Left, Background -> 
                    Dynamic[
                    Lighter[$CellContext`MyColor, 0.9]], ItemStyle -> 
                    Directive[FontSize -> 11.5, 
                    GrayLevel[0]]], Background -> Dynamic[
                    Lighter[$CellContext`MyColor, 0.9]], FrameStyle -> Dynamic[
                    Lighter[$CellContext`MyColor, 0.1]], RoundingRadius -> 2, 
                   Alignment -> Left, ImageSize -> {160, Automatic}], 
                  Style["Simulation Evolution", 12], Top]}, Left, 
                Dividers -> {
                 None, {1 -> Dynamic[$CellContext`MyColor], 2 -> 
                   Dynamic[$CellContext`MyColor], -2 -> 
                   Dynamic[$CellContext`MyColor]}}, Spacings -> {0.5, 1.}], 
               Column[{
                 Style[" Definitions", 12, Bold], 
                 Column[{
                   Style[" Time Step"], 
                   Labeled[
                    InputField[
                    Dynamic[$CellContext`TimeStep], Number, FieldHint -> 
                    "10-15000000", FieldSize -> {7.5, 1.05}, ImageMargins -> 
                    0], "s", Right]}], 
                 Column[{
                   Style[" Mass Limit"], 
                   Labeled[
                    InputField[
                    Dynamic[$CellContext`MTolerance], Number, FieldHint -> 
                    "10-15000000", FieldSize -> {7.5, 1.05}, ImageMargins -> 
                    0], "kg", Right]}], 
                 Column[{
                   Style[" Plot Options", 12, Bold], 
                   Column[{
                    Style["Top View", 10, Bold], 
                    Labeled[
                    Manipulate`Place[9], "Mass Opacity", Right], 
                    Labeled[
                    Manipulate`Place[10], "Mass Values", Right], 
                    Labeled[
                    Manipulate`Place[11], "Display CM", Right], 
                    Labeled[
                    Manipulate`Place[12], "Join Dots", Right], 
                    Labeled[
                    Manipulate`Place[13], "Display Axis", Right], 
                    Labeled[
                    Manipulate`Place[14], "Aspect", Right]}], 
                   Column[{
                    Style["3D Plots", 10, Bold], 
                    Labeled[
                    Manipulate`Place[15], "Mass Evol.", Right], 
                    Labeled[
                    Manipulate`Place[16], "Color Map", Right], 
                    Labeled[
                    Manipulate`Place[17], "Aspect", Right]}]}, Left, 
                  Dividers -> {None, {3 -> {
                    Dashing[{0, Small}], 
                    Dynamic[$CellContext`MyColor]}, 2 -> 
                    Dynamic[$CellContext`MyColor], 1 -> 
                    Dynamic[$CellContext`MyColor]}}, Spacings -> {0.5, 0.6}]},
                 Left, 
                Dividers -> {
                 None, {2 -> Dynamic[$CellContext`MyColor], 1 -> 
                   Dynamic[$CellContext`MyColor]}}, Spacings -> {0.5, 1.}, 
                Background -> Dynamic[
                  Lighter[$CellContext`MyColor, 0.96]]]}}, 
             Dividers -> {{
               1 -> None, 2 -> Dynamic[$CellContext`MyColor], 3 -> 
                Dynamic[$CellContext`MyColor], 4 -> None}, None}, Alignment -> 
             Top, Spacings -> {1, 0}, Background -> Dynamic[
               Lighter[$CellContext`MyColor, 0.96]]], FrameStyle -> Dynamic[
              Lighter[$CellContext`MyColor, 0.8]], Background -> Dynamic[
              Lighter[$CellContext`MyColor, 0.96]], RoundingRadius -> 5, 
            ImageSize -> {475, Automatic}], 
           Framed[
            Row[{
              Column[{
                Style[" Export Results ", 12, Bold], 
                Row[{"Table of Results ", 
                  InputField[
                   Dynamic[$CellContext`NameOfFile], String, FieldHint -> 
                   "Name of File", FieldSize -> Small], 
                  Button[
                   Style["pdf", 10], 
                   Export[If[DirectoryQ[$CellContext`OutputDir] == False, 
                    CreateDirectory[$CellContext`OutputDir]]; 
                    StringJoin[$CellContext`OutputFileName, 
                    ".pdf"], $CellContext`MeteoPdf], ImageSize -> {27, 20}, 
                   FrameMargins -> 0], 
                  Button[
                   Style["xls", 10], 
                   Export[If[DirectoryQ[$CellContext`OutputDir] == False, 
                    CreateDirectory[$CellContext`OutputDir]]; 
                    StringJoin[$CellContext`OutputFileName, 
                    ".xls"], $CellContext`MeteoTable], ImageSize -> {27, 20}, 
                   FrameMargins -> 0], 
                  Button[
                   Style["png", 10], 
                   Export[If[DirectoryQ[$CellContext`OutputDir] == False, 
                    CreateDirectory[$CellContext`OutputDir]]; 
                    StringJoin[$CellContext`OutputFileName, 
                    ".png"], $CellContext`MeteoPNG], ImageSize -> {27, 20}, 
                   FrameMargins -> 0]}, "  "], 
                Row[{"Evolution Plots", 
                  Row[{
                    Column[{" ", 
                    Row[{" All", 
                    Manipulate`Place[26]}], 
                    Row[{" All", 
                    Manipulate`Place[27]}]}, Spacings -> 0], " ", 
                    Row[{
                    Column[{"   X", 
                    Manipulate`Place[18], 
                    Manipulate`Place[19]}, Spacings -> 0], 
                    Column[{"   M", 
                    Manipulate`Place[20], 
                    Manipulate`Place[21]}, Spacings -> 0], 
                    Column[{"   T", 
                    Manipulate`Place[22], 
                    Manipulate`Place[23]}, Spacings -> 0], 
                    Column[{"   V", 
                    Manipulate`Place[24], 
                    Manipulate`Place[25]}, Spacings -> 0], 
                    
                    Column[{"", "  Height  ", "  Time  "}, Spacings -> 0, 
                    Alignment -> Left]}]}], 
                  Column[{"", 
                    Dynamic[
                    Button[
                    Style["eps", 10], 
                    If[DirectoryQ[$CellContext`OutputDir] == False, 
                    CreateDirectory[$CellContext`OutputDir]]; And[
                    If[
                    Count[{$CellContext`Xxt, $CellContext`Mxt, \
$CellContext`Txt, $CellContext`Vxt}, True] != 0, 
                    Export[
                    StringJoin[$CellContext`TimeName, ".eps"], 
                    If[
                    Inequality[0, Less, 
                    
                    Count[{$CellContext`Xxt, $CellContext`Mxt, \
$CellContext`Txt, $CellContext`Vxt}, True], LessEqual, 3], 
                    Dynamic[
                    Labeled[
                    GraphicsRow[
                    Extract[$CellContext`TimeExpo, 
                    
                    Position[{$CellContext`Xxt, $CellContext`Mxt, \
$CellContext`Txt, $CellContext`Vxt}, True]], ImageSize -> 
                    Count[{$CellContext`XxZ, $CellContext`MxZ, \
$CellContext`TxZ, $CellContext`VxZ}, True] 450], 
                    Style["Time Evolution", Bold, 25], Top]], 
                    Labeled[
                    
                    GraphicsGrid[{{$CellContext`RowP1Expo, \
$CellContext`RowP2Expo}, {$CellContext`RowP3Expo, $CellContext`RowP4Expo}}, 
                    ImageSize -> 1500], 
                    Style["Time Evolution", Bold, 25], Top]]]], 
                    If[$CellContext`Allt == True, 
                    Export[
                    StringJoin[$CellContext`TimeName, ".eps"], 
                    Labeled[
                    
                    GraphicsGrid[{{$CellContext`RowP1Expo, \
$CellContext`RowP2Expo}, {$CellContext`RowP3Expo, $CellContext`RowP4Expo}}, 
                    ImageSize -> 1500], 
                    Style["Time Evolution", Bold, 25], Top]]], 
                    If[
                    Count[{$CellContext`XxZ, $CellContext`MxZ, \
$CellContext`TxZ, $CellContext`VxZ}, True] != 0, 
                    Export[
                    StringJoin[$CellContext`ZName, ".eps"], 
                    If[
                    Inequality[0, Less, 
                    
                    Count[{$CellContext`XxZ, $CellContext`MxZ, \
$CellContext`TxZ, $CellContext`VxZ}, True], LessEqual, 3], 
                    Dynamic[
                    Labeled[
                    GraphicsRow[
                    Extract[$CellContext`ZExpo, 
                    
                    Position[{$CellContext`XxZ, $CellContext`MxZ, \
$CellContext`TxZ, $CellContext`VxZ}, True]], ImageSize -> 
                    Count[{$CellContext`XxZ, $CellContext`MxZ, \
$CellContext`TxZ, $CellContext`VxZ}, True] 450], 
                    Style["Height Evolution", Bold, 25], Top]], 
                    Labeled[
                    
                    GraphicsGrid[{{$CellContext`ColP1Expo, \
$CellContext`ColP2Expo}, {$CellContext`ColP3Expo, $CellContext`ColP4Expo}}, 
                    ImageSize -> 1500], 
                    Style["Height Evolution", Bold, 25], Top]]]], 
                    If[$CellContext`AllZ == True, 
                    Export[
                    StringJoin[$CellContext`ZName, ".eps"], 
                    Labeled[
                    
                    GraphicsGrid[{{$CellContext`ColP1Expo, \
$CellContext`ColP2Expo}, {$CellContext`ColP3Expo, $CellContext`ColP4Expo}}, 
                    ImageSize -> 1500], 
                    Style["Height Evolution", Bold, 25], Top]]]], 
                    ImageSize -> {27, 20}, FrameMargins -> 0]]}], "  ", 
                  Column[{"", 
                    Dynamic[
                    Button[
                    Style["png", 10], 
                    If[DirectoryQ[$CellContext`OutputDir] == False, 
                    CreateDirectory[$CellContext`OutputDir]]; And[
                    If[
                    Count[{$CellContext`Xxt, $CellContext`Mxt, \
$CellContext`Txt, $CellContext`Vxt}, True] != 0, 
                    Export[
                    StringJoin[$CellContext`TimeName, ".png"], 
                    If[
                    Inequality[0, Less, 
                    
                    Count[{$CellContext`Xxt, $CellContext`Mxt, \
$CellContext`Txt, $CellContext`Vxt}, True], LessEqual, 3], 
                    Dynamic[
                    Labeled[
                    GraphicsRow[
                    Extract[$CellContext`TimeExpo, 
                    
                    Position[{$CellContext`Xxt, $CellContext`Mxt, \
$CellContext`Txt, $CellContext`Vxt}, True]], ImageSize -> 
                    Count[{$CellContext`XxZ, $CellContext`MxZ, \
$CellContext`TxZ, $CellContext`VxZ}, True] 450], 
                    Style["Time Evolution", Bold, 25], Top]], 
                    Labeled[
                    
                    GraphicsGrid[{{$CellContext`RowP1Expo, \
$CellContext`RowP2Expo}, {$CellContext`RowP3Expo, $CellContext`RowP4Expo}}, 
                    ImageSize -> 1500], 
                    Style["Time Evolution", Bold, 25], Top]]]], 
                    If[$CellContext`Allt == True, 
                    Export[
                    StringJoin[$CellContext`TimeName, ".png"], 
                    Labeled[
                    
                    GraphicsGrid[{{$CellContext`RowP1Expo, \
$CellContext`RowP2Expo}, {$CellContext`RowP3Expo, $CellContext`RowP4Expo}}, 
                    ImageSize -> 1500], 
                    Style["Time Evolution", Bold, 25], Top]]], 
                    If[
                    Count[{$CellContext`XxZ, $CellContext`MxZ, \
$CellContext`TxZ, $CellContext`VxZ}, True] != 0, 
                    Export[
                    StringJoin[$CellContext`ZName, ".png"], 
                    If[
                    Inequality[0, Less, 
                    
                    Count[{$CellContext`XxZ, $CellContext`MxZ, \
$CellContext`TxZ, $CellContext`VxZ}, True], LessEqual, 3], 
                    Dynamic[
                    Labeled[
                    GraphicsRow[
                    Extract[$CellContext`ZExpo, 
                    
                    Position[{$CellContext`XxZ, $CellContext`MxZ, \
$CellContext`TxZ, $CellContext`VxZ}, True]], ImageSize -> 
                    Count[{$CellContext`XxZ, $CellContext`MxZ, \
$CellContext`TxZ, $CellContext`VxZ}, True] 450], 
                    Style["Height Evolution", Bold, 25], Top]], 
                    Labeled[
                    
                    GraphicsGrid[{{$CellContext`ColP1Expo, \
$CellContext`ColP2Expo}, {$CellContext`ColP3Expo, $CellContext`ColP4Expo}}, 
                    ImageSize -> 1500], 
                    Style["Height Evolution", Bold, 25], Top]]]], 
                    If[$CellContext`AllZ == True, 
                    Export[
                    StringJoin[$CellContext`ZName, ".png"], 
                    Labeled[
                    
                    GraphicsGrid[{{$CellContext`ColP1Expo, \
$CellContext`ColP2Expo}, {$CellContext`ColP3Expo, $CellContext`ColP4Expo}}, 
                    ImageSize -> 1500], 
                    Style["Height Evolution", Bold, 25], Top]]]], 
                    ImageSize -> {27, 20}, FrameMargins -> 0]]}]}, Alignment -> 
                 Left]}, 
               Dividers -> {
                2 -> None, {
                 1 -> None, 2 -> None, 3 -> Dynamic[$CellContext`MyColor]}}, 
               Spacings -> {0, 0.4}], "  ", 
              Column[{"", "  Fragmentation Plots", 
                Labeled[
                 Manipulate`Place[28], "All", Right], 
                Row[{
                  Grid[{{
                    Manipulate`Place[29], 
                    Manipulate`Place[30]}, {
                    Manipulate`Place[31], 
                    Manipulate`Place[32]}}, Spacings -> 0], "  ", 
                  Dynamic[
                   Button[
                    Style["eps", 10], 
                    If[DirectoryQ[$CellContext`OutputDir] == False, 
                    CreateDirectory[$CellContext`OutputDir]]; And[
                    If[
                    Count[{$CellContext`LeftUp, $CellContext`RightUp, \
$CellContext`LeftBot, $CellContext`RightBot}, True] != 0, 
                    Export[
                    StringJoin[$CellContext`FragsName, ".eps"], 
                    If[
                    Inequality[0, Less, 
                    
                    Count[{$CellContext`LeftUp, $CellContext`RightUp, \
$CellContext`LeftBot, $CellContext`RightBot}, True], LessEqual, 3], 
                    Dynamic[
                    GraphicsRow[
                    Extract[$CellContext`mainExpo, 
                    
                    Position[{$CellContext`LeftUp, $CellContext`RightUp, \
$CellContext`LeftBot, $CellContext`RightBot}, True]], ImageSize -> 
                    Count[{$CellContext`LeftUp, $CellContext`RightUp, \
$CellContext`LeftBot, $CellContext`RightBot}, True] 250]], 
                    
                    GraphicsGrid[{{$CellContext`RegularView, \
$CellContext`LeftView}, {$CellContext`FrontalView, $CellContext`TopView}}, 
                    ImageSize -> 500]]]], 
                    If[$CellContext`AllFrags == True, 
                    Export[
                    StringJoin[$CellContext`FragsName, ".eps"], 
                    
                    GraphicsGrid[{{$CellContext`RegularView, \
$CellContext`LeftView}, {$CellContext`FrontalView, $CellContext`TopView}}, 
                    ImageSize -> 500]]]], ImageSize -> {27, 20}, FrameMargins -> 
                    0]], "  ", 
                  Dynamic[
                   Button[
                    Style["png", 10], 
                    If[DirectoryQ[$CellContext`OutputDir] == False, 
                    CreateDirectory[$CellContext`OutputDir]]; And[
                    If[
                    Count[{$CellContext`LeftUp, $CellContext`RightUp, \
$CellContext`LeftBot, $CellContext`RightBot}, True] != 0, 
                    Export[
                    StringJoin[$CellContext`FragsName, ".png"], 
                    If[
                    Inequality[0, Less, 
                    
                    Count[{$CellContext`LeftUp, $CellContext`RightUp, \
$CellContext`LeftBot, $CellContext`RightBot}, True], LessEqual, 3], 
                    Dynamic[
                    GraphicsRow[
                    Extract[$CellContext`mainExpo, 
                    
                    Position[{$CellContext`LeftUp, $CellContext`RightUp, \
$CellContext`LeftBot, $CellContext`RightBot}, True]], ImageSize -> 
                    Count[{$CellContext`LeftUp, $CellContext`RightUp, \
$CellContext`LeftBot, $CellContext`RightBot}, True] 250]], 
                    
                    GraphicsGrid[{{$CellContext`RegularView, \
$CellContext`LeftView}, {$CellContext`FrontalView, $CellContext`TopView}}, 
                    ImageSize -> 500]]]], 
                    If[$CellContext`AllFrags == True, 
                    Export[
                    StringJoin[$CellContext`FragsName, ".png"], 
                    
                    GraphicsGrid[{{$CellContext`RegularView, \
$CellContext`LeftView}, {$CellContext`FrontalView, $CellContext`TopView}}, 
                    ImageSize -> 500]]]], ImageSize -> {27, 20}, FrameMargins -> 
                    0]]}]}, Dividers -> {1 -> Dynamic[$CellContext`MyColor]}, 
               Alignment -> Left, Spacings -> {0.2, 0.2}]}, Alignment -> 
             Bottom], FrameStyle -> Dynamic[
              Lighter[$CellContext`MyColor, 0.8]], Background -> Dynamic[
              Lighter[$CellContext`MyColor, 0.96]], RoundingRadius -> 5, 
            ImageSize -> {475, Automatic}], 
           Grid[{{
              Labeled[
               ColorSlider[
                
                Dynamic[$CellContext`MyColor, 
                 Initialization :> ($CellContext`MyColor := Gray)], 
                ImageSize -> {140, 30}, ImageMargins -> {{0, 0}, {0, 0}}], 
               Style["Background Color", Bold], Top], 
              Labeled[
               Manipulate`Place[33], 
               Style["Plot Art", Bold], Top]}}, Alignment -> Center, 
            Dividers -> {2 -> Dynamic[$CellContext`MyColor], None}, 
            Spacings -> {20.9, 1}]}], Background -> Dynamic[
           Lighter[$CellContext`MyColor, 0.69]], RoundingRadius -> 5, 
         FrameStyle -> Dynamic[
           Lighter[$CellContext`MyColor, 0.9]], Alignment -> Center, 
         ImageMargins -> {{0, 0}, {0, 5}}, 
         ImageSize -> {Automatic, Automatic}]], 
       Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = Automatic, 
     Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
     False, $CellContext`nfrags$19863$$ = 0, $CellContext`UnifAngle$19864$$ = 
     False, $CellContext`RandomAngle$19865$$ = 
     False, $CellContext`Q2$19866$$ = False, $CellContext`Q3$19867$$ = 
     False, $CellContext`Q1$19868$$ = False, $CellContext`Q4$19869$$ = 
     False, $CellContext`MassDecal$19870$$ = 
     False, $CellContext`MassValues$19871$$ = 
     False, $CellContext`DisplayCM$19872$$ = 
     False, $CellContext`JoinPoints$19873$$ = 
     False, $CellContext`axis2$19874$$ = False, $CellContext`aspect2$19875$$ =
      False}, 
     DynamicBox[Manipulate`ManipulateBoxes[
      2, StandardForm, 
       "Variables" :> {$CellContext`AllFrags = True, $CellContext`Allt = 
         True, $CellContext`AllZ = True, $CellContext`aspect2 = 
         1, $CellContext`axis2 = 
         False, $CellContext`ColorType = $CellContext`GRAY, \
$CellContext`DisplayCM = $CellContext`CMOFF, $CellContext`JoinPoints = \
$CellContext`JOINOFF, $CellContext`LeftBot = True, $CellContext`LeftUp = 
         True, $CellContext`mass = $CellContext`unif, $CellContext`MassDecal = \
$CellContext`DecalOFF, $CellContext`MassValues = $CellContext`ValuesOFF, \
$CellContext`Mxt = True, $CellContext`MxZ = True, $CellContext`nfrags = 
         1, $CellContext`OpacityButton = $CellContext`OpacityOff, \
$CellContext`PlotArt = None, $CellContext`Q1 = False, $CellContext`Q2 = 
         False, $CellContext`Q3 = False, $CellContext`Q4 = 
         False, $CellContext`RandomAngle = False, $CellContext`RightBot = 
         True, $CellContext`RightUp = 
         True, $CellContext`ShowButton = {1, 1, 1}, $CellContext`Txt = 
         True, $CellContext`TxZ = True, $CellContext`UnifAngle = 
         True, $CellContext`Vxt = True, $CellContext`VxZ = 
         True, $CellContext`Xxt = True, $CellContext`XxZ = True}, 
       "ControllerVariables" :> {
         Hold[$CellContext`nfrags, $CellContext`nfrags$19863$$, 0], 
         Hold[$CellContext`UnifAngle, $CellContext`UnifAngle$19864$$, False], 
         Hold[$CellContext`RandomAngle, $CellContext`RandomAngle$19865$$, 
          False], 
         Hold[$CellContext`Q2, $CellContext`Q2$19866$$, False], 
         Hold[$CellContext`Q3, $CellContext`Q3$19867$$, False], 
         Hold[$CellContext`Q1, $CellContext`Q1$19868$$, False], 
         Hold[$CellContext`Q4, $CellContext`Q4$19869$$, False], 
         Hold[$CellContext`MassDecal, $CellContext`MassDecal$19870$$, False], 
         Hold[$CellContext`MassValues, $CellContext`MassValues$19871$$, 
          False], 
         Hold[$CellContext`DisplayCM, $CellContext`DisplayCM$19872$$, False], 
         Hold[$CellContext`JoinPoints, $CellContext`JoinPoints$19873$$, 
          False], 
         Hold[$CellContext`axis2, $CellContext`axis2$19874$$, False], 
         Hold[$CellContext`aspect2, $CellContext`aspect2$19875$$, False]}, 
       "OtherVariables" :> {
        Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
         Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
         Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
         Typeset`initDone$$, Typeset`skipInitDone$$}, 
       "Body" :> (If[Total[$CellContext`MassAll] == 0, 
          Goto[$CellContext`SkipVerification]]; 
        If[{$CellContext`timetepVerif, $CellContext`masstoleranceVerif, \
$CellContext`massType, 
            Part[$CellContext`EvolMassAll, 1, 1], 
            Length[$CellContext`FAll], 
            Part[
             Part[$CellContext`EvolVel, 1], 1], 
            Part[
             Part[
              Part[$CellContext`FAll, 1], 
              1], -1], $CellContext`HFragValue, $CellContext`FragAngleList, \
$CellContext`dcType, $CellContext`phiType, $CellContext`energyType, 
            ToString[$CellContext`OB], 
            ToString[$CellContext`CT], 
            ToString[$CellContext`MD], 
            ToString[$CellContext`MV], 
            ToString[$CellContext`DisplayCM], 
            ToString[$CellContext`JoinPoints], 
            
            ToString[$CellContext`axis2]} == {$CellContext`TimeStep, \
$CellContext`MTolerance, $CellContext`mass, $CellContext`M, 
            
            If[$CellContext`nfrags == 1, 1, $CellContext`nfrags + 
             1], $CellContext`VE, $CellContext`H, $CellContext`HFrag, \
{$CellContext`UnifAngle, $CellContext`RandomAngle, $CellContext`Q1, \
$CellContext`Q2, $CellContext`Q3, $CellContext`Q4}, $CellContext`Dc, \
$CellContext`\[Phi]E, $CellContext`Efr, 
            ToString[$CellContext`OpacityButton], 
            ToString[$CellContext`ColorType], 
            ToString[$CellContext`MassDecal], 
            ToString[$CellContext`MassValues], 
            ToString[$CellContext`D2], 
            ToString[$CellContext`J2], 
            ToString[$CellContext`AX]}, 
          Goto[$CellContext`PerformingPlots]]; 
        If[{$CellContext`timetepVerif, $CellContext`masstoleranceVerif, \
$CellContext`massType, 
            Part[$CellContext`EvolMassAll, 1, 1], 
            Length[$CellContext`FAll], 
            Part[
             Part[$CellContext`EvolVel, 1], 1], 
            Part[
             Part[
              Part[$CellContext`FAll, 1], 
              1], -1], $CellContext`HFragValue, $CellContext`FragAngleList, \
$CellContext`dcType, $CellContext`phiType, $CellContext`energyType, 
            ToString[$CellContext`OB], 
            
            ToString[$CellContext`CT]} == {$CellContext`TimeStep, \
$CellContext`MTolerance, $CellContext`mass, $CellContext`M, 
            
            If[$CellContext`nfrags == 1, 1, $CellContext`nfrags + 
             1], $CellContext`VE, $CellContext`H, $CellContext`HFrag, \
{$CellContext`UnifAngle, $CellContext`RandomAngle, $CellContext`Q1, \
$CellContext`Q2, $CellContext`Q3, $CellContext`Q4}, $CellContext`Dc, \
$CellContext`\[Phi]E, $CellContext`Efr, 
            ToString[$CellContext`OpacityButton], 
            ToString[$CellContext`ColorType]}, 
          Goto[$CellContext`Plotting2]]; 
        If[{$CellContext`timetepVerif, $CellContext`masstoleranceVerif, \
$CellContext`massType, 
            Part[$CellContext`EvolMassAll, 1, 1], 
            Length[$CellContext`FAll], 
            Part[
             Part[$CellContext`EvolVel, 1], 1], 
            Part[
             Part[
              Part[$CellContext`FAll, 1], 
              1], -1], $CellContext`HFragValue, $CellContext`FragAngleList, \
$CellContext`dcType, $CellContext`phiType, $CellContext`energyType} == \
{$CellContext`TimeStep, $CellContext`MTolerance, $CellContext`mass, \
$CellContext`M, 
            
            If[$CellContext`nfrags == 1, 1, $CellContext`nfrags + 
             1], $CellContext`VE, $CellContext`H, $CellContext`HFrag, \
{$CellContext`UnifAngle, $CellContext`RandomAngle, $CellContext`Q1, \
$CellContext`Q2, $CellContext`Q3, $CellContext`Q4}, $CellContext`Dc, \
$CellContext`\[Phi]E, $CellContext`Efr}, 
          Goto[$CellContext`Plotting]]; 
        Label[$CellContext`SkipVerification]; $CellContext`FallData = {}; \
$CellContext`IdealTime[
           Pattern[$CellContext`m, 
            Blank[]], 
           Pattern[$CellContext`v, 
            Blank[]], 
           Pattern[$CellContext`t, 
            Blank[]]] := If[$CellContext`Drag[
             $CellContext`r[$CellContext`m], 
             $CellContext`RhoAr[$CellContext`zi]] != 0, 
           If[$CellContext`t < (2./3.) ($CellContext`m/($CellContext`Drag[
                $CellContext`r[$CellContext`m], 
                $CellContext`RhoAr[$CellContext`zi]] $CellContext`v)), \
$CellContext`t, (2./3.) ($CellContext`m/($CellContext`Drag[
               $CellContext`r[$CellContext`m], 
               $CellContext`RhoAr[$CellContext`zi]] $CellContext`v))], \
$CellContext`t]; $CellContext`AltToposfera = 
         11000.; $CellContext`TempMesosfera = 218.; $CellContext`eta = 
         1.8; $CellContext`g = 9.8; $CellContext`StefanBoltzm = 
         5.6697 10^(-8); $CellContext`\[Theta]E = 0.; $CellContext`Mmol = 
         0.0289644; $CellContext`T0 = 288.15; $CellContext`L = 
         0.0065; $CellContext`p0 = 101326.; $CellContext`R = 
         8.31447; $CellContext`TabelaTemporaria = {{15000., 0.1948, -56.5}, {
           20000., 0.08891, -56.5}, {25000., 0.04008, -51.6}, {30000., 
           0.01841, -46.64}, {40000, 0.003996, -22.8}, {
           50000., 0.001027, -25}, {60000., 0.0003097, -26.13}, {70000., 
           0.00008283, -53.57}, {80000., 0.00001846, -74.51}, {90000., 
           1.*^-6, -80.}, {100000., 1.*^-7, -80.}}; $CellContext`RhoAr[
           Pattern[$CellContext`h, 
            Blank[]]] := 
         If[$CellContext`h < $CellContext`AltToposfera, (($CellContext`p0 (
               1 - ($CellContext`L \
$CellContext`h)/$CellContext`T0)^(($CellContext`g \
$CellContext`Mmol)/($CellContext`R $CellContext`L))) \
$CellContext`Mmol)/($CellContext`R ($CellContext`T0 - $CellContext`L \
$CellContext`h)), 
           If[$CellContext`h < 30000., 
            If[$CellContext`h < 25000., 
             Part[
              Part[$CellContext`TabelaTemporaria, 
               Round[$CellContext`h/10^4 - 0.5]], 2], 
             Part[
              Part[$CellContext`TabelaTemporaria, 3], 2]], 
            Part[
             
             Part[$CellContext`TabelaTemporaria, Round[$CellContext`h/10^4] + 
              1], 2]]]; $CellContext`m[
           Pattern[$CellContext`frac, 
            Blank[]]] := $CellContext`frac $CellContext`M; $CellContext`Vfr[
           Pattern[$CellContext`m, 
            Blank[]]] := If[$CellContext`m != 0, 
           Sqrt[2. ($CellContext`Efr/$CellContext`m)], 0]; $CellContext`r[
           Pattern[$CellContext`m, 
            Blank[]]] := ((3. $CellContext`m)/($CellContext`rho 4. N[Pi]))^(1/
           3.); $CellContext`Drag[
           Pattern[$CellContext`r, 
            Blank[]], 
           Pattern[$CellContext`RhoAr, 
            Blank[]]] := 
         0.5 $CellContext`RhoAr $CellContext`Dc (
           Pi $CellContext`r^2); $CellContext`Temp[
           Pattern[$CellContext`vel, 
            Blank[]], 
           Pattern[$CellContext`h, 
            Blank[]]] := 
         If[$CellContext`h < $CellContext`AltToposfera, ($CellContext`T0 - \
$CellContext`L $CellContext`h) (
             1 + ($CellContext`Mmol $CellContext`vel^2)/(
              2 $CellContext`R ($CellContext`T0 - $CellContext`L \
$CellContext`h)))^(2./7.), 
           If[$CellContext`h < 30000., 
            If[$CellContext`h < 25000., $CellContext`TAmbiente = Part[
                 Part[$CellContext`TabelaTemporaria, 
                  Round[$CellContext`h/10^4]], 3] + 
               273.; $CellContext`TAmbiente (
                1 + ($CellContext`Mmol $CellContext`vel^2)/(
                 2 $CellContext`R $CellContext`TAmbiente))^(2./
                7.), $CellContext`TAmbiente = Part[
                 Part[$CellContext`TabelaTemporaria, 3], 3] + 
               273.; $CellContext`TAmbiente (
                1 + ($CellContext`Mmol $CellContext`vel^2)/(
                 2 $CellContext`R $CellContext`TAmbiente))^(2./
                7.)], $CellContext`TAmbiente = Part[
                
                Part[$CellContext`TabelaTemporaria, 
                 Round[$CellContext`h/10^4] + 1], 3] + 
              273.; $CellContext`TAmbiente (
               1 + ($CellContext`Mmol $CellContext`vel^2)/(
                2 $CellContext`R $CellContext`TAmbiente))^(2./
               7.)]]; $CellContext`Dm[
           Pattern[$CellContext`vel, 
            Blank[]], 
           Pattern[$CellContext`acel, 
            Blank[]], 
           Pattern[$CellContext`T, 
            Blank[]], 
           Pattern[$CellContext`r, 
            Blank[]], 
           Pattern[$CellContext`m, 
            
            Blank[]]] := (-($CellContext`eta $CellContext`StefanBoltzm \
$CellContext`T^4 4 
             N[Pi] $CellContext`r^2. + $CellContext`m $CellContext`vel \
$CellContext`acel))/(
          0.5 $CellContext`vel^2. + $CellContext`Lv); $CellContext`Vx0[
           Pattern[$CellContext`Vinit, 
            Blank[]]] := $CellContext`Vinit 
          N[Sin[$CellContext`\[Phi]E Degree] 
            Cos[$CellContext`\[Theta]E Degree]]; $CellContext`Vy0[
           Pattern[$CellContext`Vinit, 
            Blank[]]] := $CellContext`Vinit 
          N[Sin[$CellContext`\[Phi]E Degree] 
            Sin[$CellContext`\[Theta]E Degree]]; $CellContext`Vz0[
           Pattern[$CellContext`Vinit, 
            Blank[]]] := $CellContext`Vinit N[
            Cos[$CellContext`\[Phi]E Degree]]; $CellContext`VxFrag[
           Pattern[$CellContext`Vinit, 
            Blank[]], 
           Pattern[$CellContext`Vfr, 
            Blank[]], 
           Pattern[$CellContext`\[Theta]Fr, 
            Blank[]], 
           Pattern[$CellContext`\[Phi]Fr, 
            Blank[]]] := $CellContext`Vinit + $CellContext`Vfr 
           Sin[$CellContext`\[Phi]Fr Degree] 
           Cos[$CellContext`\[Theta]Fr Degree]; $CellContext`VyFrag[
           Pattern[$CellContext`Vinit, 
            Blank[]], 
           Pattern[$CellContext`Vfr, 
            Blank[]], 
           Pattern[$CellContext`\[Theta]Fr, 
            Blank[]], 
           Pattern[$CellContext`\[Phi]Fr, 
            Blank[]]] := $CellContext`Vinit + $CellContext`Vfr 
           Sin[$CellContext`\[Phi]Fr Degree] 
           Sin[$CellContext`\[Theta]Fr Degree]; $CellContext`VzFrag[
           Pattern[$CellContext`Vinit, 
            Blank[]], 
           Pattern[$CellContext`Vfr, 
            Blank[]], 
           Pattern[$CellContext`\[Theta]Fr, 
            Blank[]], 
           Pattern[$CellContext`\[Phi]Fr, 
            Blank[]]] := $CellContext`Vinit + $CellContext`Vfr 
           Cos[$CellContext`\[Phi]Fr 
             Degree]; $CellContext`EvolTime = {}; $CellContext`MassAll = {}; \
$CellContext`FinalMassAll = {}; $CellContext`EvolMassAll = {}; \
$CellContext`FinalTemp = {}; $CellContext`EvolTemp = {}; $CellContext`EvolVel = \
{}; $CellContext`EvolAccel = {}; $CellContext`i = 1; 
        AppendTo[$CellContext`EvolMassAll, {}]; 
        AppendTo[$CellContext`EvolTemp, {}]; 
        AppendTo[$CellContext`EvolVel, {}]; 
        AppendTo[$CellContext`EvolAccel, {}]; 
        AppendTo[$CellContext`EvolTime, {
          0}]; $CellContext`Xi = {}; $CellContext`Yi = {}; $CellContext`Zi = \
{}; $CellContext`mi = $CellContext`M; AppendTo[
          Part[$CellContext`EvolMassAll, $CellContext`i], $CellContext`mi]; 
        AppendTo[$CellContext`MassAll, $CellContext`mi]; \
$CellContext`\[Theta]Fri = 
         0.; $CellContext`Vfri = $CellContext`Vfr[$CellContext`mi]; \
$CellContext`Vxi = $CellContext`Vx0[$CellContext`VE]; $CellContext`Vyi = \
$CellContext`Vy0[$CellContext`VE]; $CellContext`Vzi = \
$CellContext`Vz0[$CellContext`VE]; $CellContext`xi = ($CellContext`yi = 
          0); $CellContext`zi = $CellContext`H; $CellContext`V = \
$CellContext`VE; AppendTo[
          
          Part[$CellContext`EvolVel, $CellContext`i], $CellContext`V]; \
$CellContext`T = $CellContext`Temp[$CellContext`V, $CellContext`zi]; AppendTo[
          
          Part[$CellContext`EvolTemp, $CellContext`i], $CellContext`T]; \
$CellContext`dm = $CellContext`mi; $CellContext`dr = \
$CellContext`r[$CellContext`mi]; $CellContext`DeltaT = \
$CellContext`IdealTime[$CellContext`dm, $CellContext`V, \
$CellContext`TimeStep]; While[
          
          If[$CellContext`nfrags == 1, $CellContext`zi > 
           0, $CellContext`zi > $CellContext`HFrag], $CellContext`fragID = \
$CellContext`i - 1; If[$CellContext`dm <= $CellContext`MTolerance, 
            Goto[$CellContext`SkipNullMass]]; AppendTo[
            Part[$CellContext`EvolTime, $CellContext`i], Part[
              
              Part[$CellContext`EvolTime, $CellContext`i], -1] + \
$CellContext`DeltaT]; $CellContext`rhoAr = \
$CellContext`RhoAr[$CellContext`zi]; $CellContext`Di = \
$CellContext`Drag[$CellContext`dr, $CellContext`rhoAr]; 
          AppendTo[$CellContext`Xi, 
            SetPrecision[$CellContext`xi, MachinePrecision]]; 
          AppendTo[$CellContext`Yi, 
            SetPrecision[$CellContext`yi, MachinePrecision]]; 
          AppendTo[$CellContext`Zi, 
            
            SetPrecision[$CellContext`zi, 
             MachinePrecision]]; $CellContext`axi = \
(-($CellContext`Di/$CellContext`dm)) $CellContext`V $CellContext`Vxi; \
$CellContext`ayi = (-($CellContext`Di/$CellContext`dm)) $CellContext`V \
$CellContext`Vyi; $CellContext`azi = -$CellContext`g - \
($CellContext`Di/$CellContext`dm) $CellContext`V $CellContext`Vzi; \
$CellContext`Vxi = $CellContext`Vxi + $CellContext`axi $CellContext`DeltaT; \
$CellContext`Vyi = $CellContext`Vyi + $CellContext`ayi $CellContext`DeltaT; \
$CellContext`Vzi = $CellContext`Vzi + $CellContext`azi $CellContext`DeltaT; \
$CellContext`xi = $CellContext`xi + $CellContext`Vxi $CellContext`DeltaT + 
            0.5 $CellContext`axi $CellContext`DeltaT^2; $CellContext`yi = \
$CellContext`yi + $CellContext`Vyi $CellContext`DeltaT + 
            0.5 $CellContext`ayi $CellContext`DeltaT^2; $CellContext`zi = \
$CellContext`zi + $CellContext`Vzi $CellContext`DeltaT + 
            0.5 $CellContext`azi $CellContext`DeltaT^2; $CellContext`V = 
           
           Sqrt[$CellContext`Vxi^2 + $CellContext`Vyi^2 + $CellContext`Vzi^2]; \
$CellContext`a = 
           Sqrt[$CellContext`axi^2 + $CellContext`ayi^2 + $CellContext`azi^2]; \
$CellContext`T = $CellContext`Temp[$CellContext`V, $CellContext`zi]; \
$CellContext`dm = $CellContext`dm + $CellContext`Dm[$CellContext`V, \
$CellContext`a, $CellContext`T, $CellContext`dr, $CellContext`dm] \
$CellContext`DeltaT; 
          If[$CellContext`dm > 
            0, $CellContext`dm = $CellContext`dm, $CellContext`dm = 
            0.]; $CellContext`dr = $CellContext`r[$CellContext`dm]; AppendTo[
            Part[$CellContext`EvolVel, $CellContext`i], $CellContext`V]; 
          AppendTo[
            Part[$CellContext`EvolAccel, $CellContext`i], $CellContext`a]; 
          AppendTo[
            Part[$CellContext`EvolTemp, $CellContext`i], $CellContext`T]; 
          AppendTo[
            
            Part[$CellContext`EvolMassAll, $CellContext`i], $CellContext`dm]; \
$CellContext`DeltaT = $CellContext`IdealTime[$CellContext`dm, $CellContext`V, \
$CellContext`TimeStep]]; Label[$CellContext`SkipNullMass]; 
        AppendTo[$CellContext`FinalMassAll, $CellContext`dm]; 
        AppendTo[$CellContext`FinalTemp, $CellContext`T]; 
        AppendTo[$CellContext`Xi, 
          SetPrecision[$CellContext`xi, MachinePrecision]]; 
        AppendTo[$CellContext`Yi, 
          SetPrecision[$CellContext`yi, MachinePrecision]]; If[
          Or[$CellContext`dm < 0, $CellContext`zi < 0], 
          AppendTo[$CellContext`Zi, 
           SetPrecision[0., MachinePrecision]], 
          AppendTo[$CellContext`Zi, 
           SetPrecision[$CellContext`zi, MachinePrecision]]]; 
        AppendTo[$CellContext`FallData, 
          
          Transpose[{$CellContext`Xi, $CellContext`Yi, $CellContext`Zi}]]; \
$CellContext`VxResult = $CellContext`Vxi; $CellContext`VyResult = \
$CellContext`Vyi; $CellContext`VzResult = $CellContext`Vzi; 
        If[$CellContext`nfrags > 
          1, $CellContext`MFrag = Part[$CellContext`EvolMassAll, 1, -1]; 
          For[$CellContext`i = 2, $CellContext`i <= $CellContext`nfrags + 1, 
            Increment[$CellContext`i], $CellContext`fragID = $CellContext`i - 
              1; AppendTo[$CellContext`EvolMassAll, {}]; 
            AppendTo[$CellContext`EvolTemp, {}]; 
            AppendTo[$CellContext`EvolVel, {}]; 
            AppendTo[$CellContext`EvolAccel, {}]; 
            AppendTo[$CellContext`EvolTime, {
               Part[
                Part[$CellContext`EvolTime, 1], -1]}]; $CellContext`mRand = 0; 
            If[$CellContext`mass == $CellContext`unif, $CellContext`mi = \
$CellContext`MFrag (1./$CellContext`nfrags); Null]; 
            If[$CellContext`mass == $CellContext`random, 
              If[1 - $CellContext`mRand > 
                0, $CellContext`mi = $CellContext`MFrag 
                  RandomReal[{
                    0, 1 - $CellContext`mRand}]; $CellContext`mRand = \
$CellContext`mRand + $CellContext`mi/$CellContext`MFrag, $CellContext`mi = 
                0.]; Null]; 
            If[$CellContext`mass == $CellContext`cresce, $CellContext`mi = \
$CellContext`MFrag ($CellContext`i/Total[
                  
                  Table[$CellContext`n, {$CellContext`n, 
                    1., $CellContext`nfrags, 1.}]]); Null]; 
            If[$CellContext`mass == $CellContext`cresce2, If[
                
                EvenQ[$CellContext`nfrags], $CellContext`i1 = 
                 Table[$CellContext`n, {$CellContext`n, 
                    1, $CellContext`nfrags/2, 1}]; $CellContext`i2 = Reverse[
                   Table[$CellContext`n, {$CellContext`n, 
                    Part[$CellContext`i1, 2], $CellContext`nfrags/2 + 1, 
                    1}]]; $CellContext`ii = 
                 Join[$CellContext`i1, $CellContext`i2]; $CellContext`a = \
$CellContext`MFrag/($CellContext`nfrags^2/
                   4. + $CellContext`nfrags); $CellContext`mi = 
                 Part[$CellContext`ii, $CellContext`i - 1] $CellContext`a]; If[
                
                OddQ[$CellContext`nfrags], $CellContext`i1 = 
                 Table[$CellContext`n, {$CellContext`n, 
                    1, ($CellContext`nfrags + 1)/2, 1}]; $CellContext`i2 = 
                 Reverse[
                   Table[$CellContext`n, {$CellContext`n, 
                    Part[$CellContext`i1, 2], ($CellContext`nfrags + 1)/2, 
                    1}]]; $CellContext`ii = 
                 Join[$CellContext`i1, $CellContext`i2]; $CellContext`a = \
$CellContext`MFrag/(($CellContext`nfrags^2/4. + $CellContext`nfrags) - 1./
                  4.); $CellContext`mi = 
                 Part[$CellContext`ii, $CellContext`i - 1] $CellContext`a]]; 
            If[$CellContext`mass == $CellContext`decresce, $CellContext`mi = \
$CellContext`MFrag (($CellContext`nfrags - ($CellContext`i - 1))/Total[
                  
                  Table[$CellContext`n, {$CellContext`n, 
                    1., $CellContext`nfrags, 1.}]]); Null]; 
            If[$CellContext`mass == $CellContext`decresce2, If[
                
                EvenQ[$CellContext`nfrags], $CellContext`i1 = 
                 Table[$CellContext`n, {$CellContext`n, 
                    1, $CellContext`nfrags/2, 1}]; $CellContext`i2 = Reverse[
                   Table[$CellContext`n, {$CellContext`n, 
                    Part[$CellContext`i1, 2], $CellContext`nfrags/2 + 1, 
                    1}]]; $CellContext`ii = 
                 Join[$CellContext`i2, $CellContext`i1]; $CellContext`a = \
$CellContext`MFrag/($CellContext`nfrags^2/
                   4. + $CellContext`nfrags); $CellContext`mi = 
                 Part[$CellContext`ii, $CellContext`i - 1] $CellContext`a]; If[
                
                OddQ[$CellContext`nfrags], $CellContext`i1 = 
                 Table[$CellContext`n, {$CellContext`n, 
                    1, ($CellContext`nfrags - 1)/2, 1}]; $CellContext`i2 = 
                 Reverse[
                   
                   Table[$CellContext`n, {$CellContext`n, 
                    1, ($CellContext`nfrags + 1)/2, 1}]]; $CellContext`ii = 
                 Join[$CellContext`i2, $CellContext`i1]; $CellContext`a = \
$CellContext`MFrag/(($CellContext`nfrags^2/4. + $CellContext`nfrags) - 1./
                  4.); $CellContext`mi = 
                 Part[$CellContext`ii, $CellContext`i - 1] $CellContext`a]]; 
            AppendTo[
              
              Part[$CellContext`EvolMassAll, $CellContext`i], \
$CellContext`mi]; AppendTo[$CellContext`MassAll, $CellContext`mi]; If[
              
              And[$CellContext`Q1, $CellContext`Q2, $CellContext`Q3, \
$CellContext`Q4 == True], $CellContext`UnifAngle = True]; If[
              
              Or[$CellContext`Q2, $CellContext`Q3, $CellContext`Q4, \
$CellContext`Q1 == False], $CellContext`UnifAngle = True]; 
            If[$CellContext`UnifAngle == 
              True, $CellContext`\[Theta]Fri = ($CellContext`i - 1) (
                 360./$CellContext`nfrags); 
              Goto[$CellContext`SkipOtherVerific]]; 
            If[$CellContext`RandomAngle == 
              True, $CellContext`\[Theta]Fri = (
                 RandomReal[{0, 1 - $CellContext`mRand}] $CellContext`i - 1) (
                 360./$CellContext`nfrags); 
              Goto[$CellContext`SkipOtherVerific]]; If[
              
              And[$CellContext`Q1, $CellContext`Q2, $CellContext`Q3 == 
               True, $CellContext`Q4 == False], 
              If[$CellContext`i <= $CellContext`nfrags/
                 3, $CellContext`\[Theta]Fri = ($CellContext`i - 1) (360./(
                  4 $CellContext`nfrags))]; 
              If[$CellContext`i <= 
                2 ($CellContext`nfrags/3.), $CellContext`\[Theta]Fri = 
                90 + ($CellContext`i - 1) (360./(4 $CellContext`nfrags))]; 
              If[$CellContext`i <= $CellContext`nfrags/
                 1, $CellContext`\[Theta]Fri = 
                180 + ($CellContext`i - 1) (360./(4 $CellContext`nfrags))]; 
              Goto[$CellContext`SkipOtherVerific]]; If[
              
              And[$CellContext`Q1, $CellContext`Q2, $CellContext`Q4 == 
               True, $CellContext`Q3 == False], 
              If[$CellContext`i <= $CellContext`nfrags/
                 3, $CellContext`\[Theta]Fri = -90 + ($CellContext`i - 1) (
                   360./(4 $CellContext`nfrags))]; 
              If[$CellContext`i <= 
                2 ($CellContext`nfrags/3.), $CellContext`\[Theta]Fri = 
                90 + ($CellContext`i - 1) (360./(4 $CellContext`nfrags))]; 
              If[$CellContext`i <= $CellContext`nfrags/
                 1, $CellContext`\[Theta]Fri = 
                90 - ($CellContext`i - 1) (360./(4 $CellContext`nfrags))]; 
              Goto[$CellContext`SkipOtherVerific]]; If[
              
              And[$CellContext`Q2, $CellContext`Q3, $CellContext`Q4 == 
               True, $CellContext`Q1 == False], 
              If[$CellContext`i <= $CellContext`nfrags/
                 3, $CellContext`\[Theta]Fri = (-($CellContext`i - 1)) (360./(
                  4 $CellContext`nfrags))]; 
              If[$CellContext`i <= 
                2 ($CellContext`nfrags/3.), $CellContext`\[Theta]Fri = 
                90 + ($CellContext`i - 1) (360./(4 $CellContext`nfrags))]; 
              If[$CellContext`i <= $CellContext`nfrags/
                 1, $CellContext`\[Theta]Fri = 
                180 + ($CellContext`i - 1) (360./(4 $CellContext`nfrags))]; 
              Goto[$CellContext`SkipOtherVerific]]; If[
              
              And[$CellContext`Q1, $CellContext`Q3, $CellContext`Q4 == 
               True, $CellContext`Q2 == False], 
              If[$CellContext`i <= $CellContext`nfrags/
                 3, $CellContext`\[Theta]Fri = 
                180 + ($CellContext`i - 1) (360./(4 $CellContext`nfrags))]; 
              If[$CellContext`i <= 
                2 ($CellContext`nfrags/3.), $CellContext`\[Theta]Fri = 
                90 - ($CellContext`i - 1) (360./(4 $CellContext`nfrags))]; 
              If[$CellContext`i <= $CellContext`nfrags/
                 1, $CellContext`\[Theta]Fri = -90 + ($CellContext`i - 1) (
                   360./(4 $CellContext`nfrags))]; 
              Goto[$CellContext`SkipOtherVerific]]; If[
              
              And[$CellContext`Q1, $CellContext`Q2 == 
               True], $CellContext`\[Theta]Fri = ($CellContext`i - 1) (360./(
                 2 $CellContext`nfrags)); 
              Goto[$CellContext`SkipOtherVerific]]; If[
              And[$CellContext`Q1, $CellContext`Q3 == True], 
              If[$CellContext`i <= $CellContext`nfrags/
                 2, $CellContext`\[Theta]Fri = ($CellContext`i - 1) (360./(
                  2 $CellContext`nfrags))]; 
              If[$CellContext`i > $CellContext`nfrags/
                 2, $CellContext`\[Theta]Fri = (-($CellContext`i - 1)) (360./(
                  2 $CellContext`nfrags))]; 
              Goto[$CellContext`SkipOtherVerific]]; If[
              
              And[$CellContext`Q1, $CellContext`Q4 == 
               True], $CellContext`\[Theta]Fri = -90 + ($CellContext`i - 1) (
                  360./(2 $CellContext`nfrags)); 
              Goto[$CellContext`SkipOtherVerific]]; If[
              
              And[$CellContext`Q2, $CellContext`Q3 == 
               True], $CellContext`\[Theta]Fri = 
               90 + ($CellContext`i - 1) (360./(2 $CellContext`nfrags)); 
              Goto[$CellContext`SkipOtherVerific]]; If[
              And[$CellContext`Q2, $CellContext`Q4 == True], 
              If[$CellContext`i <= $CellContext`nfrags/
                 2, $CellContext`\[Theta]Fri = -90 + ($CellContext`i - 1) (
                   360./(2 $CellContext`nfrags))]; 
              If[$CellContext`i > $CellContext`nfrags/
                 2, $CellContext`\[Theta]Fri = ($CellContext`i - 1) (360./(
                  2 $CellContext`nfrags))]; 
              Goto[$CellContext`SkipOtherVerific]]; If[
              
              And[$CellContext`Q3, $CellContext`Q4 == 
               True], $CellContext`\[Theta]Fri = (-($CellContext`i - 1)) (
                 360./(2 $CellContext`nfrags)); 
              Goto[$CellContext`SkipOtherVerific]]; 
            If[$CellContext`Q2 == 
              True, $CellContext`\[Theta]Fri = 
               90 + ($CellContext`i - 1) (360./(4 $CellContext`nfrags)); 
              Goto[$CellContext`SkipOtherVerific]]; 
            If[$CellContext`Q3 == 
              True, $CellContext`\[Theta]Fri = 
               180 + ($CellContext`i - 1) (360./(4 $CellContext`nfrags)); 
              Goto[$CellContext`SkipOtherVerific]]; 
            If[$CellContext`Q4 == 
              True, $CellContext`\[Theta]Fri = (-($CellContext`i - 1)) (360./(
                 4 $CellContext`nfrags)); 
              Goto[$CellContext`SkipOtherVerific]]; 
            If[$CellContext`Q1 == 
              True, $CellContext`\[Theta]Fri = ($CellContext`i - 1) (360./(
                 4 $CellContext`nfrags)); 
              Goto[$CellContext`SkipOtherVerific]]; 
            Label[$CellContext`SkipOtherVerific]; $CellContext`xin = {}; \
$CellContext`index = 1; If[Total[
                Part[
                 Part[$CellContext`FAll, 1], All, 1]] == 
              0, $CellContext`Slope = 180, While[$CellContext`index < Length[
                  Part[$CellContext`FAll, 1]], AppendTo[$CellContext`xin, 
                  Differences[
                   Part[
                    
                    Part[$CellContext`FAll, 
                    1], {-($CellContext`index + 1), -$CellContext`index}, 
                    1]]]; $CellContext`index = $CellContext`index + 
                  1]; $CellContext`tanNum = Part[
                 Part[
                  DeleteCases[$CellContext`xin, {0.}], 1], 
                 1]; $CellContext`zin = {}; $CellContext`index = 1; 
              While[$CellContext`index < Length[
                  Part[$CellContext`FAll, 1]], AppendTo[$CellContext`zin, 
                  Differences[
                   Part[
                    
                    Part[$CellContext`FAll, 
                    1], {-($CellContext`index + 1), -$CellContext`index}, 
                    3]]]; $CellContext`index = $CellContext`index + 
                  1]; $CellContext`tanDen = Part[
                 Part[
                  DeleteCases[$CellContext`zin, {0.}], 1], 
                 1]; $CellContext`Slope = 
               ArcTan[$CellContext`tanNum/$CellContext`tanDen] (180/Pi) (-1) + 
                90; Null]; $CellContext`\[Phi]Fr = $CellContext`Slope; \
$CellContext`Xi = {}; $CellContext`Yi = {}; $CellContext`Zi = {}; \
$CellContext`V = Part[$CellContext`EvolVel, 1, -1]; AppendTo[
              
              Part[$CellContext`EvolVel, $CellContext`i], $CellContext`V]; \
$CellContext`Vfri = $CellContext`Vfr[$CellContext`mi]; $CellContext`Vxi = \
$CellContext`VxFrag[$CellContext`VxResult, $CellContext`Vfri, $CellContext`\
\[Theta]Fri, $CellContext`\[Phi]Fr]; $CellContext`Vyi = \
$CellContext`VyFrag[$CellContext`VyResult, $CellContext`Vfri, $CellContext`\
\[Theta]Fri, $CellContext`\[Phi]Fr]; $CellContext`Vzi = \
$CellContext`VzFrag[$CellContext`VzResult, $CellContext`Vfri, $CellContext`\
\[Theta]Fri, $CellContext`\[Phi]Fr]; $CellContext`xi = Part[
               Part[$CellContext`FallData, 1, -1], 1]; $CellContext`yi = Part[
               Part[$CellContext`FallData, 1, -1], 2]; $CellContext`zi = Part[
               Part[$CellContext`FallData, 1, -1], 3]; $CellContext`T = 
             Part[$CellContext`EvolTemp, 1, -1]; AppendTo[
              
              Part[$CellContext`EvolTemp, $CellContext`i], $CellContext`T]; \
$CellContext`dm = $CellContext`mi; $CellContext`dr = \
$CellContext`r[$CellContext`mi]; 
            While[$CellContext`zi > 0, 
              If[$CellContext`dm <= $CellContext`MTolerance, 
                Goto[$CellContext`SkipNullMass]]; AppendTo[
                Part[$CellContext`EvolTime, $CellContext`i], Part[
                  
                  Part[$CellContext`EvolTime, $CellContext`i], -1] + \
$CellContext`DeltaT]; $CellContext`rhoAr = \
$CellContext`RhoAr[$CellContext`zi]; $CellContext`Di = \
$CellContext`Drag[$CellContext`dr, $CellContext`rhoAr]; 
              AppendTo[$CellContext`Xi, 
                SetPrecision[$CellContext`xi, MachinePrecision]]; 
              AppendTo[$CellContext`Yi, 
                SetPrecision[$CellContext`yi, MachinePrecision]]; 
              AppendTo[$CellContext`Zi, 
                
                SetPrecision[$CellContext`zi, 
                 MachinePrecision]]; $CellContext`axi = \
(-($CellContext`Di/$CellContext`dm)) $CellContext`V $CellContext`Vxi; \
$CellContext`ayi = (-($CellContext`Di/$CellContext`dm)) $CellContext`V \
$CellContext`Vyi; $CellContext`azi = -$CellContext`g - \
($CellContext`Di/$CellContext`dm) $CellContext`V $CellContext`Vzi; \
$CellContext`Vxi = $CellContext`Vxi + $CellContext`axi $CellContext`DeltaT; \
$CellContext`Vyi = $CellContext`Vyi + $CellContext`ayi $CellContext`DeltaT; \
$CellContext`Vzi = $CellContext`Vzi + $CellContext`azi $CellContext`DeltaT; \
$CellContext`xi = $CellContext`xi + $CellContext`Vxi $CellContext`DeltaT + 
                0.5 $CellContext`axi $CellContext`DeltaT^2; $CellContext`yi = \
$CellContext`yi + $CellContext`Vyi $CellContext`DeltaT + 
                0.5 $CellContext`ayi $CellContext`DeltaT^2; $CellContext`zi = \
$CellContext`zi + $CellContext`Vzi $CellContext`DeltaT + 
                0.5 $CellContext`azi $CellContext`DeltaT^2; $CellContext`V = 
               Sqrt[$CellContext`Vxi^2 + $CellContext`Vyi^2 + \
$CellContext`Vzi^2]; $CellContext`a = 
               Sqrt[$CellContext`axi^2 + $CellContext`ayi^2 + \
$CellContext`azi^2]; $CellContext`T = $CellContext`Temp[$CellContext`V, \
$CellContext`zi]; $CellContext`dm = $CellContext`dm + \
$CellContext`Dm[$CellContext`V, $CellContext`a, $CellContext`T, \
$CellContext`dr, $CellContext`dm] $CellContext`DeltaT; 
              If[$CellContext`dm > 
                0, $CellContext`dm = $CellContext`dm, $CellContext`dm = 
                0.]; $CellContext`dr = $CellContext`r[$CellContext`dm]; 
              AppendTo[
                Part[$CellContext`EvolVel, $CellContext`i], $CellContext`V]; 
              AppendTo[
                Part[$CellContext`EvolAccel, $CellContext`i], $CellContext`a]; 
              AppendTo[
                Part[$CellContext`EvolTemp, $CellContext`i], $CellContext`T]; 
              AppendTo[
                
                Part[$CellContext`EvolMassAll, $CellContext`i], \
$CellContext`dm]; $CellContext`DeltaT = \
$CellContext`IdealTime[$CellContext`dm, $CellContext`V, \
$CellContext`TimeStep]]; Label[$CellContext`SkipNullMass]; 
            AppendTo[$CellContext`FinalMassAll, $CellContext`dm]; 
            AppendTo[$CellContext`FinalTemp, $CellContext`T]; 
            AppendTo[$CellContext`Xi, 
              SetPrecision[$CellContext`xi, MachinePrecision]]; 
            AppendTo[$CellContext`Yi, 
              SetPrecision[$CellContext`yi, MachinePrecision]]; If[
              Or[$CellContext`dm < 0, $CellContext`zi < 0], 
              AppendTo[$CellContext`Zi, 
               SetPrecision[0., MachinePrecision]], 
              AppendTo[$CellContext`Zi, 
               SetPrecision[$CellContext`zi, MachinePrecision]]]; 
            AppendTo[$CellContext`FallData, 
              
              Transpose[{$CellContext`Xi, $CellContext`Yi, \
$CellContext`Zi}]]]]; $CellContext`timetepVerif = $CellContext`TimeStep; \
$CellContext`masstoleranceVerif = $CellContext`MTolerance; \
$CellContext`massType = $CellContext`mass; $CellContext`energyType = \
$CellContext`Efr; $CellContext`dcType = $CellContext`Dc; $CellContext`phiType = \
$CellContext`\[Phi]E; $CellContext`HFragValue = $CellContext`HFrag; \
$CellContext`FragAngleUnif = $CellContext`UnifAngle; \
$CellContext`FragAngleRand = $CellContext`RandomAngle; \
$CellContext`FragAngleQ1 = $CellContext`Q1; $CellContext`FragAngleQ2 = \
$CellContext`Q2; $CellContext`FragAngleQ3 = $CellContext`Q3; \
$CellContext`FragAngleQ4 = $CellContext`Q4; $CellContext`FragAngleList = \
{$CellContext`FragAngleUnif, $CellContext`FragAngleRand, \
$CellContext`FragAngleQ1, $CellContext`FragAngleQ2, $CellContext`FragAngleQ3, \
$CellContext`FragAngleQ4}; $CellContext`FAll = {}; 
        For[$CellContext`i = 1, $CellContext`i <= 
          Length[$CellContext`FallData], 
          Increment[$CellContext`i], 
          AppendTo[$CellContext`FAll, 
           
           Part[$CellContext`FallData, $CellContext`i]]]; \
$CellContext`maxFAll = {}; 
        For[$CellContext`i = 1, $CellContext`i <= 
          Length[$CellContext`FallData], 
          Increment[$CellContext`i], 
          AppendTo[$CellContext`maxFAll, 
           Length[
            Part[$CellContext`FAll, $CellContext`i]]]]; $CellContext`max = 
         Max[$CellContext`maxFAll]; $CellContext`Fi = Min[
           Position[$CellContext`maxFAll, $CellContext`max]]; 
        For[$CellContext`i = 2, $CellContext`i <= 
          Length[$CellContext`FallData], 
          Increment[$CellContext`i], If[Length[
              Part[$CellContext`FAll, $CellContext`i]] < $CellContext`max, 
            While[Length[
                Part[$CellContext`FAll, $CellContext`i]] < $CellContext`max, 
              If[Part[
                 Part[
                  Part[$CellContext`FAll, $CellContext`i], -1], 3] <= 0, 
               AppendTo[
                Part[$CellContext`FAll, $CellContext`i], {
                 Part[
                  Part[
                   Part[$CellContext`FAll, $CellContext`i], -1], 1], 
                 Part[
                  Part[
                   Part[$CellContext`FAll, $CellContext`i], -1], 2], 0}], 
               AppendTo[
                Part[$CellContext`FAll, $CellContext`i], {
                 Part[
                  Part[
                   Part[$CellContext`FAll, $CellContext`i], -1], 1], 
                 Part[
                  Part[
                   Part[$CellContext`FAll, $CellContext`i], -1], 2], 
                 Part[
                  Part[
                   Part[$CellContext`FAll, $CellContext`i], -1], 3]}]]]; 
            Null]; If[Length[
              
              Part[$CellContext`EvolMassAll, $CellContext`i]] < \
$CellContext`max, While[Length[
                
                Part[$CellContext`EvolMassAll, $CellContext`i]] < \
$CellContext`max, 
              AppendTo[
               Part[$CellContext`EvolMassAll, $CellContext`i], 
               Part[
                Part[$CellContext`EvolMassAll, $CellContext`i], -1]]]; Null]; 
          If[Length[
              Part[$CellContext`EvolTemp, $CellContext`i]] < $CellContext`max,
             While[Length[
                
                Part[$CellContext`EvolTemp, $CellContext`i]] < \
$CellContext`max, 
              AppendTo[
               Part[$CellContext`EvolTemp, $CellContext`i], 
               Part[
                Part[$CellContext`EvolTemp, $CellContext`i], -1]]]; 
            Null]]; $CellContext`InfoTab = {{
           "N\[UAcute]mero de fragmentos", 
            "Altura de fragmenta\[CCedilla]\[ATilde]o [m]", 
            "Massa do corpo [kg]", "Velocidade de entrada [m/s]", 
            "Energia de Entr. [J]-[kT]", "Energia de frag. [J]-[kT]", 
            "Coef. de resist.", "\[CapitalAHat]ngulo vert. de entrada", 
            "\[CapitalAHat]ngulo vert. de fragmenta\[CCedilla]\[ATilde]o"}, {
            
            Length[$CellContext`FallData], $CellContext`H, $CellContext`M, \
$CellContext`VE, 
            StringJoin[
             ToString[0.5 $CellContext`M $CellContext`VE^2, TraditionalForm], 
             " - ", 
             ToString[
             0.5 $CellContext`M ($CellContext`VE^2/(4.184 10^12)), 
              TraditionalForm]], 
            StringJoin[
             ToString[$CellContext`Efr, TraditionalForm], " - ", 
             
             ToString[$CellContext`Efr/(4.184 10^12), 
              TraditionalForm]], $CellContext`Dc, $CellContext`\[Phi]E, 
            
            If[$CellContext`nfrags == 1, 
             "No Frags", $CellContext`\[Phi]Fr]}}; $CellContext`InfoGrid = 
         Grid[$CellContext`InfoTab, 
           Frame -> {All, False}]; $CellContext`InfoTab2 = {{
           "N\[UAcute]mero de fragmentos", 
            "Altura de fragmenta\[CCedilla]\[ATilde]o [m]", 
            "Massa do corpo [kg]", "Velocidade de entrada [m/s]", 
            "Energia de Entr. [J]-[kT]", "Energia de frag. [J]-[kT]", 
            "Coef. de resist.", "\[CapitalAHat]ngulo vert. de entrada", 
            "\[CapitalAHat]ngulo vert. de fragmenta\[CCedilla]\[ATilde]o"}, {
            
            Length[$CellContext`FallData], $CellContext`H, $CellContext`M, \
$CellContext`VE, {
            0.5 $CellContext`M $CellContext`VE^2, 
             0.5 $CellContext`M ($CellContext`VE^2/(4.184 
              10^12))}, {$CellContext`Efr, $CellContext`Efr/(4.184 
             10^12)}, $CellContext`Dc, $CellContext`\[Phi]E, 
            
            If[$CellContext`nfrags == 1, 
             "No Frags", $CellContext`\[Phi]Fr]}}; $CellContext`ValuesTab = 
         Table[{$CellContext`i, 
            Part[
             Part[$CellContext`EvolTime, $CellContext`i], -1], 
            Max[
             Part[$CellContext`EvolVel, $CellContext`i]], 
            Part[
             Part[$CellContext`EvolMassAll, $CellContext`i], 1], 
            Part[
             Part[$CellContext`EvolMassAll, $CellContext`i], -1], 
            Part[
             Part[$CellContext`EvolTemp, $CellContext`i], 1], 
            Part[
             Part[$CellContext`EvolTemp, $CellContext`i], -1], 
            Part[
             Part[$CellContext`FAll, $CellContext`i], -1], Part[
              Part[
               Part[$CellContext`FAll, $CellContext`i], -1], 1]/N[
             Sin[$CellContext`\[Phi]E Degree]]}, {$CellContext`i, 1, 
            Length[$CellContext`FallData]}]; 
        PrependTo[$CellContext`ValuesTab, {
          "Fragmento", "Tempo de queda [s]", 
           "Vel. M\[AAcute]x. na trajet\[OAcute]ria [m/s]", 
           "Massa Inicial [kg]", "Massa Final [kg]", "Temp. Inicial [K]", 
           "Temp. Final [K]", "Posi\[CCedilla]\[ATilde]o Final [x,y,z]", 
           "Tam. da Trajet\[OAcute]ria [m]"}]; $CellContext`ValuesGrid = 
         Grid[$CellContext`ValuesTab, Frame -> All]; $CellContext`MeteoPNG = 
         Column[{$CellContext`InfoGrid, $CellContext`ValuesGrid}, 
           Center]; $CellContext`MeteoTable = 
         PrependTo[$CellContext`ValuesTab, {}]; $CellContext`MeteoTable = 
         PrependTo[$CellContext`ValuesTab, 
           Part[$CellContext`InfoTab2, 2]]; $CellContext`MeteoTable = 
         PrependTo[$CellContext`ValuesTab, 
           Part[$CellContext`InfoTab2, 1]]; $CellContext`MeteoPdf = 
         TableForm[$CellContext`ValuesTab]; Label[$CellContext`Plotting]; 
        If[$CellContext`OpacityButton == $CellContext`OpacityOn, 
          If[$CellContext`ColorType == $CellContext`GRAY, \
$CellContext`PlotAll = Table[
              ListPointPlot3D[
               Part[$CellContext`FAll, $CellContext`i], ColorFunctionScaling -> 
               False, ColorFunction -> 
               Function[{$CellContext`x, $CellContext`y, $CellContext`z}, 
                 GrayLevel[0.2, Part[
                    Part[$CellContext`EvolMassAll, $CellContext`i], 
                    Min[
                    Position[
                    
                    Part[$CellContext`FAll, $CellContext`i], {$CellContext`x, \
$CellContext`y, $CellContext`z}]]]/
                  Part[$CellContext`MassAll, $CellContext`i]]], ImageSize -> 
               200, ViewPoint -> {1.3, -2.4, 2.}], {$CellContext`i, 1, 
               Length[$CellContext`FallData]}]]; 
          If[$CellContext`ColorType == $CellContext`HUE, $CellContext`PlotAll = 
            Table[
              ListPointPlot3D[
               Part[$CellContext`FAll, $CellContext`i], ColorFunctionScaling -> 
               False, ColorFunction -> 
               Function[{$CellContext`x, $CellContext`y, $CellContext`z}, 
                 Hue[Part[
                    Part[$CellContext`EvolTemp, $CellContext`i], 
                    Min[
                    Position[
                    
                    Part[$CellContext`FAll, $CellContext`i], {$CellContext`x, \
$CellContext`y, $CellContext`z}]]]/Max[$CellContext`EvolTemp], Part[
                    Part[$CellContext`EvolMassAll, $CellContext`i], 
                    Min[
                    Position[
                    
                    Part[$CellContext`FAll, $CellContext`i], {$CellContext`x, \
$CellContext`y, $CellContext`z}]]]/
                  Part[$CellContext`MassAll, $CellContext`i]]], ImageSize -> 
               200, ViewPoint -> {1.3, -2.4, 2.}], {$CellContext`i, 1, 
               Length[$CellContext`FallData]}]]]; 
        If[$CellContext`OpacityButton == $CellContext`OpacityOff, 
          If[$CellContext`ColorType == $CellContext`GRAY, \
$CellContext`PlotAll = Table[
               ListPointPlot3D[
                Part[$CellContext`FAll, $CellContext`i], ColorFunctionScaling -> 
                False, ImageSize -> 200, 
                ViewPoint -> {1.3, -2.4, 2.}], {$CellContext`i, 1, 
                
                Length[$CellContext`FallData]}]; $CellContext`CT = \
$CellContext`ColorType]; 
          If[$CellContext`ColorType == $CellContext`HUE, $CellContext`PlotAll = 
            Table[
              ListPointPlot3D[
               Part[$CellContext`FAll, $CellContext`i], ColorFunctionScaling -> 
               False, ColorFunction -> 
               Function[{$CellContext`x, $CellContext`y, $CellContext`z}, 
                 Hue[Part[
                    Part[$CellContext`EvolTemp, $CellContext`i], 
                    Min[
                    Position[
                    
                    Part[$CellContext`FAll, $CellContext`i], {$CellContext`x, \
$CellContext`y, $CellContext`z}]]]/Max[$CellContext`EvolTemp], 1.]], 
               ImageSize -> 200, 
               ViewPoint -> {1.3, -2.4, 2.}], {$CellContext`i, 1, 
               
               Length[$CellContext`FallData]}]]]; $CellContext`CT = \
$CellContext`ColorType; $CellContext`OB = $CellContext`OpacityButton; \
$CellContext`SB = $CellContext`ShowButton; 
        Label[$CellContext`Plotting2]; $CellContext`FinalPosTab = Table[{
            Part[
             Part[
              Part[$CellContext`FAll, $CellContext`i], -1], 1], 
            Part[
             Part[
              Part[$CellContext`FAll, $CellContext`i], -1], 
             2]}, {$CellContext`i, 1, 
            Length[$CellContext`FAll]}]; $CellContext`SurvivedFrags = {}; 
        For[$CellContext`i = 1, $CellContext`i <= Length[$CellContext`FAll], 
          Increment[$CellContext`i], 
          If[
           And[Part[
              Part[
               Part[$CellContext`FAll, $CellContext`i], -1], -1] == 0, 
            Part[$CellContext`FinalMassAll, $CellContext`i] > 0], 
           
           AppendTo[$CellContext`SurvivedFrags, $CellContext`i]]]; \
$CellContext`SetNumb[
           Pattern[$CellContext`n, 
            Blank[]]] := If[-10.^4 < N[$CellContext`n] < 10.^4, 
           Return[
            NumberForm[
             N[$CellContext`n], 3]], 
           Return[
            NumberForm[
             N[$CellContext`n], 3, 
             ExponentFunction -> (4 Quotient[#, 4]& )]]]; $CellContext`XCM = 
         If[Total[
             Part[$CellContext`FinalMassAll, $CellContext`SurvivedFrags]] != 
           0, Total[
             Table[Part[$CellContext`FinalMassAll, $CellContext`i] Part[
                Part[
                 Part[$CellContext`FAll, $CellContext`i], -1], 
                1], {$CellContext`i, $CellContext`SurvivedFrags}]]/Total[
            Part[$CellContext`FinalMassAll, $CellContext`SurvivedFrags]], 
           Total[
             Table[Part[$CellContext`FinalMassAll, $CellContext`i] Part[
                Part[
                 Part[$CellContext`FAll, $CellContext`i], -1], 
                1], {$CellContext`i, $CellContext`SurvivedFrags}]]/(1 + Total[
             
             Part[$CellContext`FinalMassAll, $CellContext`SurvivedFrags]])]; \
$CellContext`YCM = If[Total[
             Part[$CellContext`FinalMassAll, $CellContext`SurvivedFrags]] != 
           0, Total[
             Table[Part[$CellContext`FinalMassAll, $CellContext`i] Part[
                Part[
                 Part[$CellContext`FAll, $CellContext`i], -1], 
                2], {$CellContext`i, $CellContext`SurvivedFrags}]]/Total[
            Part[$CellContext`FinalMassAll, $CellContext`SurvivedFrags]], 
           Total[
             Table[Part[$CellContext`FinalMassAll, $CellContext`i] Part[
                Part[
                 Part[$CellContext`FAll, $CellContext`i], -1], 
                2], {$CellContext`i, $CellContext`SurvivedFrags}]]/(1 + Total[
             Part[$CellContext`FinalMassAll, $CellContext`SurvivedFrags]])]; 
        If[$CellContext`SurvivedFrags == {}, 
          Goto[$CellContext`NoPoints]]; 
        If[$CellContext`MassDecal == $CellContext`DecalON, \
$CellContext`FinalPos = Table[
            ListPlot[{
              Part[$CellContext`FinalPosTab, $CellContext`i]}, PlotStyle -> 
             If[Part[$CellContext`FinalMassAll, $CellContext`i] == 0, White, 
               GrayLevel[
               0.2, 1.2 (Part[$CellContext`FinalMassAll, $CellContext`i]/Max[
                  
                  Part[$CellContext`FinalMassAll, \
$CellContext`SurvivedFrags]])]], Axes -> $CellContext`axis2, 
             PlotMarkers -> {
              "\[FilledCircle]", 
               10}], {$CellContext`i, $CellContext`SurvivedFrags}]]; 
        If[$CellContext`MassDecal == $CellContext`DecalOFF, \
$CellContext`FinalPos = Table[
            ListPlot[{
              Part[$CellContext`FinalPosTab, $CellContext`i]}, PlotStyle -> 
             If[Part[$CellContext`FinalMassAll, $CellContext`i] == 0, White, 
               GrayLevel[0.2]], Axes -> $CellContext`axis2, 
             PlotMarkers -> {"\[FilledCircle]", 10}, ImageSize -> 
             200], {$CellContext`i, $CellContext`SurvivedFrags}]]; 
        Label[$CellContext`NoPoints]; 
        If[$CellContext`FinalPosTab == {}, $CellContext`ValuesPlot = 
          ListPlot[{{$CellContext`XCM, $CellContext`YCM}}, PlotStyle -> White,
             ImageSize -> 200]]; 
        If[$CellContext`FinalPosTab != {}, $CellContext`ValuesPlot = Table[
            ListPlot[{
              Part[$CellContext`FinalPosTab, $CellContext`i]}, 
             Axes -> $CellContext`axis2, PlotMarkers -> {
               Labeled[" ", 
                $CellContext`SetNumb[
                 Part[$CellContext`FinalMassAll, $CellContext`i]], 
                LabelStyle -> {Black, 10}, ImageMargins -> 0, 
                BaselinePosition -> Top, ImageMargins -> 0, 
                ImageSize -> {30, 10}], 10}, ImageSize -> 
             200], {$CellContext`i, $CellContext`SurvivedFrags}]]; \
$CellContext`JoinedPoints = 
         ListPlot[$CellContext`FinalPosTab, Joined -> 
           True]; $CellContext`CMPlot = 
         ListPlot[{{$CellContext`XCM, $CellContext`YCM}}, PlotStyle -> Red, 
           PlotMarkers -> {
             Labeled[
             "\[FilledCircle]", $CellContext`CM, BaselinePosition -> Top], 7},
            ImageSize -> 
           200]; $CellContext`FinalPosPlot = {$CellContext`FinalPos}; 
        If[$CellContext`FinalPosTab == {}, 
          AppendTo[$CellContext`FinalPosPlot, 
           
           ListPlot[{{$CellContext`XCM, $CellContext`YCM}}, PlotStyle -> 
            White]]]; If[$CellContext`MassValues == $CellContext`ValuesON, 
          AppendTo[$CellContext`FinalPosPlot, $CellContext`ValuesPlot]]; 
        If[$CellContext`DisplayCM == $CellContext`CMON, 
          AppendTo[$CellContext`FinalPosPlot, $CellContext`CMPlot]]; 
        If[$CellContext`JoinPoints == $CellContext`JOINON, 
          
          AppendTo[$CellContext`FinalPosPlot, $CellContext`JoinedPoints]]; \
$CellContext`J2 = $CellContext`JoinPoints; $CellContext`D2 = \
$CellContext`DisplayCM; $CellContext`MV = $CellContext`MassValues; \
$CellContext`MD = $CellContext`MassDecal; $CellContext`AX = \
$CellContext`axis2; 
        Label[$CellContext`PerformingPlots]; $CellContext`XRange = {(-1.35) 
           Max[
             Table[
              Part[
               Part[$CellContext`FAll, $CellContext`pos], All, 
               1], {$CellContext`pos, 1, 
               Length[$CellContext`FAll]}]], 1.35 Max[
             Table[
              Part[
               Part[$CellContext`FAll, $CellContext`pos], All, 
               1], {$CellContext`pos, 1, 
               
               Length[$CellContext`FAll]}]]}; $CellContext`YRange = \
$CellContext`XRange; $CellContext`PlotPosTab = Table[
           
           Part[$CellContext`FinalPosTab, $CellContext`i], {$CellContext`i, \
$CellContext`SurvivedFrags}]; 
        If[$CellContext`PlotPosTab == {}, $CellContext`XRange2 = \
$CellContext`XRange; $CellContext`YRange2 = $CellContext`YRange, \
$CellContext`XRange2 = {Min[
               Part[$CellContext`PlotPosTab, All, 1]] - 0.1 Abs[Abs[
                 Min[
                  Part[$CellContext`PlotPosTab, All, 1]]] - Abs[
                Max[
                 Part[$CellContext`PlotPosTab, All, 1]]]], Max[
               Part[$CellContext`PlotPosTab, All, 1]] + 0.1 Abs[Abs[
                  Min[
                   Part[$CellContext`PlotPosTab, All, 1]]] - Abs[
                 Max[
                  
                  Part[$CellContext`PlotPosTab, All, 
                   1]]]]}; $CellContext`YRange2 = {Min[
               Part[$CellContext`PlotPosTab, All, 2]] - 0.1 Abs[
               Min[
                Part[$CellContext`PlotPosTab, All, 2]]], Max[
               Part[$CellContext`PlotPosTab, All, 2]] + 0.1 Abs[
                Max[
                 
                 Part[$CellContext`PlotPosTab, All, 
                  2]]]}]; $CellContext`fragNumber = 
         1; $CellContext`RegularView = Labeled[
           
           Show[$CellContext`PlotAll, 
            PlotRange -> {$CellContext`XRange, $CellContext`YRange, {
              0, $CellContext`H}}, BoxRatios -> $CellContext`ShowButton], 
           Style["Full View", Bold, 15], Top]; $CellContext`LeftView = Labeled[
           
           Show[$CellContext`PlotAll, 
            PlotRange -> {$CellContext`XRange, $CellContext`YRange, {
              0, $CellContext`H}}, BoxRatios -> $CellContext`ShowButton, 
            ImageSize -> 185, ViewPoint -> Front, LabelStyle -> 
            Directive[Black], ImageMargins -> 20], 
           Style["Left View", Bold, 15], Top]; $CellContext`FrontalView = 
         Labeled[
           
           Show[$CellContext`PlotAll, 
            PlotRange -> {$CellContext`XRange, $CellContext`YRange, {
              0, $CellContext`H}}, BoxRatios -> $CellContext`ShowButton, 
            ImageSize -> 185, ViewPoint -> Right, ImageMargins -> 20], 
           Style["Front View", Bold, 15], Top]; $CellContext`TopView = Labeled[
           
           Show[$CellContext`FinalPosPlot, Frame -> True, FrameStyle -> 12, 
            PlotRange -> {$CellContext`XRange2, $CellContext`YRange2}, 
            AspectRatio -> $CellContext`aspect2, LabelStyle -> 
            Directive[Black], FrameLabel -> {$CellContext`x, $CellContext`y}, 
            ImageSize -> 220], 
           Style["Top View", Bold, 15], 
           Top]; $CellContext`mainExpo = {$CellContext`RegularView, \
$CellContext`LeftView, $CellContext`FrontalView, $CellContext`TopView}; \
$CellContext`TrajectTime = Transpose[{
            Part[$CellContext`EvolTime, $CellContext`fragNumber], Part[
              Part[$CellContext`FAll, $CellContext`fragNumber], All, 1]/
            10^3}]; $CellContext`MassTimePlot = Transpose[{
            Part[$CellContext`EvolTime, $CellContext`fragNumber], 
            
            Part[$CellContext`EvolMassAll, $CellContext`fragNumber]}]; \
$CellContext`TempTimePlot = Transpose[{
            Part[$CellContext`EvolTime, $CellContext`fragNumber], 
            
            Part[$CellContext`EvolTemp, $CellContext`fragNumber]}]; \
$CellContext`VelTimePlot = Transpose[{
            Part[$CellContext`EvolTime, $CellContext`fragNumber], 
            Part[$CellContext`EvolVel, $CellContext`fragNumber]/
            10^3}]; $CellContext`RowP1Expo = 
         ListLinePlot[$CellContext`TrajectTime, Frame -> True, PlotStyle -> 
           Thick, ImageSize -> 350, FrameLabel -> {"t[s]", "X[km]"}, 
           FrameStyle -> Directive[Black, 15], ImageMargins -> 
           2]; $CellContext`RowP2Expo = 
         ListLinePlot[$CellContext`MassTimePlot, Frame -> True, PlotStyle -> 
           Thick, ImageSize -> 350, FrameLabel -> {"t[s]", "M[KG]"}, 
           FrameStyle -> Directive[Black, 15], ImageMargins -> 
           2]; $CellContext`RowP3Expo = 
         ListLinePlot[$CellContext`TempTimePlot, Frame -> True, PlotStyle -> 
           Thick, ImageSize -> 350, FrameLabel -> {"t[s]", "T[K]"}, 
           FrameStyle -> Directive[Black, 15], ImageMargins -> 
           2]; $CellContext`RowP4Expo = 
         ListLinePlot[$CellContext`VelTimePlot, Frame -> True, PlotStyle -> 
           Thick, ImageSize -> 350, FrameLabel -> {"t[s]", "V[km/s]"}, 
           FrameStyle -> Directive[Black, 15], ImageMargins -> 
           2]; $CellContext`TimeExpo = {$CellContext`RowP1Expo, \
$CellContext`RowP2Expo, $CellContext`RowP3Expo, $CellContext`RowP4Expo}; \
$CellContext`ZPlot = Part[
            Part[$CellContext`FAll, $CellContext`fragNumber], All, -1]/
          10^3; $CellContext`TrajectZi = Transpose[{Part[
              Part[$CellContext`FAll, $CellContext`fragNumber], All, 1]/
            10^3, $CellContext`ZPlot}]; $CellContext`MassZiPlot = Transpose[{
            
            Part[$CellContext`EvolMassAll, $CellContext`fragNumber], \
$CellContext`ZPlot}]; $CellContext`TempZiPlot = Transpose[{
            
            Part[$CellContext`EvolTemp, $CellContext`fragNumber], \
$CellContext`ZPlot}]; $CellContext`VelZiPlot = 
         Transpose[{
           Part[$CellContext`EvolVel, $CellContext`fragNumber]/
            10^3, $CellContext`ZPlot}]; $CellContext`ColP1Expo = 
         ListLinePlot[$CellContext`TrajectZi, Frame -> True, PlotStyle -> 
           Thick, ImageSize -> 350, FrameLabel -> {"X[km]", "Z[km]"}, 
           FrameStyle -> Directive[Black, 15], ImageMargins -> 
           2]; $CellContext`ColP2Expo = 
         ListLinePlot[$CellContext`MassZiPlot, Frame -> True, PlotStyle -> 
           Thick, ImageSize -> 350, FrameLabel -> {"M[KG]", "Z[km]"}, 
           FrameStyle -> Directive[Black, 15], ImageMargins -> 
           2]; $CellContext`ColP3Expo = 
         ListLinePlot[$CellContext`TempZiPlot, Frame -> True, PlotStyle -> 
           Thick, ImageSize -> 350, FrameLabel -> {"T[K]", "Z[km]"}, 
           FrameStyle -> Directive[Black, 15], ImageMargins -> 
           2]; $CellContext`ColP4Expo = 
         ListLinePlot[$CellContext`VelZiPlot, Frame -> True, PlotStyle -> 
           Thick, ImageSize -> 350, FrameLabel -> {"V[km/s]", "Z[km]"}, 
           FrameStyle -> Directive[Black, 15], ImageMargins -> 
           2]; $CellContext`ZExpo = {$CellContext`ColP1Expo, \
$CellContext`ColP2Expo, $CellContext`ColP3Expo, $CellContext`ColP4Expo}; \
$CellContext`OutputDir = StringJoin[
           NotebookDirectory[], 
           If[$CellContext`NameOfFile == "", 
            StringJoin[$CellContext`NameOfFile, "M_"], 
            StringJoin[$CellContext`NameOfFile, "_M_"]], 
           ToString[$CellContext`M], "_Dc_", 
           ToString[$CellContext`Dc], "_Lv_", 
           ToString[$CellContext`Lv], "_rho_", 
           ToString[$CellContext`rho], "_cp_", 
           ToString[$CellContext`cp], "_H_", 
           ToString[$CellContext`H], "_VE_", 
           ToString[$CellContext`VE], "_PhiE_", 
           ToString[$CellContext`\[Phi]E]]; $CellContext`OutputFileName = 
         StringJoin[$CellContext`OutputDir, "\\", 
           If[$CellContext`NameOfFile == "", 
            StringJoin[$CellContext`NameOfFile, "M_"], 
            StringJoin[$CellContext`NameOfFile, "_M_"]], 
           ToString[$CellContext`M], "_Dc_", 
           ToString[$CellContext`Dc], "_Lv_", 
           ToString[$CellContext`Lv], "_rho_", 
           ToString[$CellContext`rho], "_cp_", 
           ToString[$CellContext`cp], "_H_", 
           ToString[$CellContext`H], "_VE_", 
           ToString[$CellContext`VE], "_PhiE_", 
           ToString[$CellContext`\[Phi]E]]; $CellContext`TimeName = 
         StringJoin[$CellContext`OutputDir, "\\", 
           If[$CellContext`NameOfFile == "", 
            StringJoin[$CellContext`NameOfFile, "Time"], 
            
            StringJoin[$CellContext`NameOfFile, 
             "_Time"]]]; $CellContext`ZName = 
         StringJoin[$CellContext`OutputDir, "\\", 
           If[$CellContext`NameOfFile == "", 
            StringJoin[$CellContext`NameOfFile, "Z"], 
            
            StringJoin[$CellContext`NameOfFile, 
             "_Z"]]]; $CellContext`FragsName = 
         StringJoin[$CellContext`OutputDir, "\\", 
           If[$CellContext`NameOfFile == "", 
            StringJoin[$CellContext`NameOfFile, "Frags"], 
            
            StringJoin[$CellContext`NameOfFile, 
             "_Frags"]]]; $CellContext`RowP1 = 
         ListLinePlot[$CellContext`TrajectTime, Frame -> True, PlotStyle -> 
           Thick, ImageSize -> 170, ImageMargins -> 2, Prolog -> {White, 
             Rectangle[
              Scaled[{0, 0}], 
              Scaled[{1, 1}]]}]; $CellContext`RowP2 = 
         ListLinePlot[$CellContext`MassTimePlot, Frame -> True, PlotStyle -> 
           Thick, ImageSize -> 170, Prolog -> {White, 
             Rectangle[
              Scaled[{0, 0}], 
              Scaled[{1, 1}]]}]; $CellContext`RowP3 = 
         ListLinePlot[$CellContext`TempTimePlot, Frame -> True, PlotStyle -> 
           Thick, ImageSize -> 170, Prolog -> {White, 
             Rectangle[
              Scaled[{0, 0}], 
              Scaled[{1, 1}]]}]; $CellContext`RowP4 = 
         ListLinePlot[$CellContext`VelTimePlot, Frame -> True, PlotStyle -> 
           Thick, ImageSize -> 170, Prolog -> {White, 
             Rectangle[
              Scaled[{0, 0}], 
              Scaled[{1, 1}]]}]; $CellContext`ColP1 = 
         ListLinePlot[$CellContext`TrajectZi, Frame -> True, PlotStyle -> 
           Thick, ImageSize -> 170, ImageMargins -> 2, 
           FrameTicks -> {{None, All}, {All, None}}, Prolog -> {White, 
             Rectangle[
              Scaled[{0, 0}], 
              Scaled[{1, 1}]]}]; $CellContext`ColP2 = 
         ListLinePlot[$CellContext`MassZiPlot, Frame -> True, PlotStyle -> 
           Thick, ImageSize -> 170, ScalingFunctions -> {"Reverse"}, 
           FrameTicks -> {{None, All}, {All, None}}, Prolog -> {White, 
             Rectangle[
              Scaled[{0, 0}], 
              Scaled[{1, 1}]]}]; $CellContext`ColP3 = 
         ListLinePlot[$CellContext`TempZiPlot, Frame -> True, PlotStyle -> 
           Thick, ImageSize -> 170, FrameTicks -> {{None, All}, {All, None}}, 
           Prolog -> {White, 
             Rectangle[
              Scaled[{0, 0}], 
              Scaled[{1, 1}]]}]; $CellContext`ColP4 = 
         ListLinePlot[$CellContext`VelZiPlot, Frame -> True, PlotStyle -> 
           Thick, ImageSize -> 170, ScalingFunctions -> {"Reverse"}, 
           FrameTicks -> {{None, All}, {All, None}}, Prolog -> {White, 
             Rectangle[
              Scaled[{0, 0}], 
              Scaled[{1, 1}]]}]; $CellContext`MyRow = Column[{
            Row[{
              Legended[$CellContext`RowP1, 
               Placed["X[km]", Center]], 
              Legended[$CellContext`RowP2, 
               Placed["Mass[kg]", Center]], 
              Legended[$CellContext`RowP3, 
               Placed["Temperature[K]", Center]], 
              Legended[$CellContext`RowP4, 
               Placed["Velocity[km/s]", Center]]}], "Time Span[s]"}, 
           Alignment -> Center, Spacings -> 0]; $CellContext`MyCol = Labeled[
           Column[{
             Legended[$CellContext`ColP1, 
              Placed["X[km]", Center]], 
             Legended[$CellContext`ColP2, 
              Placed["Mass[kg]", Center]], 
             Legended[$CellContext`ColP3, 
              Placed["Temperature[K]", Center]], 
             Legended[$CellContext`ColP4, 
              Placed["Velocity[km/s]", Center]]}, Alignment -> Right, 
            Spacings -> 0.5], "Heigh[km]", Right, RotateLabel -> True, 
           Spacings -> 0.2]; 
        If[$CellContext`PlotArt == $CellContext`Day, $CellContext`mountains = 
           Table[{
              Part[$CellContext`XRange, 1], $CellContext`i, 
              Sin[$CellContext`i]^2 ($CellContext`H/4)}, {$CellContext`i, 
              Part[$CellContext`YRange, 1], 
              Part[$CellContext`YRange, 2], 
              Round[Round[
                 Part[
                  Differences[$CellContext`YRange], 1]]/
               80.]}]; $CellContext`PreContour = 
           ListPointPlot3D[$CellContext`mountains, PlotRange -> {{Round[
                  Part[$CellContext`XRange, 1]] - 1, Round[
                  Part[$CellContext`XRange, 2]] + 1}, {Round[
                  Part[$CellContext`YRange, 1]] - 1, Round[
                  Part[$CellContext`YRange, 2]] + 1}, {0, $CellContext`H}}, 
             Filling -> Bottom, FillingStyle -> Opacity[0.6, 
               Blend[{Brown, Green}]], PlotStyle -> Opacity[0.6, 
               Blend[{Brown, Green}]]]; $CellContext`contRight = 
           ContourPlot3D[$CellContext`y == 
             Part[$CellContext`XRange, 2], {$CellContext`x, 
              Part[$CellContext`XRange, 1], 
              Part[$CellContext`XRange, 2]}, {$CellContext`y, 
              Part[$CellContext`YRange, 1], 
              Part[$CellContext`YRange, 2]}, {$CellContext`z, 
              0, $CellContext`H}, Mesh -> None, ContourStyle -> Opacity[0.8, 
               Lighter[Cyan, 0.7]], Lighting -> {{"Ambient", 
                Lighter[Blue, 0.88]}}, 
             PlotRange -> {$CellContext`XRange, $CellContext`YRange, {
               0, $CellContext`H}}]; $CellContext`contLeft = 
           ContourPlot3D[$CellContext`y == 
             Part[$CellContext`XRange, 1], {$CellContext`x, 
              Part[$CellContext`XRange, 1], 
              Part[$CellContext`XRange, 2]}, {$CellContext`y, 
              Part[$CellContext`YRange, 1], 
              Part[$CellContext`YRange, 2]}, {$CellContext`z, 
              0, $CellContext`H}, Mesh -> None, ContourStyle -> Opacity[0.8, 
               Lighter[Cyan, 0.7]], Lighting -> {{"Ambient", 
                Lighter[Blue, 0.88]}}, 
             PlotRange -> {$CellContext`XRange, $CellContext`YRange, {
               0, $CellContext`H}}]; $CellContext`contBack = 
           ContourPlot3D[$CellContext`x == 
             Part[$CellContext`YRange, 1], {$CellContext`x, 
              Part[$CellContext`XRange, 1], 
              Part[$CellContext`XRange, 2]}, {$CellContext`y, 
              Part[$CellContext`YRange, 1], 
              Part[$CellContext`YRange, 2]}, {$CellContext`z, 
              0, $CellContext`H}, Mesh -> None, ContourStyle -> Opacity[0.8, 
               Lighter[Cyan, 0.7]], Lighting -> {{"Ambient", 
                Lighter[Blue, 0.88]}}, 
             PlotRange -> {$CellContext`XRange, $CellContext`YRange, {
               0, $CellContext`H}}]; $CellContext`contFront = 
           ContourPlot3D[$CellContext`x == 
             Part[$CellContext`YRange, 2], {$CellContext`x, 
              Part[$CellContext`XRange, 1], 
              Part[$CellContext`XRange, 2]}, {$CellContext`y, 
              Part[$CellContext`YRange, 1], 
              Part[$CellContext`YRange, 2]}, {$CellContext`z, 
              0, $CellContext`H}, Mesh -> None, ContourStyle -> Opacity[0.8, 
               Lighter[Cyan, 0.7]], Lighting -> {{"Ambient", 
                Lighter[Blue, 0.88]}}, 
             PlotRange -> {$CellContext`XRange, $CellContext`YRange, {
               0, $CellContext`H}}]; $CellContext`contBott = 
           Plot3D[{$CellContext`x = 0, $CellContext`y = 0}, {$CellContext`x, 
              Part[$CellContext`XRange, 1], 
              Part[$CellContext`XRange, 2]}, {$CellContext`y, 
              Part[$CellContext`YRange, 1], 
              Part[$CellContext`YRange, 2]}, PlotStyle -> Opacity[0.2, 
               Blend[{Brown, Green}]], Lighting -> {{"Ambient", White}}, 
             PlotRange -> {$CellContext`XRange, $CellContext`YRange, {
               0, $CellContext`H}}, Mesh -> None]; $CellContext`contTop = 
           Plot3D[{$CellContext`x = $CellContext`H, $CellContext`y = \
$CellContext`H}, {$CellContext`x, 
              Part[$CellContext`XRange, 1], 
              Part[$CellContext`XRange, 2]}, {$CellContext`y, 
              Part[$CellContext`YRange, 1], 
              Part[$CellContext`YRange, 2]}, PlotStyle -> Opacity[0.3, 
               Lighter[Cyan, 0.75]], Lighting -> {{"Ambient", 
                Lighter[Blue, 0.9]}}, 
             PlotRange -> {$CellContext`XRange, $CellContext`YRange, {
               0, $CellContext`H}}, Mesh -> None]; $CellContext`contTop2 = 
           Plot3D[{$CellContext`x = $CellContext`H, $CellContext`y = \
$CellContext`H}, {$CellContext`x, 
              Part[$CellContext`XRange, 1], 
              Part[$CellContext`XRange, 2]}, {$CellContext`y, 
              Part[$CellContext`YRange, 1], 
              Part[$CellContext`YRange, 2]}, PlotStyle -> Opacity[0.3, 
               Lighter[Cyan, 0.7]], Lighting -> {{"Ambient", 
                Lighter[Blue, 0.9]}}, 
             PlotRange -> {$CellContext`XRange, $CellContext`YRange, {
               0, $CellContext`H}}, Mesh -> None]; $CellContext`contoursDiag = 
           Show[$CellContext`contBack, $CellContext`contRight, \
$CellContext`contBott, $CellContext`contTop]; $CellContext`contoursFront = 
           Show[$CellContext`contBack, $CellContext`contRight, \
$CellContext`contFront, $CellContext`contBott, $CellContext`contTop2]; \
$CellContext`contoursLeft = 
           Show[$CellContext`contBack, $CellContext`contLeft, \
$CellContext`contRight, $CellContext`contBott, $CellContext`contTop2]; \
$CellContext`contoursFromTop = RegionPlot[
             
             Or[$CellContext`x > 
              2 Part[$CellContext`XRange, 1], $CellContext`y > 
              2 Part[$CellContext`YRange, 1]], {$CellContext`x, 2. 
              Part[$CellContext`XRange, 1], 2 
              Part[$CellContext`XRange, 2]}, {$CellContext`y, 2 
              Part[$CellContext`YRange, 1], 2 Part[$CellContext`YRange, 2]}, 
             PlotStyle -> Opacity[0.18, 
               Blend[{Brown, Green}]]]; $CellContext`sun = ListPointPlot3D[{{
               Part[$CellContext`XRange, 1], 
               Part[$CellContext`YRange, 2], $CellContext`H - 
               0.05 $CellContext`H}}, 
             PlotRange -> {$CellContext`XRange, $CellContext`YRange, {
               0, $CellContext`H}}, PlotStyle -> {
               PointSize[0.16], Yellow}]; $CellContext`main = Framed[
             Grid[{{
                
                Show[$CellContext`PlotAll, $CellContext`PreContour, \
$CellContext`sun, $CellContext`contoursDiag, Lighting -> None, 
                 PlotRange -> {{
                   Part[$CellContext`XRange, 1] - 0.03 
                    Part[$CellContext`XRange, 1], 
                    Part[$CellContext`XRange, 2] - 0.03 
                    Part[$CellContext`XRange, 2]}, {
                   Part[$CellContext`YRange, 1] - 0.03 
                    Part[$CellContext`YRange, 1], 
                    Part[$CellContext`YRange, 2] - 0.03 
                    Part[$CellContext`YRange, 2]}, {0, $CellContext`H}}, 
                 BoxRatios -> $CellContext`ShowButton], 
                
                Show[$CellContext`PlotAll, $CellContext`PreContour, \
$CellContext`sun, $CellContext`contoursFront, Lighting -> None, 
                 PlotRange -> {{
                   Part[$CellContext`XRange, 1] - 0.03 
                    Part[$CellContext`XRange, 1], 
                    Part[$CellContext`XRange, 2] - 0.03 
                    Part[$CellContext`XRange, 2]}, {
                   Part[$CellContext`YRange, 1] - 0.03 
                    Part[$CellContext`YRange, 1], 
                    Part[$CellContext`YRange, 2] - 0.03 
                    Part[$CellContext`YRange, 2]}, {0, $CellContext`H}}, 
                 BoxRatios -> $CellContext`ShowButton, ImageSize -> 185, 
                 ViewPoint -> Front]}, {
                
                Show[$CellContext`PlotAll, $CellContext`PreContour, \
$CellContext`sun, $CellContext`contoursLeft, Lighting -> None, 
                 PlotRange -> {{
                   Part[$CellContext`XRange, 1] - 0.03 
                    Part[$CellContext`XRange, 1], 
                    Part[$CellContext`XRange, 2] - 0.03 
                    Part[$CellContext`XRange, 2]}, {
                   Part[$CellContext`YRange, 1] - 0.03 
                    Part[$CellContext`YRange, 1], 
                    Part[$CellContext`YRange, 2] - 0.03 
                    Part[$CellContext`YRange, 2]}, {0, $CellContext`H}}, 
                 BoxRatios -> $CellContext`ShowButton, ImageSize -> 185, 
                 ViewPoint -> Right], 
                
                Show[$CellContext`FinalPosPlot, $CellContext`contoursFromTop, 
                 Frame -> True, FrameStyle -> 10, 
                 PlotRange -> {$CellContext`XRange2, $CellContext`YRange2}, 
                 AspectRatio -> $CellContext`aspect2]}}, Alignment -> Center, 
              Spacings -> {2.5, 0.5}], ImageSize -> {484, 460}, 
             ImageMargins -> {{0, 0}, {0, 12}}, Background -> White, 
             FrameStyle -> Black, Alignment -> Center]]; 
        If[$CellContext`PlotArt == $CellContext`Night, $CellContext`mountains = 
            Table[{
               Part[$CellContext`XRange, 1], $CellContext`i, 
               Sin[$CellContext`i]^2 ($CellContext`H/4)}, {$CellContext`i, 
               Part[$CellContext`YRange, 1], 
               Part[$CellContext`YRange, 2], 
               Round[Round[
                  Part[
                   Differences[$CellContext`YRange], 1]]/
                80.]}]; $CellContext`PreContour = 
            ListPointPlot3D[$CellContext`mountains, PlotRange -> {{Round[
                   Part[$CellContext`XRange, 1]] - 1, Round[
                   Part[$CellContext`XRange, 2]] + 1}, {Round[
                   Part[$CellContext`YRange, 1]] - 1, Round[
                   Part[$CellContext`YRange, 2]] + 1}, {0, $CellContext`H}}, 
              Filling -> Bottom, FillingStyle -> Opacity[0.6, 
                Blend[{Brown, Green}]], PlotStyle -> Opacity[0.6, 
                Blend[{Brown, Green}]]]; $CellContext`contRight = 
            ContourPlot3D[$CellContext`y == 
              Part[$CellContext`XRange, 2], {$CellContext`x, 
               Part[$CellContext`XRange, 1], 
               Part[$CellContext`XRange, 2]}, {$CellContext`y, 
               Part[$CellContext`YRange, 1], 
               Part[$CellContext`YRange, 2]}, {$CellContext`z, 
               0, $CellContext`H}, Mesh -> None, ContourStyle -> 
              RGBColor[0.041, 0.118, 0.738, 0.869], 
              Lighting -> {{"Ambient", Gray}}, 
              PlotRange -> {$CellContext`XRange, $CellContext`YRange, {
                0, $CellContext`H}}]; $CellContext`contLeft = 
            ContourPlot3D[$CellContext`y == 
              Part[$CellContext`XRange, 1], {$CellContext`x, 
               Part[$CellContext`XRange, 1], 
               Part[$CellContext`XRange, 2]}, {$CellContext`y, 
               Part[$CellContext`YRange, 1], 
               Part[$CellContext`YRange, 2]}, {$CellContext`z, 
               0, $CellContext`H}, Mesh -> None, ContourStyle -> 
              RGBColor[0.041, 0.118, 0.738, 0.869], 
              Lighting -> {{"Ambient", Gray}}, 
              PlotRange -> {$CellContext`XRange, $CellContext`YRange, {
                0, $CellContext`H}}]; $CellContext`contBack = 
            ContourPlot3D[$CellContext`x == 
              Part[$CellContext`YRange, 1], {$CellContext`x, 
               Part[$CellContext`XRange, 1], 
               Part[$CellContext`XRange, 2]}, {$CellContext`y, 
               Part[$CellContext`YRange, 1], 
               Part[$CellContext`YRange, 2]}, {$CellContext`z, 
               0, $CellContext`H}, Mesh -> None, ContourStyle -> 
              RGBColor[0.041, 0.118, 0.738, 0.869], 
              Lighting -> {{"Ambient", Gray}}, 
              PlotRange -> {$CellContext`XRange, $CellContext`YRange, {
                0, $CellContext`H}}]; $CellContext`contFront = 
            ContourPlot3D[$CellContext`x == 
              Part[$CellContext`YRange, 2], {$CellContext`x, 
               Part[$CellContext`XRange, 1], 
               Part[$CellContext`XRange, 2]}, {$CellContext`y, 
               Part[$CellContext`YRange, 1], 
               Part[$CellContext`YRange, 2]}, {$CellContext`z, 
               0, $CellContext`H}, Mesh -> None, ContourStyle -> 
              RGBColor[0.041, 0.118, 0.738, 0.9], 
              Lighting -> {{"Ambient", Gray}}, 
              PlotRange -> {$CellContext`XRange, $CellContext`YRange, {
                0, $CellContext`H}}]; $CellContext`contBott = 
            Plot3D[{$CellContext`x = 0, $CellContext`y = 0}, {$CellContext`x, 
               Part[$CellContext`XRange, 1], 
               Part[$CellContext`XRange, 2]}, {$CellContext`y, 
               Part[$CellContext`YRange, 1], 
               Part[$CellContext`YRange, 2]}, PlotStyle -> Opacity[0.6, 
                Blend[{Brown, Green}]], Lighting -> {{"Ambient", Brown}}, 
              PlotRange -> {$CellContext`XRange, $CellContext`YRange, {
                0, $CellContext`H}}, Mesh -> None]; $CellContext`contTop = 
            Plot3D[{$CellContext`x = $CellContext`H, $CellContext`y = \
$CellContext`H}, {$CellContext`x, 
               Part[$CellContext`XRange, 1], 
               Part[$CellContext`XRange, 2]}, {$CellContext`y, 
               Part[$CellContext`YRange, 1], 
               Part[$CellContext`YRange, 2]}, PlotStyle -> 
              RGBColor[0.041, 0.118, 0.738, 0.4], 
              Lighting -> {{"Ambient", Brown}}, 
              PlotRange -> {$CellContext`XRange, $CellContext`YRange, {
                0, $CellContext`H}}, Mesh -> None]; $CellContext`contTop2 = 
            Plot3D[{$CellContext`x = $CellContext`H, $CellContext`y = \
$CellContext`H}, {$CellContext`x, 
               Part[$CellContext`XRange, 1], 
               Part[$CellContext`XRange, 2]}, {$CellContext`y, 
               Part[$CellContext`YRange, 1], 
               Part[$CellContext`YRange, 2]}, PlotStyle -> 
              RGBColor[0.041, 0.118, 0.738, 0.8], 
              PlotRange -> {$CellContext`XRange, $CellContext`YRange, {
                0, $CellContext`H}}, Mesh -> None]; $CellContext`contoursDiag = 
            Show[$CellContext`contBack, $CellContext`contRight, \
$CellContext`contBott, $CellContext`contTop]; $CellContext`contoursFront = 
            Show[$CellContext`contBack, $CellContext`contRight, \
$CellContext`contFront, $CellContext`contBott, $CellContext`contTop2]; \
$CellContext`contoursLeft = 
            Show[$CellContext`contBack, $CellContext`contLeft, \
$CellContext`contRight, $CellContext`contBott, $CellContext`contTop2]; \
$CellContext`contoursFromTop = RegionPlot[
              
              Or[$CellContext`x > 
               2 Part[$CellContext`XRange, 1], $CellContext`y > 
               2 Part[$CellContext`YRange, 1]], {$CellContext`x, 2. 
               Part[$CellContext`XRange, 1], 2 
               Part[$CellContext`XRange, 2]}, {$CellContext`y, 2 
               Part[$CellContext`YRange, 1], 2 Part[$CellContext`YRange, 2]}, 
              PlotStyle -> 
              RGBColor[0.433, 0.58, 0.191, 0.411]]; $CellContext`star1 = 
            RandomReal[$CellContext`XRange, {30, 2}]; $CellContext`star2 = 
            RandomReal[$CellContext`XRange, {50, 2}]; $CellContext`star3 = 
            RandomReal[$CellContext`XRange, {30, 2}]; $CellContext`star4 = 
            RandomReal[$CellContext`YRange, {50, 
              2}]; $CellContext`topStars = {}; $CellContext`backStars = {}; \
$CellContext`leftStars = {}; $CellContext`rightStars = {}; 
           For[$CellContext`i = 1, $CellContext`i <= 
             Length[$CellContext`star1], 
             Increment[$CellContext`i], 
             AppendTo[$CellContext`topStars, {
               Part[
                Part[$CellContext`star1, $CellContext`i], 1], 
               Part[
                Part[$CellContext`star1, $CellContext`i], 
                2], $CellContext`H}]]; $CellContext`starsTop = 
            ListPointPlot3D[$CellContext`topStars, PlotRange -> {{Round[
                   Part[$CellContext`XRange, 1]] - 1, Round[
                   Part[$CellContext`XRange, 2]] + 1}, {Round[
                   Part[$CellContext`YRange, 1]] + 1, Round[
                   Part[$CellContext`YRange, 2]] - 1}, {0, $CellContext`H}}, 
              PlotStyle -> Lighter[Gray, 0.5]]; 
           For[$CellContext`i = 1, $CellContext`i <= 
             Length[$CellContext`star2], 
             Increment[$CellContext`i], 
             AppendTo[$CellContext`rightStars, {
               Part[
                Part[$CellContext`star2, $CellContext`i], 1], 
               Part[$CellContext`YRange, 2], 
               Part[
                Part[$CellContext`star2, $CellContext`i], 
                2]}]]; $CellContext`starsRight = 
            ListPointPlot3D[$CellContext`rightStars, PlotRange -> {{Round[
                   Part[$CellContext`XRange, 1]] - 1, Round[
                   Part[$CellContext`XRange, 2]] + 1}, {Round[
                   Part[$CellContext`YRange, 1]] + 1, Round[
                   Part[$CellContext`YRange, 2]] + 50}, {0, $CellContext`H}}, 
              PlotStyle -> Glow[White], 
              Lighting -> {{
                "Point", White, {0, $CellContext`H/2, $CellContext`H/2.}}}]; 
           For[$CellContext`i = 1, $CellContext`i <= 
             Length[$CellContext`star3], 
             Increment[$CellContext`i], 
             AppendTo[$CellContext`leftStars, {
               Part[
                Part[$CellContext`star3, $CellContext`i], 1], 
               Part[$CellContext`YRange, 1], 
               Part[
                Part[$CellContext`star3, $CellContext`i], 
                2]}]]; $CellContext`starsLeft = 
            ListPointPlot3D[$CellContext`leftStars, PlotRange -> {{Round[
                   Part[$CellContext`XRange, 1]] - 1, Round[
                   Part[$CellContext`XRange, 2]] + 1}, {Round[
                   Part[$CellContext`YRange, 1]] - 1, Round[
                   Part[$CellContext`YRange, 2]] + 1}, {0, $CellContext`H}}, 
              PlotStyle -> Lighter[Gray, 0.5]]; 
           For[$CellContext`i = 1, $CellContext`i <= 
             Length[$CellContext`star4], 
             Increment[$CellContext`i], 
             AppendTo[$CellContext`backStars, {
               Part[$CellContext`YRange, 1], 
               Part[
                Part[$CellContext`star4, $CellContext`i], 1], 
               Part[
                Part[$CellContext`star4, $CellContext`i], 
                2]}]]; $CellContext`starsBack = 
            ListPointPlot3D[$CellContext`backStars, PlotRange -> {{Round[
                   Part[$CellContext`XRange, 1]] - 1, Round[
                   Part[$CellContext`XRange, 2]] + 1}, {Round[
                   Part[$CellContext`YRange, 1]] - 1, Round[
                   Part[$CellContext`YRange, 2]] + 1}, {$CellContext`H/
                 3, $CellContext`H}}, PlotStyle -> 
              Glow[White]]; $CellContext`main = Framed[
              Grid[{{
                 
                 Show[$CellContext`PlotAll, $CellContext`PreContour, \
$CellContext`starsTop, $CellContext`starsBack, $CellContext`starsRight, \
$CellContext`contoursDiag, Lighting -> None, 
                  PlotRange -> {{
                    Part[$CellContext`XRange, 1] - 0.03 
                    Part[$CellContext`XRange, 1], 
                    Part[$CellContext`XRange, 2] - 0.03 
                    Part[$CellContext`XRange, 2]}, {
                    Part[$CellContext`YRange, 1] - 0.03 
                    Part[$CellContext`YRange, 1], 
                    Part[$CellContext`YRange, 2] - 0.03 
                    Part[$CellContext`YRange, 2]}, {0, $CellContext`H}}, 
                  BoxRatios -> $CellContext`ShowButton], 
                 
                 Show[$CellContext`PlotAll, $CellContext`starsTop, \
$CellContext`starsBack, $CellContext`starsRight, $CellContext`PreContour, \
$CellContext`contoursFront, Lighting -> None, 
                  PlotRange -> {{
                    Part[$CellContext`XRange, 1] - 0.03 
                    Part[$CellContext`XRange, 1], 
                    Part[$CellContext`XRange, 2] - 0.03 
                    Part[$CellContext`XRange, 2]}, {
                    Part[$CellContext`YRange, 1] - 0.03 
                    Part[$CellContext`YRange, 1], 
                    Part[$CellContext`YRange, 2] - 0.03 
                    Part[$CellContext`YRange, 2]}, {0, $CellContext`H}}, 
                  BoxRatios -> $CellContext`ShowButton, ImageSize -> 185, 
                  ViewPoint -> Front]}, {
                 
                 Show[$CellContext`PlotAll, $CellContext`starsTop, \
$CellContext`starsBack, $CellContext`starsRight, $CellContext`starsLeft, \
$CellContext`PreContour, $CellContext`contoursLeft, Lighting -> None, 
                  PlotRange -> {{
                    Part[$CellContext`XRange, 1] - 0.03 
                    Part[$CellContext`XRange, 1], 
                    Part[$CellContext`XRange, 2] - 0 0.03 
                    Part[$CellContext`XRange, 2]}, {
                    Part[$CellContext`YRange, 1] - 0.03 
                    Part[$CellContext`YRange, 1], 
                    Part[$CellContext`YRange, 2] - 0.03 
                    Part[$CellContext`YRange, 2]}, {0, $CellContext`H}}, 
                  BoxRatios -> $CellContext`ShowButton, ImageSize -> 185, 
                  ViewPoint -> Right], 
                 
                 Show[$CellContext`FinalPosPlot, $CellContext`contoursFromTop,
                   Frame -> True, FrameStyle -> 10, 
                  PlotRange -> {$CellContext`XRange2, $CellContext`YRange2}, 
                  AspectRatio -> $CellContext`aspect2]}}, Alignment -> Center,
                Spacings -> {2.5, 0.5}], ImageSize -> {484, 460}, 
              ImageMargins -> {{0, 0}, {0, 12}}, Background -> White, 
              FrameStyle -> Black, Alignment -> Center]] 
         If[$CellContext`PlotArt == None, $CellContext`main = Framed[
             Grid[{{
                
                Show[$CellContext`PlotAll, 
                 PlotRange -> {$CellContext`XRange, $CellContext`YRange, {
                   0, $CellContext`H}}, BoxRatios -> $CellContext`ShowButton], 
                
                Show[$CellContext`PlotAll, 
                 PlotRange -> {$CellContext`XRange, $CellContext`YRange, {
                   0, $CellContext`H}}, BoxRatios -> $CellContext`ShowButton, 
                 ImageSize -> 185, ViewPoint -> Front]}, {
                
                Show[$CellContext`PlotAll, 
                 PlotRange -> {$CellContext`XRange, $CellContext`YRange, {
                   0, $CellContext`H}}, BoxRatios -> $CellContext`ShowButton, 
                 ImageSize -> 185, ViewPoint -> Right], 
                
                Show[$CellContext`FinalPosPlot, Frame -> True, FrameStyle -> 
                 10, PlotRange -> {$CellContext`XRange2, \
$CellContext`YRange2}, AspectRatio -> $CellContext`aspect2]}}, Alignment -> 
              Center, Spacings -> {2.5, 0.5}], ImageSize -> {484, 460}, 
             ImageMargins -> {{0, 0}, {0, 12}}, Background -> White, 
             FrameStyle -> Black, Alignment -> Center]]; Framed[
          Column[{
            Row[{"   ", $CellContext`main, " ", $CellContext`MyCol}], 
            "", $CellContext`MyRow}, Spacings -> {0, 0}, Background -> Dynamic[
             Lighter[$CellContext`MyColor, 0.96]]], FrameStyle -> Dynamic[
            Lighter[$CellContext`MyColor, 0.69]], RoundingRadius -> 5, 
          Background -> Dynamic[
            Lighter[$CellContext`MyColor, 0.69]], FrameMargins -> 2, 
          ImageMargins -> {{0, 0}, {0, -5}}]), 
       "Specifications" :> {{{$CellContext`nfrags, 1, ""}, 1, 24, 1, 
          ControlType -> PopupMenu, ImageSize -> {40, 22}, ControlPlacement -> 
          1}, {{$CellContext`mass, $CellContext`unif, ""}, 
          Dynamic[
           
           If[$CellContext`nfrags > 
            1, {$CellContext`unif -> "Uniform", $CellContext`random -> 
             "Random", $CellContext`cresce -> "Crescente", 
             
             If[$CellContext`nfrags > 2, $CellContext`cresce2 -> 
              "Crescente(2)"], $CellContext`decresce -> "Decrescente", 
             
             If[$CellContext`nfrags > 2, $CellContext`decresce2 -> 
              "Decrescente(2)"]}, {$CellContext`unif -> "Uniform"}]], 
          ControlType -> PopupMenu, ImageSize -> {98, 22}, ControlPlacement -> 
          2}, {{$CellContext`UnifAngle, True, "         "}, {True, False}, 
          ControlType -> Checkbox, Background -> 
          Dynamic[$CellContext`MyColor], Enabled -> Dynamic[
            If[$CellContext`RandomAngle == True, False, True]], 
          ControlPlacement -> 
          3}, {{$CellContext`RandomAngle, False, "     "}, {True, False}, 
          ControlType -> Checkbox, Background -> 
          Dynamic[$CellContext`MyColor], Enabled -> Dynamic[
            If[$CellContext`UnifAngle == True, False, True]], 
          ControlPlacement -> 4}, {{$CellContext`Q2, False, ""}, {
          True, False}, ControlType -> Checkbox, Background -> 
          Dynamic[$CellContext`MyColor], Enabled -> Dynamic[
            If[
             Or[$CellContext`UnifAngle, $CellContext`RandomAngle == True], 
             False, True]], ControlPlacement -> 
          5}, {{$CellContext`Q3, False, ""}, {True, False}, ControlType -> 
          Checkbox, Background -> Dynamic[$CellContext`MyColor], Enabled -> 
          Dynamic[
            If[
             Or[$CellContext`UnifAngle, $CellContext`RandomAngle == True], 
             False, True]], ControlPlacement -> 
          6}, {{$CellContext`Q1, False, ""}, {True, False}, ControlType -> 
          Checkbox, Background -> Dynamic[$CellContext`MyColor], Enabled -> 
          Dynamic[
            If[
             Or[$CellContext`UnifAngle, $CellContext`RandomAngle == True], 
             False, True]], ControlPlacement -> 
          7}, {{$CellContext`Q4, False, ""}, {True, False}, ControlType -> 
          Checkbox, Background -> Dynamic[$CellContext`MyColor], Enabled -> 
          Dynamic[
            If[
             Or[$CellContext`UnifAngle, $CellContext`RandomAngle == True], 
             False, True]], ControlPlacement -> 
          8}, {{$CellContext`MassDecal, $CellContext`DecalOFF, 
           ""}, {$CellContext`DecalOFF -> 
           Style["Off", 10], $CellContext`DecalON -> Style["On", 10]}, 
          ControlType -> Setter, Appearance -> "DialogBox", ImageMargins -> 0,
           FrameMargins -> 0, ImageSize -> Tiny, ControlPlacement -> 
          9}, {{$CellContext`MassValues, $CellContext`ValuesOFF, 
           ""}, {$CellContext`ValuesOFF -> 
           Style["Off", 10], $CellContext`ValuesON -> Style["On", 10]}, 
          ControlType -> Setter, Appearance -> "DialogBox", ImageMargins -> 0,
           FrameMargins -> 0, ImageSize -> Tiny, ControlPlacement -> 
          10}, {{$CellContext`DisplayCM, $CellContext`CMOFF, 
           ""}, {$CellContext`CMOFF -> Style["Off", 10], $CellContext`CMON -> 
           Style["On", 10]}, ControlType -> Setter, Appearance -> "DialogBox",
           ImageMargins -> 0, FrameMargins -> 0, ImageSize -> Tiny, 
          ControlPlacement -> 
          11}, {{$CellContext`JoinPoints, $CellContext`JOINOFF, 
           ""}, {$CellContext`JOINOFF -> 
           Style["Off", 10], $CellContext`JOINON -> Style["On", 10]}, 
          ControlType -> Setter, Appearance -> "DialogBox", ImageMargins -> 0,
           FrameMargins -> 0, ImageSize -> Tiny, ControlPlacement -> 
          12}, {{$CellContext`axis2, False, ""}, {
          False -> Style["Off", 10], True -> Style["On", 10]}, ControlType -> 
          Setter, Appearance -> "DialogBox", ImageMargins -> 0, FrameMargins -> 
          0, ImageSize -> Tiny, ControlPlacement -> 
          13}, {{$CellContext`aspect2, 1, ""}, {
          1 -> Style["1x1", 10], Automatic -> Style["Realistic", 10]}, 
          ControlType -> Setter, Appearance -> "DialogBox", ImageMargins -> 0,
           FrameMargins -> 0, ImageSize -> Tiny, ControlPlacement -> 
          14}, {{$CellContext`OpacityButton, $CellContext`OpacityOff, 
           ""}, {$CellContext`OpacityOff -> 
           Style["Off", 10], $CellContext`OpacityOn -> Style["On", 10]}, 
          ControlType -> Setter, Appearance -> "DialogBox", ImageMargins -> 0,
           FrameMargins -> 0, ImageSize -> Tiny, ControlPlacement -> 
          15}, {{$CellContext`ColorType, $CellContext`GRAY, 
           ""}, {$CellContext`GRAY -> Style["Off", 10], $CellContext`HUE -> 
           Style["On", 10]}, ControlType -> Setter, Appearance -> "DialogBox",
           ImageMargins -> 0, ImageSize -> Tiny, ControlPlacement -> 
          16}, {{$CellContext`ShowButton, {1, 1, 1}, ""}, {{1, 1, 1} -> 
           Style["1x1x1", 10], Automatic -> Style["Realistic", 10]}, 
          ControlType -> Setter, Appearance -> "DialogBox", ImageMargins -> 0,
           FrameMargins -> 0, ImageSize -> Tiny, ControlPlacement -> 
          17}, {{$CellContext`XxZ, True, ""}, {True, False}, ControlType -> 
          Checkbox, Enabled -> Dynamic[
            If[$CellContext`AllZ == True, False, True]], ControlPlacement -> 
          18}, {{$CellContext`Xxt, True, ""}, {True, False}, ControlType -> 
          Checkbox, Enabled -> Dynamic[
            If[$CellContext`Allt == True, False, True]], ControlPlacement -> 
          19}, {{$CellContext`MxZ, True, ""}, {True, False}, ControlType -> 
          Checkbox, Enabled -> Dynamic[
            If[$CellContext`AllZ == True, False, True]], ControlPlacement -> 
          20}, {{$CellContext`Mxt, True, ""}, {True, False}, ControlType -> 
          Checkbox, Enabled -> Dynamic[
            If[$CellContext`Allt == True, False, True]], ControlPlacement -> 
          21}, {{$CellContext`TxZ, True, ""}, {True, False}, ControlType -> 
          Checkbox, Enabled -> Dynamic[
            If[$CellContext`AllZ == True, False, True]], ControlPlacement -> 
          22}, {{$CellContext`Txt, True, ""}, {True, False}, ControlType -> 
          Checkbox, Enabled -> Dynamic[
            If[$CellContext`Allt == True, False, True]], ControlPlacement -> 
          23}, {{$CellContext`VxZ, True, ""}, {True, False}, ControlType -> 
          Checkbox, Enabled -> Dynamic[
            If[$CellContext`AllZ == True, False, True]], ControlPlacement -> 
          24}, {{$CellContext`Vxt, True, ""}, {True, False}, ControlType -> 
          Checkbox, Enabled -> Dynamic[
            If[$CellContext`Allt == True, False, True]], ControlPlacement -> 
          25}, {{$CellContext`AllZ, True, ""}, {True, False}, ControlType -> 
          Checkbox, ControlPlacement -> 26}, {{$CellContext`Allt, True, ""}, {
          True, False}, ControlType -> Checkbox, ControlPlacement -> 
          27}, {{$CellContext`AllFrags, True, ""}, {True, False}, ControlType -> 
          Checkbox, ControlPlacement -> 
          28}, {{$CellContext`LeftUp, True, ""}, {True, False}, ControlType -> 
          Checkbox, Enabled -> Dynamic[
            If[$CellContext`AllFrags == True, False, True]], ControlPlacement -> 
          29}, {{$CellContext`RightUp, True, ""}, {True, False}, ControlType -> 
          Checkbox, Enabled -> Dynamic[
            If[$CellContext`AllFrags == True, False, True]], ControlPlacement -> 
          30}, {{$CellContext`LeftBot, True, ""}, {True, False}, ControlType -> 
          Checkbox, Enabled -> Dynamic[
            If[$CellContext`AllFrags == True, False, True]], ControlPlacement -> 
          31}, {{$CellContext`RightBot, True, ""}, {True, False}, ControlType -> 
          Checkbox, Enabled -> Dynamic[
            If[$CellContext`AllFrags == True, False, True]], ControlPlacement -> 
          32}, {{$CellContext`PlotArt, None, ""}, {
          None -> "None", $CellContext`Day -> "Day", $CellContext`Night -> 
           "Night"}, ControlType -> SetterBar, Appearance -> "Row", 
          ImageMargins -> 0, FrameMargins -> 0, ImageSize -> Tiny, 
          ControlPlacement -> 33}, 
         Framed[
          Column[{
            Framed[
             Grid[{{
                Column[{
                  Style[" Object Parameters", 12, Bold], 
                  Column[{
                    Style[" Object Mass"], 
                    Labeled[
                    InputField[
                    Dynamic[$CellContext`M], Number, FieldHint -> 
                    "10-15000000", FieldSize -> {7.5, 1.05}, ImageMargins -> 
                    0], "kg", Right]}], 
                  Column[{
                    Style[" Air Resit. Coeff."], 
                    Labeled[
                    InputField[
                    Dynamic[$CellContext`Dc], Number, FieldHint -> "0-3", 
                    FieldSize -> {7.5, 1.05}], "Smth", Right]}], 
                  Column[{
                    Style[" Vaporization Heat"], 
                    Labeled[
                    InputField[
                    Dynamic[$CellContext`Lv], Number, FieldHint -> 
                    "1000-50000", FieldSize -> {7.5, 1.05}], "J/kg", Right]}], 
                  Column[{
                    Style[" Density"], 
                    Labeled[
                    InputField[
                    Dynamic[$CellContext`rho], Number, FieldHint -> 
                    "2000-3500", FieldSize -> {7.5, 1.05}], 
                    "kg/\!\(\*SuperscriptBox[\(m\), \(3\)]\)", Right]}], 
                  Column[{
                    Style[" Heat Capacity"], 
                    Labeled[
                    DynamicModule[{$CellContext`cp = 500}, 
                    InputField[
                    Dynamic[$CellContext`cp], Number, FieldHint -> "400-900", 
                    FieldSize -> {7.5, 1.05}], DynamicModuleValues :> {}], 
                    "J/(kg K)", Right]}], 
                  Column[{
                    Style[" Entrance Parameters    ", 12, Bold], 
                    Column[{
                    Style[" Height"], 
                    Labeled[
                    InputField[
                    Dynamic[$CellContext`H], Number, FieldHint -> "0-100000", 
                    ContinuousAction -> True, FieldSize -> {7.5, 1.05}], "m", 
                    Right]}], 
                    Column[{
                    Style[" Entrance Velocity"], 
                    Labeled[
                    InputField[
                    Dynamic[$CellContext`VE], Number, FieldHint -> "10-20000",
                     FieldSize -> {7.5, 1.05}], "m/s", Right]}], 
                    Column[{
                    Style[" Entrance Angle"], 
                    Labeled[
                    InputField[
                    Dynamic[$CellContext`\[Phi]E], Number, FieldHint -> 
                    "90-180", FieldSize -> {7.5, 1.05}], "\[Degree]", 
                    Right]}]}, Left, 
                   Dividers -> {
                    None, {2 -> Dynamic[$CellContext`MyColor], 1 -> 
                    Dynamic[$CellContext`MyColor]}}, Spacings -> {0.5, 1}]}, 
                 Left, Dividers -> {
                  None, {2 -> Dynamic[$CellContext`MyColor], 1 -> 
                    Dynamic[$CellContext`MyColor]}}, Spacings -> {0.5, 1.}], 
                Column[{
                  Style[" Fragmentation Parameters", 12, Bold], 
                  Column[{
                    Style[" Fragmentation Height"], 
                    Labeled[
                    InputField[
                    Dynamic[$CellContext`HFrag], Number, FieldHint -> 
                    "0-100000", FieldSize -> {7.5, 1.05}], "m", Right]}], 
                  Column[{
                    Style[" Fragmentation Energy"], 
                    Labeled[
                    InputField[
                    Dynamic[$CellContext`Efr], Number, FieldHint -> 
                    "0-1000000", FieldSize -> {7.5, 1.05}], "J", Right]}], 
                  Column[{
                    Style["Number of Fragments"], 
                    Manipulate`Place[1]}], 
                  Column[{
                    Style["Mass Distribution"], 
                    Manipulate`Place[2]}], 
                  Column[{"Fragments Direction", "", 
                    Column[{
                    Row[{
                    Column[{"       Uniform", 
                    Manipulate`Place[3]}], 
                    Column[{"   Random", 
                    Manipulate`Place[4]}]}], Null, 
                    Column[{"        Spread on Quadrant", 
                    Row[{
                    Column[{
                    Labeled[
                    Manipulate`Place[5], 
                    "         \!\(\*SuperscriptBox[\(2\), \(nd\)]\)", Left, 
                    Spacings -> {0, 0}], 
                    Labeled[
                    Manipulate`Place[6], 
                    "         \!\(\*SuperscriptBox[\(3\), \(rd\)]\) ", Left, 
                    Spacings -> {0, 0}]}], 
                    Column[{
                    Labeled[
                    Manipulate`Place[7], 
                    "\!\(\*SuperscriptBox[\(1\), \(\(st\)\(\\ \)\)]\)", 
                    Right], 
                    Labeled[
                    Manipulate`Place[8], 
                    "\!\(\*SuperscriptBox[\(4\), \(th\)]\)", Right]}]}]}], 
                    ""}, Alignment -> Center, Spacings -> {0, -0.2}]}, 
                   Alignment -> Left, Spacings -> {0, 0}], 
                  Labeled[
                   Framed[
                    Grid[{{"#", "Param.", "Value"}, {
                    Dynamic[
                    ToString[$CellContext`fragID]], "Height", 
                    Dynamic[
                    Part[$CellContext`Zi, -1]]}, {
                    Dynamic[
                    ToString[$CellContext`fragID]], "Mass", 
                    Dynamic[$CellContext`dm]}}, Alignment -> Left, Background -> 
                    Dynamic[
                    Lighter[$CellContext`MyColor, 0.9]], ItemStyle -> 
                    Directive[FontSize -> 11.5, 
                    GrayLevel[0]]], Background -> Dynamic[
                    Lighter[$CellContext`MyColor, 0.9]], FrameStyle -> Dynamic[
                    Lighter[$CellContext`MyColor, 0.1]], RoundingRadius -> 2, 
                    Alignment -> Left, ImageSize -> {160, Automatic}], 
                   Style["Simulation Evolution", 12], Top]}, Left, 
                 Dividers -> {
                  None, {1 -> Dynamic[$CellContext`MyColor], 2 -> 
                    Dynamic[$CellContext`MyColor], -2 -> 
                    Dynamic[$CellContext`MyColor]}}, Spacings -> {0.5, 1.}], 
                Column[{
                  Style[" Definitions", 12, Bold], 
                  Column[{
                    Style[" Time Step"], 
                    Labeled[
                    InputField[
                    Dynamic[$CellContext`TimeStep], Number, FieldHint -> 
                    "10-15000000", FieldSize -> {7.5, 1.05}, ImageMargins -> 
                    0], "s", Right]}], 
                  Column[{
                    Style[" Mass Limit"], 
                    Labeled[
                    InputField[
                    Dynamic[$CellContext`MTolerance], Number, FieldHint -> 
                    "10-15000000", FieldSize -> {7.5, 1.05}, ImageMargins -> 
                    0], "kg", Right]}], 
                  Column[{
                    Style[" Plot Options", 12, Bold], 
                    Column[{
                    Style["Top View", 10, Bold], 
                    Labeled[
                    Manipulate`Place[9], "Mass Opacity", Right], 
                    Labeled[
                    Manipulate`Place[10], "Mass Values", Right], 
                    Labeled[
                    Manipulate`Place[11], "Display CM", Right], 
                    Labeled[
                    Manipulate`Place[12], "Join Dots", Right], 
                    Labeled[
                    Manipulate`Place[13], "Display Axis", Right], 
                    Labeled[
                    Manipulate`Place[14], "Aspect", Right]}], 
                    Column[{
                    Style["3D Plots", 10, Bold], 
                    Labeled[
                    Manipulate`Place[15], "Mass Evol.", Right], 
                    Labeled[
                    Manipulate`Place[16], "Color Map", Right], 
                    Labeled[
                    Manipulate`Place[17], "Aspect", Right]}]}, Left, 
                   Dividers -> {None, {3 -> {
                    Dashing[{0, Small}], 
                    Dynamic[$CellContext`MyColor]}, 2 -> 
                    Dynamic[$CellContext`MyColor], 1 -> 
                    Dynamic[$CellContext`MyColor]}}, Spacings -> {0.5, 0.6}]},
                  Left, Dividers -> {
                  None, {2 -> Dynamic[$CellContext`MyColor], 1 -> 
                    Dynamic[$CellContext`MyColor]}}, Spacings -> {0.5, 1.}, 
                 Background -> Dynamic[
                   Lighter[$CellContext`MyColor, 0.96]]]}}, 
              Dividers -> {{
                1 -> None, 2 -> Dynamic[$CellContext`MyColor], 3 -> 
                 Dynamic[$CellContext`MyColor], 4 -> None}, None}, Alignment -> 
              Top, Spacings -> {1, 0}, Background -> Dynamic[
                Lighter[$CellContext`MyColor, 0.96]]], FrameStyle -> Dynamic[
               Lighter[$CellContext`MyColor, 0.8]], Background -> Dynamic[
               Lighter[$CellContext`MyColor, 0.96]], RoundingRadius -> 5, 
             ImageSize -> {475, Automatic}], 
            Framed[
             Row[{
               Column[{
                 Style[" Export Results ", 12, Bold], 
                 Row[{"Table of Results ", 
                   InputField[
                    Dynamic[$CellContext`NameOfFile], String, FieldHint -> 
                    "Name of File", FieldSize -> Small], 
                   Button[
                    Style["pdf", 10], 
                    Export[If[DirectoryQ[$CellContext`OutputDir] == False, 
                    CreateDirectory[$CellContext`OutputDir]]; 
                    StringJoin[$CellContext`OutputFileName, 
                    ".pdf"], $CellContext`MeteoPdf], ImageSize -> {27, 20}, 
                    FrameMargins -> 0], 
                   Button[
                    Style["xls", 10], 
                    Export[If[DirectoryQ[$CellContext`OutputDir] == False, 
                    CreateDirectory[$CellContext`OutputDir]]; 
                    StringJoin[$CellContext`OutputFileName, 
                    ".xls"], $CellContext`MeteoTable], ImageSize -> {27, 20}, 
                    FrameMargins -> 0], 
                   Button[
                    Style["png", 10], 
                    Export[If[DirectoryQ[$CellContext`OutputDir] == False, 
                    CreateDirectory[$CellContext`OutputDir]]; 
                    StringJoin[$CellContext`OutputFileName, 
                    ".png"], $CellContext`MeteoPNG], ImageSize -> {27, 20}, 
                    FrameMargins -> 0]}, "  "], 
                 Row[{"Evolution Plots", 
                   Row[{
                    Column[{" ", 
                    Row[{" All", 
                    Manipulate`Place[26]}], 
                    Row[{" All", 
                    Manipulate`Place[27]}]}, Spacings -> 0], " ", 
                    Row[{
                    Column[{"   X", 
                    Manipulate`Place[18], 
                    Manipulate`Place[19]}, Spacings -> 0], 
                    Column[{"   M", 
                    Manipulate`Place[20], 
                    Manipulate`Place[21]}, Spacings -> 0], 
                    Column[{"   T", 
                    Manipulate`Place[22], 
                    Manipulate`Place[23]}, Spacings -> 0], 
                    Column[{"   V", 
                    Manipulate`Place[24], 
                    Manipulate`Place[25]}, Spacings -> 0], 
                    
                    Column[{"", "  Height  ", "  Time  "}, Spacings -> 0, 
                    Alignment -> Left]}]}], 
                   Column[{"", 
                    Dynamic[
                    Button[
                    Style["eps", 10], 
                    If[DirectoryQ[$CellContext`OutputDir] == False, 
                    CreateDirectory[$CellContext`OutputDir]]; And[
                    If[
                    Count[{$CellContext`Xxt, $CellContext`Mxt, \
$CellContext`Txt, $CellContext`Vxt}, True] != 0, 
                    Export[
                    StringJoin[$CellContext`TimeName, ".eps"], 
                    If[
                    Inequality[0, Less, 
                    
                    Count[{$CellContext`Xxt, $CellContext`Mxt, \
$CellContext`Txt, $CellContext`Vxt}, True], LessEqual, 3], 
                    Dynamic[
                    Labeled[
                    GraphicsRow[
                    Extract[$CellContext`TimeExpo, 
                    
                    Position[{$CellContext`Xxt, $CellContext`Mxt, \
$CellContext`Txt, $CellContext`Vxt}, True]], ImageSize -> 
                    Count[{$CellContext`XxZ, $CellContext`MxZ, \
$CellContext`TxZ, $CellContext`VxZ}, True] 450], 
                    Style["Time Evolution", Bold, 25], Top]], 
                    Labeled[
                    
                    GraphicsGrid[{{$CellContext`RowP1Expo, \
$CellContext`RowP2Expo}, {$CellContext`RowP3Expo, $CellContext`RowP4Expo}}, 
                    ImageSize -> 1500], 
                    Style["Time Evolution", Bold, 25], Top]]]], 
                    If[$CellContext`Allt == True, 
                    Export[
                    StringJoin[$CellContext`TimeName, ".eps"], 
                    Labeled[
                    
                    GraphicsGrid[{{$CellContext`RowP1Expo, \
$CellContext`RowP2Expo}, {$CellContext`RowP3Expo, $CellContext`RowP4Expo}}, 
                    ImageSize -> 1500], 
                    Style["Time Evolution", Bold, 25], Top]]], 
                    If[
                    Count[{$CellContext`XxZ, $CellContext`MxZ, \
$CellContext`TxZ, $CellContext`VxZ}, True] != 0, 
                    Export[
                    StringJoin[$CellContext`ZName, ".eps"], 
                    If[
                    Inequality[0, Less, 
                    
                    Count[{$CellContext`XxZ, $CellContext`MxZ, \
$CellContext`TxZ, $CellContext`VxZ}, True], LessEqual, 3], 
                    Dynamic[
                    Labeled[
                    GraphicsRow[
                    Extract[$CellContext`ZExpo, 
                    
                    Position[{$CellContext`XxZ, $CellContext`MxZ, \
$CellContext`TxZ, $CellContext`VxZ}, True]], ImageSize -> 
                    Count[{$CellContext`XxZ, $CellContext`MxZ, \
$CellContext`TxZ, $CellContext`VxZ}, True] 450], 
                    Style["Height Evolution", Bold, 25], Top]], 
                    Labeled[
                    
                    GraphicsGrid[{{$CellContext`ColP1Expo, \
$CellContext`ColP2Expo}, {$CellContext`ColP3Expo, $CellContext`ColP4Expo}}, 
                    ImageSize -> 1500], 
                    Style["Height Evolution", Bold, 25], Top]]]], 
                    If[$CellContext`AllZ == True, 
                    Export[
                    StringJoin[$CellContext`ZName, ".eps"], 
                    Labeled[
                    
                    GraphicsGrid[{{$CellContext`ColP1Expo, \
$CellContext`ColP2Expo}, {$CellContext`ColP3Expo, $CellContext`ColP4Expo}}, 
                    ImageSize -> 1500], 
                    Style["Height Evolution", Bold, 25], Top]]]], 
                    ImageSize -> {27, 20}, FrameMargins -> 0]]}], "  ", 
                   Column[{"", 
                    Dynamic[
                    Button[
                    Style["png", 10], 
                    If[DirectoryQ[$CellContext`OutputDir] == False, 
                    CreateDirectory[$CellContext`OutputDir]]; And[
                    If[
                    Count[{$CellContext`Xxt, $CellContext`Mxt, \
$CellContext`Txt, $CellContext`Vxt}, True] != 0, 
                    Export[
                    StringJoin[$CellContext`TimeName, ".png"], 
                    If[
                    Inequality[0, Less, 
                    
                    Count[{$CellContext`Xxt, $CellContext`Mxt, \
$CellContext`Txt, $CellContext`Vxt}, True], LessEqual, 3], 
                    Dynamic[
                    Labeled[
                    GraphicsRow[
                    Extract[$CellContext`TimeExpo, 
                    
                    Position[{$CellContext`Xxt, $CellContext`Mxt, \
$CellContext`Txt, $CellContext`Vxt}, True]], ImageSize -> 
                    Count[{$CellContext`XxZ, $CellContext`MxZ, \
$CellContext`TxZ, $CellContext`VxZ}, True] 450], 
                    Style["Time Evolution", Bold, 25], Top]], 
                    Labeled[
                    
                    GraphicsGrid[{{$CellContext`RowP1Expo, \
$CellContext`RowP2Expo}, {$CellContext`RowP3Expo, $CellContext`RowP4Expo}}, 
                    ImageSize -> 1500], 
                    Style["Time Evolution", Bold, 25], Top]]]], 
                    If[$CellContext`Allt == True, 
                    Export[
                    StringJoin[$CellContext`TimeName, ".png"], 
                    Labeled[
                    
                    GraphicsGrid[{{$CellContext`RowP1Expo, \
$CellContext`RowP2Expo}, {$CellContext`RowP3Expo, $CellContext`RowP4Expo}}, 
                    ImageSize -> 1500], 
                    Style["Time Evolution", Bold, 25], Top]]], 
                    If[
                    Count[{$CellContext`XxZ, $CellContext`MxZ, \
$CellContext`TxZ, $CellContext`VxZ}, True] != 0, 
                    Export[
                    StringJoin[$CellContext`ZName, ".png"], 
                    If[
                    Inequality[0, Less, 
                    
                    Count[{$CellContext`XxZ, $CellContext`MxZ, \
$CellContext`TxZ, $CellContext`VxZ}, True], LessEqual, 3], 
                    Dynamic[
                    Labeled[
                    GraphicsRow[
                    Extract[$CellContext`ZExpo, 
                    
                    Position[{$CellContext`XxZ, $CellContext`MxZ, \
$CellContext`TxZ, $CellContext`VxZ}, True]], ImageSize -> 
                    Count[{$CellContext`XxZ, $CellContext`MxZ, \
$CellContext`TxZ, $CellContext`VxZ}, True] 450], 
                    Style["Height Evolution", Bold, 25], Top]], 
                    Labeled[
                    
                    GraphicsGrid[{{$CellContext`ColP1Expo, \
$CellContext`ColP2Expo}, {$CellContext`ColP3Expo, $CellContext`ColP4Expo}}, 
                    ImageSize -> 1500], 
                    Style["Height Evolution", Bold, 25], Top]]]], 
                    If[$CellContext`AllZ == True, 
                    Export[
                    StringJoin[$CellContext`ZName, ".png"], 
                    Labeled[
                    
                    GraphicsGrid[{{$CellContext`ColP1Expo, \
$CellContext`ColP2Expo}, {$CellContext`ColP3Expo, $CellContext`ColP4Expo}}, 
                    ImageSize -> 1500], 
                    Style["Height Evolution", Bold, 25], Top]]]], 
                    ImageSize -> {27, 20}, FrameMargins -> 0]]}]}, Alignment -> 
                  Left]}, 
                Dividers -> {
                 2 -> None, {
                  1 -> None, 2 -> None, 3 -> Dynamic[$CellContext`MyColor]}}, 
                Spacings -> {0, 0.4}], "  ", 
               Column[{"", "  Fragmentation Plots", 
                 Labeled[
                  Manipulate`Place[28], "All", Right], 
                 Row[{
                   Grid[{{
                    Manipulate`Place[29], 
                    Manipulate`Place[30]}, {
                    Manipulate`Place[31], 
                    Manipulate`Place[32]}}, Spacings -> 0], "  ", 
                   Dynamic[
                    Button[
                    Style["eps", 10], 
                    If[DirectoryQ[$CellContext`OutputDir] == False, 
                    CreateDirectory[$CellContext`OutputDir]]; And[
                    If[
                    Count[{$CellContext`LeftUp, $CellContext`RightUp, \
$CellContext`LeftBot, $CellContext`RightBot}, True] != 0, 
                    Export[
                    StringJoin[$CellContext`FragsName, ".eps"], 
                    If[
                    Inequality[0, Less, 
                    
                    Count[{$CellContext`LeftUp, $CellContext`RightUp, \
$CellContext`LeftBot, $CellContext`RightBot}, True], LessEqual, 3], 
                    Dynamic[
                    GraphicsRow[
                    Extract[$CellContext`mainExpo, 
                    
                    Position[{$CellContext`LeftUp, $CellContext`RightUp, \
$CellContext`LeftBot, $CellContext`RightBot}, True]], ImageSize -> 
                    Count[{$CellContext`LeftUp, $CellContext`RightUp, \
$CellContext`LeftBot, $CellContext`RightBot}, True] 250]], 
                    
                    GraphicsGrid[{{$CellContext`RegularView, \
$CellContext`LeftView}, {$CellContext`FrontalView, $CellContext`TopView}}, 
                    ImageSize -> 500]]]], 
                    If[$CellContext`AllFrags == True, 
                    Export[
                    StringJoin[$CellContext`FragsName, ".eps"], 
                    
                    GraphicsGrid[{{$CellContext`RegularView, \
$CellContext`LeftView}, {$CellContext`FrontalView, $CellContext`TopView}}, 
                    ImageSize -> 500]]]], ImageSize -> {27, 20}, FrameMargins -> 
                    0]], "  ", 
                   Dynamic[
                    Button[
                    Style["png", 10], 
                    If[DirectoryQ[$CellContext`OutputDir] == False, 
                    CreateDirectory[$CellContext`OutputDir]]; And[
                    If[
                    Count[{$CellContext`LeftUp, $CellContext`RightUp, \
$CellContext`LeftBot, $CellContext`RightBot}, True] != 0, 
                    Export[
                    StringJoin[$CellContext`FragsName, ".png"], 
                    If[
                    Inequality[0, Less, 
                    
                    Count[{$CellContext`LeftUp, $CellContext`RightUp, \
$CellContext`LeftBot, $CellContext`RightBot}, True], LessEqual, 3], 
                    Dynamic[
                    GraphicsRow[
                    Extract[$CellContext`mainExpo, 
                    
                    Position[{$CellContext`LeftUp, $CellContext`RightUp, \
$CellContext`LeftBot, $CellContext`RightBot}, True]], ImageSize -> 
                    Count[{$CellContext`LeftUp, $CellContext`RightUp, \
$CellContext`LeftBot, $CellContext`RightBot}, True] 250]], 
                    
                    GraphicsGrid[{{$CellContext`RegularView, \
$CellContext`LeftView}, {$CellContext`FrontalView, $CellContext`TopView}}, 
                    ImageSize -> 500]]]], 
                    If[$CellContext`AllFrags == True, 
                    Export[
                    StringJoin[$CellContext`FragsName, ".png"], 
                    
                    GraphicsGrid[{{$CellContext`RegularView, \
$CellContext`LeftView}, {$CellContext`FrontalView, $CellContext`TopView}}, 
                    ImageSize -> 500]]]], ImageSize -> {27, 20}, FrameMargins -> 
                    0]]}]}, Dividers -> {1 -> Dynamic[$CellContext`MyColor]}, 
                Alignment -> Left, Spacings -> {0.2, 0.2}]}, Alignment -> 
              Bottom], FrameStyle -> Dynamic[
               Lighter[$CellContext`MyColor, 0.8]], Background -> Dynamic[
               Lighter[$CellContext`MyColor, 0.96]], RoundingRadius -> 5, 
             ImageSize -> {475, Automatic}], 
            Grid[{{
               Labeled[
                ColorSlider[
                 
                 Dynamic[$CellContext`MyColor, 
                  Initialization :> ($CellContext`MyColor := Gray)], 
                 ImageSize -> {140, 30}, ImageMargins -> {{0, 0}, {0, 0}}], 
                Style["Background Color", Bold], Top], 
               Labeled[
                Manipulate`Place[33], 
                Style["Plot Art", Bold], Top]}}, Alignment -> Center, 
             Dividers -> {2 -> Dynamic[$CellContext`MyColor], None}, 
             Spacings -> {20.9, 1}]}], Background -> Dynamic[
            Lighter[$CellContext`MyColor, 0.69]], RoundingRadius -> 5, 
          FrameStyle -> Dynamic[
            Lighter[$CellContext`MyColor, 0.9]], Alignment -> Center, 
          ImageMargins -> {{0, 0}, {0, 5}}, 
          ImageSize -> {Automatic, Automatic}]}, 
       "Options" :> {
        ContinuousAction -> None, AppearanceElements -> {"ResetButton"}, 
         SynchronousUpdating -> False, Deployed -> True, ControlPlacement -> 
         Left, Paneled -> False, Alignment -> Center, ImageMargins -> 0, 
         ContentSize -> {Automatic, Automatic}, LocalizeVariables -> False}, 
       "DefaultOptions" :> {}],
      ImageSizeCache->{751., {333., 340.}},
      SingleEvaluation->True],
     Deinitialization:>None,
     DynamicModuleValues:>{},
     Initialization:>({$CellContext`TimeStep := 0.01, $CellContext`MTolerance := 
        0.1, $CellContext`M := 100, $CellContext`Dc := 0.5, $CellContext`cp := 
        500, $CellContext`rho := 2500, $CellContext`Lv := 
        20000, $CellContext`H := 100, $CellContext`VE := 
        100, $CellContext`\[Phi]E := 90, $CellContext`HFrag := 
        0, $CellContext`Efr := 0, $CellContext`nfrags := 
        1, $CellContext`mass := $CellContext`unif, $CellContext`UnifAngle := 
        True, $CellContext`RandomAngle := False, $CellContext`Q1 := 
        False, $CellContext`Q2 := False, $CellContext`Q3 := 
        False, $CellContext`Q4 := False, $CellContext`NameOfFile := 
        "MeteoFile", $CellContext`LeftUp := True, $CellContext`RightUp := 
        True, $CellContext`LeftBot := True, $CellContext`RightBot := 
        True, $CellContext`AllFrags := True, $CellContext`XxZ := 
        True, $CellContext`MxZ := True, $CellContext`TxZ := 
        True, $CellContext`VxZ := True, $CellContext`Xxt := 
        True, $CellContext`Mxt := True, $CellContext`Txt := 
        True, $CellContext`Vxt := True, $CellContext`AllZ := 
        True, $CellContext`Allt := True, $CellContext`CT := 
        Null, $CellContext`OB := Null, $CellContext`SB := 
        Null, $CellContext`J2 := Null, $CellContext`D2 := 
        Null, $CellContext`MV := Null, $CellContext`MD := 
        Null, $CellContext`AX := Null, $CellContext`MyColor := 
        Gray, $CellContext`PlotArt := None, $CellContext`MassAll := {}}; 
      Typeset`initDone$$ = True),
     SynchronousInitialization->True,
     UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
     UnsavedVariables:>{Typeset`initDone$$},
     UntrackedVariables:>{Typeset`size$$}], "Manipulate",
    Deployed->True,
    StripOnInput->False],
   Manipulate`InterpretManipulate[1]],
  Alignment->Center,
  Background->Dynamic[
    Lighter[$CellContext`MyColor, 0.9]],
  FrameMargins->{{15, 5}, {0, 5}},
  ImageSize->{Automatic, Automatic},
  RoundingRadius->2,
  StripOnInput->False]], "Output",
 CellChangeTimes->{
  3.721419095514179*^9},ExpressionUUID->"c08038e8-8237-4060-8564-\
b3ebdd31dd1a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["XRange"], "Input",
 CellChangeTimes->{{3.6800091661528397`*^9, 
  3.6800091675644784`*^9}},ExpressionUUID->"09af3086-f9a0-4a57-80a2-\
9680f2b208e8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "571.270140398707`"}], ",", "571.270140398707`"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.680009167976283*^9},ExpressionUUID->"408becbb-82cc-4fe6-b3f7-\
65acd62f8072"]
}, Open  ]],

Cell[BoxData["PlotLabel"], "Input",
 CellChangeTimes->{{3.6799848321605873`*^9, 
  3.6799848369387465`*^9}},ExpressionUUID->"10f546aa-5359-4a31-b92f-\
ec7bfade2b34"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LogLogPlot", "[", 
  RowBox[{
   RowBox[{"Abs", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"\[Omega]", " ", "I"}], "-", "1"}], ")"}], 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"\[Omega]", " ", "I"}], "+", "1"}], ")"}], "/", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"\[Omega]", " ", "I"}], "+", "10"}], ")"}], 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"\[Omega]", " ", "I"}], "-", "10"}], ")"}]}], ")"}]}]}], 
    "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Omega]", ",", "1", ",", 
     RowBox[{"10", "^", "3"}]}], "}"}], ",", 
   RowBox[{"Ticks", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Table", "[", 
      RowBox[{"i", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", 
         RowBox[{"10", "^", "3"}], ",", "10"}], "}"}]}], "]"}], "}"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.6799848865077868`*^9, 3.679984888316571*^9}, {
  3.6799849407294273`*^9, 3.679984964455393*^9}, {3.6799850013783026`*^9, 
  3.6799850409638658`*^9}},ExpressionUUID->"835fe5a4-aee9-41fb-abed-\
8247c661d5d6"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1: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
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{-0.3453877498516471, -4.11806690825176},
  CoordinatesToolOptions:>{"DisplayFunction" -> ({
      Exp[
       Part[#, 1]], 
      Exp[
       Part[#, 2]]}& ), "CopiedValueFunction" -> ({
      Exp[
       Part[#, 1]], 
      Exp[
       Part[#, 2]]}& )},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{
     Charting`ScaledTicks[{Log, Exp}], 
     Charting`ScaledFrameTicks[{Log, Exp}]}, {
     Charting`ScaledTicks[{Log, Exp}], 
     Charting`ScaledFrameTicks[{Log, Exp}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None},
  PlotRange->{{-0.3453877498516471, 7.253143028833784}, {-4.11806690825176, 
   0.19609371015347699`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{{{0, 
      FormBox["1", TraditionalForm]}, {
      NCache[
       Log[11], 2.3978952727983707`], 
      FormBox["11", TraditionalForm]}, {
      NCache[
       Log[21], 3.044522437723423], 
      FormBox["21", TraditionalForm]}, {
      NCache[
       Log[31], 3.4339872044851463`], 
      FormBox["31", TraditionalForm]}, {
      NCache[
       Log[41], 3.713572066704308], 
      FormBox["41", TraditionalForm]}, {
      NCache[
       Log[51], 3.9318256327243257`], 
      FormBox["51", TraditionalForm]}, {
      NCache[
       Log[61], 4.110873864173311], 
      FormBox["61", TraditionalForm]}, {
      NCache[
       Log[71], 4.2626798770413155`], 
      FormBox["71", TraditionalForm]}, {
      NCache[
       Log[81], 4.394449154672439], 
      FormBox["81", TraditionalForm]}, {
      NCache[
       Log[91], 4.51085950651685], 
      FormBox["91", TraditionalForm]}, {
      NCache[
       Log[101], 4.61512051684126], 
      FormBox["101", TraditionalForm]}, {
      NCache[
       Log[111], 4.709530201312334], 
      FormBox["111", TraditionalForm]}, {
      NCache[
       Log[121], 4.795790545596741], 
      FormBox["121", TraditionalForm]}, {
      NCache[
       Log[131], 4.875197323201151], 
      FormBox["131", TraditionalForm]}, {
      NCache[
       Log[141], 4.948759890378168], 
      FormBox["141", TraditionalForm]}, {
      NCache[
       Log[151], 5.017279836814924], 
      FormBox["151", TraditionalForm]}, {
      NCache[
       Log[161], 5.081404364984463], 
      FormBox["161", TraditionalForm]}, {
      NCache[
       Log[171], 5.14166355650266], 
      FormBox["171", TraditionalForm]}, {
      NCache[
       Log[181], 5.198497031265826], 
      FormBox["181", TraditionalForm]}, {
      NCache[
       Log[191], 5.25227342804663], 
      FormBox["191", TraditionalForm]}, {
      NCache[
       Log[201], 5.303304908059076], 
      FormBox["201", TraditionalForm]}, {
      NCache[
       Log[211], 5.351858133476067], 
      FormBox["211", TraditionalForm]}, {
      NCache[
       Log[221], 5.3981627015177525`], 
      FormBox["221", TraditionalForm]}, {
      NCache[
       Log[231], 5.442417710521793], 
      FormBox["231", TraditionalForm]}, {
      NCache[
       Log[241], 5.484796933490655], 
      FormBox["241", TraditionalForm]}, {
      NCache[
       Log[251], 5.5254529391317835`], 
      FormBox["251", TraditionalForm]}, {
      NCache[
       Log[261], 5.564520407322694], 
      FormBox["261", TraditionalForm]}, {
      NCache[
       Log[271], 5.602118820879701], 
      FormBox["271", TraditionalForm]}, {
      NCache[
       Log[281], 5.638354669333745], 
      FormBox["281", TraditionalForm]}, {
      NCache[
       Log[291], 5.673323267171493], 
      FormBox["291", TraditionalForm]}, {
      NCache[
       Log[301], 5.707110264748875], 
      FormBox["301", TraditionalForm]}, {
      NCache[
       Log[311], 5.739792912179234], 
      FormBox["311", TraditionalForm]}, {
      NCache[
       Log[321], 5.771441123130016], 
      FormBox["321", TraditionalForm]}, {
      NCache[
       Log[331], 5.802118375377063], 
      FormBox["331", TraditionalForm]}, {
      NCache[
       Log[341], 5.831882477283517], 
      FormBox["341", TraditionalForm]}, {
      NCache[
       Log[351], 5.860786223465865], 
      FormBox["351", TraditionalForm]}, {
      NCache[
       Log[361], 5.8888779583328805`], 
      FormBox["361", TraditionalForm]}, {
      NCache[
       Log[371], 5.916202062607435], 
      FormBox["371", TraditionalForm]}, {
      NCache[
       Log[381], 5.942799375126701], 
      FormBox["381", TraditionalForm]}, {
      NCache[
       Log[391], 5.968707559985366], 
      FormBox["391", TraditionalForm]}, {
      NCache[
       Log[401], 5.993961427306569], 
      FormBox["401", TraditionalForm]}, {
      NCache[
       Log[411], 6.018593214496234], 
      FormBox["411", TraditionalForm]}, {
      NCache[
       Log[421], 6.042632833682381], 
      FormBox["421", TraditionalForm]}, {
      NCache[
       Log[431], 6.066108090103747], 
      FormBox["431", TraditionalForm]}, {
      NCache[
       Log[441], 6.089044875446846], 
      FormBox["441", TraditionalForm]}, {
      NCache[
       Log[451], 6.111467339502679], 
      FormBox["451", TraditionalForm]}, {
      NCache[
       Log[461], 6.133398042996649], 
      FormBox["461", TraditionalForm]}, {
      NCache[
       Log[471], 6.154858094016418], 
      FormBox["471", TraditionalForm]}, {
      NCache[
       Log[481], 6.175867270105761], 
      FormBox["481", TraditionalForm]}, {
      NCache[
       Log[491], 6.19644412779452], 
      FormBox["491", TraditionalForm]}, {
      NCache[
       Log[501], 6.2166061010848646`], 
      FormBox["501", TraditionalForm]}, {
      NCache[
       Log[511], 6.236369590203704], 
      FormBox["511", TraditionalForm]}, {
      NCache[
       Log[521], 6.255750041753367], 
      FormBox["521", TraditionalForm]}, {
      NCache[
       Log[531], 6.274762021241939], 
      FormBox["531", TraditionalForm]}, {
      NCache[
       Log[541], 6.293419278846481], 
      FormBox["541", TraditionalForm]}, {
      NCache[
       Log[551], 6.311734809152915], 
      FormBox["551", TraditionalForm]}, {
      NCache[
       Log[561], 6.329720905522696], 
      FormBox["561", TraditionalForm]}, {
      NCache[
       Log[571], 6.3473892096560105`], 
      FormBox["571", TraditionalForm]}, {
      NCache[
       Log[581], 6.364750756851911], 
      FormBox["581", TraditionalForm]}, {
      NCache[
       Log[591], 6.3818160174060985`], 
      FormBox["591", TraditionalForm]}, {
      NCache[
       Log[601], 6.398594934535208], 
      FormBox["601", TraditionalForm]}, {
      NCache[
       Log[611], 6.415096959171596], 
      FormBox["611", TraditionalForm]}, {
      NCache[
       Log[621], 6.431331081933479], 
      FormBox["621", TraditionalForm]}, {
      NCache[
       Log[631], 6.447305862541213], 
      FormBox["631", TraditionalForm]}, {
      NCache[
       Log[641], 6.46302945692067], 
      FormBox["641", TraditionalForm]}, {
      NCache[
       Log[651], 6.478509642208569], 
      FormBox["651", TraditionalForm]}, {
      NCache[
       Log[661], 6.493753839851686], 
      FormBox["661", TraditionalForm]}, {
      NCache[
       Log[671], 6.508769136971682], 
      FormBox["671", TraditionalForm]}, {
      NCache[
       Log[681], 6.523562306149512], 
      FormBox["681", TraditionalForm]}, {
      NCache[
       Log[691], 6.53813982376767], 
      FormBox["691", TraditionalForm]}, {
      NCache[
       Log[701], 6.55250788703459], 
      FormBox["701", TraditionalForm]}, {
      NCache[
       Log[711], 6.566672429803241], 
      FormBox["711", TraditionalForm]}, {
      NCache[
       Log[721], 6.580639137284949], 
      FormBox["721", TraditionalForm]}, {
      NCache[
       Log[731], 6.594413459749778], 
      FormBox["731", TraditionalForm]}, {
      NCache[
       Log[741], 6.608000625296087], 
      FormBox["741", TraditionalForm]}, {
      NCache[
       Log[751], 6.621405651764134], 
      FormBox["751", TraditionalForm]}, {
      NCache[
       Log[761], 6.634633357861686], 
      FormBox["761", TraditionalForm]}, {
      NCache[
       Log[771], 6.647688373563329], 
      FormBox["771", TraditionalForm]}, {
      NCache[
       Log[781], 6.660575149839686], 
      FormBox["781", TraditionalForm]}, {
      NCache[
       Log[791], 6.673297967767654], 
      FormBox["791", TraditionalForm]}, {
      NCache[
       Log[801], 6.68586094706836], 
      FormBox["801", TraditionalForm]}, {
      NCache[
       Log[811], 6.698268054115413], 
      FormBox["811", TraditionalForm]}, {
      NCache[
       Log[821], 6.710523109452428], 
      FormBox["821", TraditionalForm]}, {
      NCache[
       Log[831], 6.7226297948554485`], 
      FormBox["831", TraditionalForm]}, {
      NCache[
       Log[841], 6.734591659972948], 
      FormBox["841", TraditionalForm]}, {
      NCache[
       Log[851], 6.7464121285733745`], 
      FormBox["851", TraditionalForm]}, {
      NCache[
       Log[861], 6.7580945044277305`], 
      FormBox["861", TraditionalForm]}, {
      NCache[
       Log[871], 6.769641976852503], 
      FormBox["871", TraditionalForm]}, {
      NCache[
       Log[881], 6.78105762593618], 
      FormBox["881", TraditionalForm]}, {
      NCache[
       Log[891], 6.792344427470809], 
      FormBox["891", TraditionalForm]}, {
      NCache[
       Log[901], 6.803505257608338], 
      FormBox["901", TraditionalForm]}, {
      NCache[
       Log[911], 6.814542897259958], 
      FormBox["911", TraditionalForm]}, {
      NCache[
       Log[921], 6.825460036255307], 
      FormBox["921", TraditionalForm]}, {
      NCache[
       Log[931], 6.836259277277067], 
      FormBox["931", TraditionalForm]}, {
      NCache[
       Log[941], 6.846943139585379], 
      FormBox["941", TraditionalForm]}, {
      NCache[
       Log[951], 6.85751406254539], 
      FormBox["951", TraditionalForm]}, {
      NCache[
       Log[961], 6.8679744089702925`], 
      FormBox["961", TraditionalForm]}, {
      NCache[
       Log[971], 6.878326468291325], 
      FormBox["971", TraditionalForm]}, {
      NCache[
       Log[981], 6.8885724595653635`], 
      FormBox["981", TraditionalForm]}, {
      NCache[
       Log[991], 6.898714534329988], 
      FormBox["991", TraditionalForm]}}, {{0, 
      FormBox["1", TraditionalForm]}, {
      NCache[
       Log[11], 2.3978952727983707`], 
      FormBox["11", TraditionalForm]}, {
      NCache[
       Log[21], 3.044522437723423], 
      FormBox["21", TraditionalForm]}, {
      NCache[
       Log[31], 3.4339872044851463`], 
      FormBox["31", TraditionalForm]}, {
      NCache[
       Log[41], 3.713572066704308], 
      FormBox["41", TraditionalForm]}, {
      NCache[
       Log[51], 3.9318256327243257`], 
      FormBox["51", TraditionalForm]}, {
      NCache[
       Log[61], 4.110873864173311], 
      FormBox["61", TraditionalForm]}, {
      NCache[
       Log[71], 4.2626798770413155`], 
      FormBox["71", TraditionalForm]}, {
      NCache[
       Log[81], 4.394449154672439], 
      FormBox["81", TraditionalForm]}, {
      NCache[
       Log[91], 4.51085950651685], 
      FormBox["91", TraditionalForm]}, {
      NCache[
       Log[101], 4.61512051684126], 
      FormBox["101", TraditionalForm]}, {
      NCache[
       Log[111], 4.709530201312334], 
      FormBox["111", TraditionalForm]}, {
      NCache[
       Log[121], 4.795790545596741], 
      FormBox["121", TraditionalForm]}, {
      NCache[
       Log[131], 4.875197323201151], 
      FormBox["131", TraditionalForm]}, {
      NCache[
       Log[141], 4.948759890378168], 
      FormBox["141", TraditionalForm]}, {
      NCache[
       Log[151], 5.017279836814924], 
      FormBox["151", TraditionalForm]}, {
      NCache[
       Log[161], 5.081404364984463], 
      FormBox["161", TraditionalForm]}, {
      NCache[
       Log[171], 5.14166355650266], 
      FormBox["171", TraditionalForm]}, {
      NCache[
       Log[181], 5.198497031265826], 
      FormBox["181", TraditionalForm]}, {
      NCache[
       Log[191], 5.25227342804663], 
      FormBox["191", TraditionalForm]}, {
      NCache[
       Log[201], 5.303304908059076], 
      FormBox["201", TraditionalForm]}, {
      NCache[
       Log[211], 5.351858133476067], 
      FormBox["211", TraditionalForm]}, {
      NCache[
       Log[221], 5.3981627015177525`], 
      FormBox["221", TraditionalForm]}, {
      NCache[
       Log[231], 5.442417710521793], 
      FormBox["231", TraditionalForm]}, {
      NCache[
       Log[241], 5.484796933490655], 
      FormBox["241", TraditionalForm]}, {
      NCache[
       Log[251], 5.5254529391317835`], 
      FormBox["251", TraditionalForm]}, {
      NCache[
       Log[261], 5.564520407322694], 
      FormBox["261", TraditionalForm]}, {
      NCache[
       Log[271], 5.602118820879701], 
      FormBox["271", TraditionalForm]}, {
      NCache[
       Log[281], 5.638354669333745], 
      FormBox["281", TraditionalForm]}, {
      NCache[
       Log[291], 5.673323267171493], 
      FormBox["291", TraditionalForm]}, {
      NCache[
       Log[301], 5.707110264748875], 
      FormBox["301", TraditionalForm]}, {
      NCache[
       Log[311], 5.739792912179234], 
      FormBox["311", TraditionalForm]}, {
      NCache[
       Log[321], 5.771441123130016], 
      FormBox["321", TraditionalForm]}, {
      NCache[
       Log[331], 5.802118375377063], 
      FormBox["331", TraditionalForm]}, {
      NCache[
       Log[341], 5.831882477283517], 
      FormBox["341", TraditionalForm]}, {
      NCache[
       Log[351], 5.860786223465865], 
      FormBox["351", TraditionalForm]}, {
      NCache[
       Log[361], 5.8888779583328805`], 
      FormBox["361", TraditionalForm]}, {
      NCache[
       Log[371], 5.916202062607435], 
      FormBox["371", TraditionalForm]}, {
      NCache[
       Log[381], 5.942799375126701], 
      FormBox["381", TraditionalForm]}, {
      NCache[
       Log[391], 5.968707559985366], 
      FormBox["391", TraditionalForm]}, {
      NCache[
       Log[401], 5.993961427306569], 
      FormBox["401", TraditionalForm]}, {
      NCache[
       Log[411], 6.018593214496234], 
      FormBox["411", TraditionalForm]}, {
      NCache[
       Log[421], 6.042632833682381], 
      FormBox["421", TraditionalForm]}, {
      NCache[
       Log[431], 6.066108090103747], 
      FormBox["431", TraditionalForm]}, {
      NCache[
       Log[441], 6.089044875446846], 
      FormBox["441", TraditionalForm]}, {
      NCache[
       Log[451], 6.111467339502679], 
      FormBox["451", TraditionalForm]}, {
      NCache[
       Log[461], 6.133398042996649], 
      FormBox["461", TraditionalForm]}, {
      NCache[
       Log[471], 6.154858094016418], 
      FormBox["471", TraditionalForm]}, {
      NCache[
       Log[481], 6.175867270105761], 
      FormBox["481", TraditionalForm]}, {
      NCache[
       Log[491], 6.19644412779452], 
      FormBox["491", TraditionalForm]}, {
      NCache[
       Log[501], 6.2166061010848646`], 
      FormBox["501", TraditionalForm]}, {
      NCache[
       Log[511], 6.236369590203704], 
      FormBox["511", TraditionalForm]}, {
      NCache[
       Log[521], 6.255750041753367], 
      FormBox["521", TraditionalForm]}, {
      NCache[
       Log[531], 6.274762021241939], 
      FormBox["531", TraditionalForm]}, {
      NCache[
       Log[541], 6.293419278846481], 
      FormBox["541", TraditionalForm]}, {
      NCache[
       Log[551], 6.311734809152915], 
      FormBox["551", TraditionalForm]}, {
      NCache[
       Log[561], 6.329720905522696], 
      FormBox["561", TraditionalForm]}, {
      NCache[
       Log[571], 6.3473892096560105`], 
      FormBox["571", TraditionalForm]}, {
      NCache[
       Log[581], 6.364750756851911], 
      FormBox["581", TraditionalForm]}, {
      NCache[
       Log[591], 6.3818160174060985`], 
      FormBox["591", TraditionalForm]}, {
      NCache[
       Log[601], 6.398594934535208], 
      FormBox["601", TraditionalForm]}, {
      NCache[
       Log[611], 6.415096959171596], 
      FormBox["611", TraditionalForm]}, {
      NCache[
       Log[621], 6.431331081933479], 
      FormBox["621", TraditionalForm]}, {
      NCache[
       Log[631], 6.447305862541213], 
      FormBox["631", TraditionalForm]}, {
      NCache[
       Log[641], 6.46302945692067], 
      FormBox["641", TraditionalForm]}, {
      NCache[
       Log[651], 6.478509642208569], 
      FormBox["651", TraditionalForm]}, {
      NCache[
       Log[661], 6.493753839851686], 
      FormBox["661", TraditionalForm]}, {
      NCache[
       Log[671], 6.508769136971682], 
      FormBox["671", TraditionalForm]}, {
      NCache[
       Log[681], 6.523562306149512], 
      FormBox["681", TraditionalForm]}, {
      NCache[
       Log[691], 6.53813982376767], 
      FormBox["691", TraditionalForm]}, {
      NCache[
       Log[701], 6.55250788703459], 
      FormBox["701", TraditionalForm]}, {
      NCache[
       Log[711], 6.566672429803241], 
      FormBox["711", TraditionalForm]}, {
      NCache[
       Log[721], 6.580639137284949], 
      FormBox["721", TraditionalForm]}, {
      NCache[
       Log[731], 6.594413459749778], 
      FormBox["731", TraditionalForm]}, {
      NCache[
       Log[741], 6.608000625296087], 
      FormBox["741", TraditionalForm]}, {
      NCache[
       Log[751], 6.621405651764134], 
      FormBox["751", TraditionalForm]}, {
      NCache[
       Log[761], 6.634633357861686], 
      FormBox["761", TraditionalForm]}, {
      NCache[
       Log[771], 6.647688373563329], 
      FormBox["771", TraditionalForm]}, {
      NCache[
       Log[781], 6.660575149839686], 
      FormBox["781", TraditionalForm]}, {
      NCache[
       Log[791], 6.673297967767654], 
      FormBox["791", TraditionalForm]}, {
      NCache[
       Log[801], 6.68586094706836], 
      FormBox["801", TraditionalForm]}, {
      NCache[
       Log[811], 6.698268054115413], 
      FormBox["811", TraditionalForm]}, {
      NCache[
       Log[821], 6.710523109452428], 
      FormBox["821", TraditionalForm]}, {
      NCache[
       Log[831], 6.7226297948554485`], 
      FormBox["831", TraditionalForm]}, {
      NCache[
       Log[841], 6.734591659972948], 
      FormBox["841", TraditionalForm]}, {
      NCache[
       Log[851], 6.7464121285733745`], 
      FormBox["851", TraditionalForm]}, {
      NCache[
       Log[861], 6.7580945044277305`], 
      FormBox["861", TraditionalForm]}, {
      NCache[
       Log[871], 6.769641976852503], 
      FormBox["871", TraditionalForm]}, {
      NCache[
       Log[881], 6.78105762593618], 
      FormBox["881", TraditionalForm]}, {
      NCache[
       Log[891], 6.792344427470809], 
      FormBox["891", TraditionalForm]}, {
      NCache[
       Log[901], 6.803505257608338], 
      FormBox["901", TraditionalForm]}, {
      NCache[
       Log[911], 6.814542897259958], 
      FormBox["911", TraditionalForm]}, {
      NCache[
       Log[921], 6.825460036255307], 
      FormBox["921", TraditionalForm]}, {
      NCache[
       Log[931], 6.836259277277067], 
      FormBox["931", TraditionalForm]}, {
      NCache[
       Log[941], 6.846943139585379], 
      FormBox["941", TraditionalForm]}, {
      NCache[
       Log[951], 6.85751406254539], 
      FormBox["951", TraditionalForm]}, {
      NCache[
       Log[961], 6.8679744089702925`], 
      FormBox["961", TraditionalForm]}, {
      NCache[
       Log[971], 6.878326468291325], 
      FormBox["971", TraditionalForm]}, {
      NCache[
       Log[981], 6.8885724595653635`], 
      FormBox["981", TraditionalForm]}, {
      NCache[
       Log[991], 6.898714534329988], 
      FormBox["991", TraditionalForm]}}}]], "Output",
 CellChangeTimes->{{3.679984883536174*^9, 3.6799849651142406`*^9}, {
  3.679985004791687*^9, 
  3.679985041854398*^9}},ExpressionUUID->"0d2cb827-bd1e-49c6-bbd1-\
ab0874a06e10"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"XTicks2", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"XRange2", "[", 
     RowBox[{"[", "1", "]"}], "]"}], ",", 
    RowBox[{
     RowBox[{"XRange2", "[", 
      RowBox[{"[", "1", "]"}], "]"}], "/", "2."}], ",", "0", ",", 
    RowBox[{
     RowBox[{"XRange2", "[", 
      RowBox[{"[", "2", "]"}], "]"}], "/", "2."}], ",", 
    RowBox[{"XRange2", "[", 
     RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.6799851251073027`*^9, 3.6799852115227065`*^9}, {
  3.6799857124828973`*^9, 
  3.679985718683575*^9}},ExpressionUUID->"144a2f75-f452-4539-ba6c-\
e75c373cb7cf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "174439.6530830477`", ",", "87219.82654152386`", ",", "0", ",", 
   "90762.53624936027`", ",", "181525.07249872055`"}], "}"}]], "Output",
 CellChangeTimes->{{3.679985156401741*^9, 3.6799852120663567`*^9}, 
   3.679985721873513*^9, 
   3.679985946534693*^9},ExpressionUUID->"b7293efa-d88d-4aeb-b8ea-\
20141fd5ce87"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"YTicks2", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"YRange2", "[", 
     RowBox[{"[", "1", "]"}], "]"}], ",", 
    RowBox[{
     RowBox[{"YRange2", "[", 
      RowBox[{"[", "1", "]"}], "]"}], "/", "2."}], ",", "0", ",", 
    RowBox[{
     RowBox[{"YRange2", "[", 
      RowBox[{"[", "2", "]"}], "]"}], "/", "2."}], ",", 
    RowBox[{"YRange2", "[", 
     RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.6799852224108768`*^9, 3.679985241648694*^9}, {
   3.679985273420022*^9, 3.679985279476736*^9}, 3.6799857197283564`*^9, {
   3.6799859731000423`*^9, 
   3.6799859835587225`*^9}},ExpressionUUID->"c795d3c9-02e3-48c3-a040-\
85d81ea3f434"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "142.82017066391495`"}], ",", 
   RowBox[{"-", "71.41008533195748`"}], ",", "0", ",", "62.65026613607546`", 
   ",", "125.30053227215092`"}], "}"}]], "Output",
 CellChangeTimes->{3.679985242353863*^9, 3.679985280638378*^9, 
  3.679985605295924*^9, 3.679985723960462*^9, 3.679985947706025*^9, 
  3.6799859841640882`*^9},ExpressionUUID->"54ce640d-9f33-47fa-ac2d-\
f8f74800e30a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{"FinalPosPlot", ",", 
   RowBox[{"Frame", "\[Rule]", "True"}], ",", 
   RowBox[{"FrameStyle", "\[Rule]", "10"}], ",", 
   RowBox[{"FrameTicks", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"YTicks2", ",", "None"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"XTicks2", ",", "None"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"PlotRange", "->", 
    RowBox[{"{", 
     RowBox[{"XRange2", ",", "YRange2"}], "}"}]}], ",", 
   RowBox[{"AspectRatio", "\[Rule]", "aspect2"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.679985247448403*^9, 3.679985263191122*^9}, {
  3.679985375322013*^9, 3.6799854503584785`*^9}, {3.6799855252481956`*^9, 
  3.6799855422318487`*^9}, {3.6799855792112923`*^9, 3.679985700393272*^9}, {
  3.679985730856698*^9, 3.6799858160518613`*^9}, {3.67998588260306*^9, 
  3.679985936104444*^9}},ExpressionUUID->"4cc837a5-96b6-472b-bb42-\
4200919397ec"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {GrayLevel[0.2], AbsolutePointSize[6], AbsoluteThickness[1.6], 
     GeometricTransformationBox[InsetBox[
       StyleBox["\<\"\[FilledCircle]\"\>",
        StripOnInput->False,
        FontSize->10], {0., 0.}], {{{75812.95212931451, 0.}}, {{
      75812.95212931451, 0.}}}]}, {}}, {}},
  AspectRatio->1,
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->True,
  FrameLabel->{{None, None}, {None, None}},
  FrameStyle->10,
  FrameTicks->{{{{-142.82017066391495`, 
       FormBox[
        RowBox[{"-", "142.82017066391495`"}], 
        TraditionalForm]}, {-71.41008533195748, 
       FormBox[
        RowBox[{"-", "71.41008533195748`"}], TraditionalForm]}, {0, 
       FormBox["0", TraditionalForm]}, {62.65026613607546, 
       FormBox["62.65026613607546`", TraditionalForm]}, {125.30053227215092`, 
       FormBox["125.30053227215092`", TraditionalForm]}}, 
     None}, {{{174439.6530830477, 
       FormBox["174439.6530830477`", TraditionalForm]}, {87219.82654152386, 
       FormBox["87219.82654152386`", TraditionalForm]}, {0, 
       FormBox["0", TraditionalForm]}, {90762.53624936027, 
       FormBox["90762.53624936027`", TraditionalForm]}, {181525.07249872055`, 
       FormBox["181525.07249872055`", TraditionalForm]}}, None}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->200,
  Method->{},
  PlotRange->{{75812.95212931451, 75812.95212931451}, {0., 0.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.679985080430112*^9, {3.6799852655424366`*^9, 3.6799852837881126`*^9}, {
   3.6799853950217237`*^9, 3.679985451185686*^9}, 3.679985543779891*^9, {
   3.679985584842314*^9, 3.6799857007849283`*^9}, {3.67998574043712*^9, 
   3.679985829720851*^9}, {3.6799858846721096`*^9, 3.679985951833331*^9}, 
   3.6799859869507055`*^9, 
   3.6799863401512146`*^9},ExpressionUUID->"c978509a-ca73-4493-b914-\
5c89bf128746"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["YRange2"], "Input",
 CellChangeTimes->{{3.679986008184012*^9, 
  3.679986010151449*^9}},ExpressionUUID->"fe0b7c9e-c366-4eb8-8cd1-\
613596b3c53a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "142.82017066391495`"}], ",", "125.30053227215092`"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.6799860105829463`*^9},ExpressionUUID->"d3da9ffe-8cdd-4145-8532-\
1bba8ee1ea62"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Position", "[", 
  RowBox[{"XRange", ",", 
   RowBox[{
    RowBox[{"XRange", "[", 
     RowBox[{"[", "1", "]"}], "]"}], "/", "2."}]}], "]"}]], "Input",
 CellChangeTimes->{{3.680009634772689*^9, 
  3.680009659526644*^9}},ExpressionUUID->"f5ef9296-1498-458d-b6b6-\
86417ada62cc"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{{3.6800096442248745`*^9, 
  3.6800096600204935`*^9}},ExpressionUUID->"82e77b88-84b2-4c51-9785-\
1d25fd60e89e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"XRange", "[", 
   RowBox[{"[", "1", "]"}], "]"}], "/", "2."}]], "Input",ExpressionUUID->\
"481215e7-7d94-4584-b87f-dc3986feaaf7"],

Cell[BoxData[
 RowBox[{"-", "4107.490876815801`"}]], "Output",
 CellChangeTimes->{
  3.6800096652289762`*^9},ExpressionUUID->"f96201f3-11b1-433c-89e4-\
f1d3da41e205"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"XTicks", "=", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"XRange", "[", 
      RowBox[{"[", "1", "]"}], "]"}], ",", 
     RowBox[{
      RowBox[{"XRange", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "/", "2."}], ",", "0", ",", 
     RowBox[{
      RowBox[{"XRange", "[", 
       RowBox[{"[", "2", "]"}], "]"}], "/", "2."}], ",", 
     RowBox[{"XRange", "[", 
      RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "/", 
   RowBox[{"10", "^", "3"}]}]}]], "Input",
 CellChangeTimes->{{3.6799851251073027`*^9, 3.6799852115227065`*^9}, {
  3.6799857124828973`*^9, 3.679985718683575*^9}, {3.6799862400962567`*^9, 
  3.679986247209833*^9}, {3.680009455959383*^9, 3.6800094738877983`*^9}, {
  3.680009922773706*^9, 
  3.6800099265545454`*^9}},ExpressionUUID->"2ceab966-7cf0-4bdc-bcf9-\
1c6aeb086465"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "8.214981753631603`"}], ",", 
   RowBox[{"-", "4.107490876815802`"}], ",", "0", ",", "4.107490876815802`", 
   ",", "8.214981753631603`"}], "}"}]], "Output",
 CellChangeTimes->{{3.679985156401741*^9, 3.6799852120663567`*^9}, 
   3.679985721873513*^9, 3.679985946534693*^9, 3.6799862481438675`*^9, {
   3.68000943548246*^9, 3.680009474267574*^9}, 
   3.68000992699852*^9},ExpressionUUID->"d886e91f-cc72-4608-abd3-\
6386f70fb4ef"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ticksPos", "=", 
  RowBox[{"{", 
   RowBox[{"1", ",", 
    RowBox[{"Round", "[", 
     RowBox[{
      RowBox[{"Length", "[", 
       RowBox[{"FAll", "[", 
        RowBox[{"[", 
         RowBox[{"-", "1"}], "]"}], "]"}], "]"}], "/", "4."}], "]"}], ",", 
    "Automatic", ",", 
    RowBox[{"Round", "[", 
     RowBox[{
      RowBox[{"Length", "[", 
       RowBox[{"FAll", "[", 
        RowBox[{"[", 
         RowBox[{"-", "1"}], "]"}], "]"}], "]"}], "/", "2."}], "]"}], ",", 
    RowBox[{"Round", "[", 
     RowBox[{"Length", "[", 
      RowBox[{"FAll", "[", 
       RowBox[{"[", 
        RowBox[{"-", "1"}], "]"}], "]"}], "]"}], "]"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.6800097050106883`*^9, 3.680009763090235*^9}, {
  3.6800097967761803`*^9, 
  3.6800098522946424`*^9}},ExpressionUUID->"962f01ab-342c-4fe3-881e-\
a0ab3b263740"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "1900", ",", "Automatic", ",", "3801", ",", "7602"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.680009763299921*^9, {3.6800097987918663`*^9, 
   3.680009853174529*^9}},ExpressionUUID->"fe7ba720-220c-4f6b-97f7-\
3eea776e03cb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"haha", "=", 
  RowBox[{"Transpose", "[", 
   RowBox[{"{", 
    RowBox[{"ticksPos", ",", "XTicks"}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6800098553570633`*^9, 
  3.6800098879860444`*^9}},ExpressionUUID->"c7a5240d-0240-4933-a3b3-\
51fdd3db592b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", 
     RowBox[{"-", "8.214981753631603`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1900", ",", 
     RowBox[{"-", "4.107490876815802`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"Automatic", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3801", ",", "4.107490876815802`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7602", ",", "8.214981753631603`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.6800098881908226`*^9, 
  3.6800099291774797`*^9},ExpressionUUID->"71b48bec-8324-4f8f-a72e-\
80562f1e0be3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"YTicks", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"YRange", "[", 
     RowBox[{"[", "1", "]"}], "]"}], ",", 
    RowBox[{
     RowBox[{"YRange", "[", 
      RowBox[{"[", "1", "]"}], "]"}], "/", "2."}], ",", "0", ",", 
    RowBox[{
     RowBox[{"YRange", "[", 
      RowBox[{"[", "2", "]"}], "]"}], "/", "2."}], ",", 
    RowBox[{"YRange", "[", 
     RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.6799852224108768`*^9, 3.679985241648694*^9}, {
   3.679985273420022*^9, 3.679985279476736*^9}, 3.6799857197283564`*^9, {
   3.6799859731000423`*^9, 3.6799859835587225`*^9}, {3.6799862497362723`*^9, 
   3.679986257335048*^9}},ExpressionUUID->"47051f24-c755-466d-a843-\
829f3e6321e1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "8214.981753631602`"}], ",", 
   RowBox[{"-", "4107.490876815801`"}], ",", "0", ",", "4107.490876815801`", 
   ",", "8214.981753631602`"}], "}"}]], "Output",
 CellChangeTimes->{3.679985242353863*^9, 3.679985280638378*^9, 
  3.679985605295924*^9, 3.679985723960462*^9, 3.679985947706025*^9, 
  3.6799859841640882`*^9, 3.6799862583911324`*^9, 
  3.6800094366397133`*^9},ExpressionUUID->"62e79ec1-d6cc-4aa8-b81c-\
e10b976b63dd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{"PlotAll", ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"XRange", ",", "YRange", ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "H"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"BoxRatios", "\[Rule]", "ShowButton"}], ",", 
   RowBox[{"Ticks", "\[Rule]", "haha"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6799861169556627`*^9, 3.6799861571772594`*^9}, {
  3.679986207182807*^9, 3.6799862093998547`*^9}, {3.6799864064002285`*^9, 
  3.679986413740857*^9}, {3.680009429475005*^9, 3.680009440311001*^9}, {
  3.6800098782585025`*^9, 3.6800098811459007`*^9}, {3.680009959432244*^9, 
  3.680009961466539*^9}},ExpressionUUID->"05834d8d-7522-478c-b4e5-\
7a33ebf18b57"],

Cell[BoxData[
 Graphics3DBox[
  {RGBColor[0.3315753, 0.4561011, 0.6388182], Point3DBox[CompressedData["
1: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
vXD9rjuRh4FrbpTj+/0+ECh3ksjDpKHfD5HH2Xm6UNyoIPZuh1sN8i++UkdF
XYm+N8rd9hj5Snk2/TRnYu5sdd3Wgr8rYp32Gicq2EppX29DftH/oGa8IxVU
TdJ+Pke+neWuBqsDsdcpnDN7jdxaetfOUDsqhGl1lvQgD+iZ2jtvQwXun/d5
BpD/Fek6fNaayPM3m059QG715YP9N0tiP3TibBxG3qUtfPaEBRXK11wUHUNe
yX8h/r05FaaP+50bR67jxc60MSP2veeTT6aQR+rWtLw2pcKp7hnROeR34rO/
GR+hwtXZcJ9F5GmG+QKtxsQ5c1Lq/iI/HvgB9A5T4Z2H0hrWqv/8w1rwe3SQ
Cpz3TR1WIZ/gb8/VNKLCr1V/8riQmwZHfioxoILBoOrsGuQ1u50lFA5Q4UzJ
T10B5AP2Xi4MfSo8/q1zWRi5ficpV3wfFdx2r3u+EXlY5t+fmUDU7/g5fknk
K4oug8BeKkRfPm4li1ybS/tGsi5RL5feZsojjyoU/rZ6NxXYT7zrU0IulSRx
IFqbyLc7ZzeoIrfMNWP82UnsXXkp1prIDy4UrQ7SIub1Sr20Xcg3hWj4/tSk
wsLmiJe6yPu3jPR7axD5cMWYcx/ymD/1h76oEfO0IF/PAPmqmeY6Z1UqfF7O
CD6EfP+q2R0DKlQ4v1Kw+AhyPlWTcktlKqQryw6ZI9965pX6KyUqHF1qXm+N
3LAyrPKQIhUSPvw6YI+cl8tSr2UrFf5Y1QY4IV933OrFXnkqQJ8gww3fY3GU
U7UcFZrer+j0QD483zOrsZmYpx+i/ngjT9tudbVE5v/2+Qy5s8iNrJYVFaSp
8PP+XtPzyI1dXz9nSFLhbXB4YDDy90de+ktIUGFS+NidUORKQvNit8WIuclZ
9zgSuc09g471m6jwqKV+OBZ5gFhD+DVRKvA32bAnIL9kdlKTawMVhoITNicj
jzBSn4oVJvr8cfP9KTgf/iiULAsSc+pruUs68lp3Y7+Q9VQYSykOu4WcHnVz
1xw/FcjP92VmI68y4GE/u44KAgLnyqjIi0oK3nzjo8LF3l1tTOTiFX55J9cQ
+/CN7A/5yEnHTkR+5KHCvkd3ZouQl0ZFONhzE3tXsxbHPeTPdjXv7uEk9jRZ
X9EK5McC1KTMOKjwxUxfsRo5Y9szzo5VVNjdcF+7DjmHQ+K8ATsVRkabjBpx
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
nbx60VzFeYT8WlyU3m0t3v2aO48+Rl4j3NFVrMmA4Xuq26uQDwX/jWjQYMD5
C1cuVuN65Pzb2LWFAa3D3k9r8L3YvHk7osKAJyu7V9Qhf+idSPupzIAdGzoc
65EH3ZNwElFiwKDZsYwnuH4nzirLKTAg4VbAWAPy6r9Zv1TXMOCN60rNRuTZ
hcUdeqt4cypDP/wZ8oVOeomFDAM+kn5WPcfza7d1hrMkA8qdDBY34z5Z/J58
RpwBpxQkLFqQy4mb3ogUY4Dz0mBCK65HxWhCylIGzBideP0C+aJSIitdhAHX
vvTKvcR7UUZYbtFiBlhpj7i8Qm57f/vTOgEGJBtcymhHzi6vG+34RwdvzZsf
O5BvjN8kPvyHDvNa9pteI6d8cTOanaPD0UCaTxfy2Er/C8I/6RC7xDunGzmz
weqx7A86hG1+MtmD9+RuocWbv9NB+meh+lt8nnqC/e4vdAC6mv875HVOX/IO
TtDhiebO/F6ch2fWibl+ooPn55ef+5Afb1E6FzBMh+5vc2oDuB/u/z0cNUSH
p+73T7/H873ojgtpgA6tPvP3BpHz96zvu9VLhwtq7aNDyCOTgzwfvqGD7atd
yh+Ry9ykTD/tokNzpKb7MHLXkfjEng46HDhWnjqCfGTzYdXxl3TQSH71dhT5
Xhht+91Khwa9COkx3P9nrSKXN/O+m/jAehx54bokrXXP6LD85qWkCeQfEhlT
2xrosPpuz9NJ5Mqi58qM6ujArXvC9wXn1ekNsXbVdEiTMdL7ilw0+tYx78d0
2NhqFfwN34v8tG54OR1URL/nfEdetvS/tYkldEj5vv7jFPIQxUVLOQ/ooJs7
Iv8Dx1O9/l9eIR1+uO6xncFx47P9U51Hh7itGxJncV753udrz6bDXePUmp94
z98zuOxjFh0EarNnfyHXMxtQmL1NB61Wc7V55HedcveI3KRDW/KFE7+Rx5jt
d1uVRgdHFaD9wftM//3rahw6mNfRm/4iv/F1osqASQex6CsLC3iPspies6LR
QSiRbztf3f/crf7ZHg8yr14EJLz4kU9v9IsLJdDh9YpSugDyGdO+N3HJdFDr
/vp8EfKP0/JarEQ6PLr0+Lcg8j0Lm2i5cXS4pbJGXQj5BR1+vuoYOsz9EXcV
Rr7qTNbZV9F0aFzHviGCnBK0auJDJB2WlJRViSL3kHHym71Ah/sffb8sQc6n
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
Uqa1nZZfe06PYf//+i9F3Iss
    "]]},
  Axes->True,
  AxesLabel->{None, None, None},
  BoxRatios->{1, 1, 1},
  FaceGridsStyle->Automatic,
  ImageSize->200,
  PlotRange->{{-8214.981753631602, 8214.981753631602}, {-8214.981753631602, 
    8214.981753631602}, {0, 5000}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}, {Automatic, Automatic}},
  Ticks->{{{1, 
      FormBox["1", TraditionalForm]}, {-8.214981753631603, 
      FormBox[
       RowBox[{"-", "8.214981753631603`"}], TraditionalForm]}}, {{1900, 
      FormBox["1900", TraditionalForm]}, {-4.107490876815802, 
      FormBox[
       RowBox[{"-", "4.107490876815802`"}], TraditionalForm]}}, {
    Automatic, {0, 
      FormBox["0", TraditionalForm]}}, {{3801, 
      FormBox["3801", TraditionalForm]}, {4.107490876815802, 
      FormBox["4.107490876815802`", TraditionalForm]}}, {{7602, 
      FormBox["7602", TraditionalForm]}, {8.214981753631603, 
      FormBox["8.214981753631603`", TraditionalForm]}}},
  ViewPoint->{1.3, -2.4, 2.},
  ViewVertical->{-0.033118668265107246`, -0.01812546047004427, 
   0.999287056603404}]], "Output",
 CellChangeTimes->{{3.680009906500595*^9, 3.6800099308990307`*^9}, 
   3.680009964720739*^9},ExpressionUUID->"558b7ad3-e038-4417-bb13-\
13657479bfdf"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{"PlotAll", ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"XRange", ",", "YRange", ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "H"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"BoxRatios", "\[Rule]", "ShowButton"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "185"}], ",", 
   RowBox[{"ViewPoint", "\[Rule]", "Front"}], ",", 
   RowBox[{"Ticks", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Round", "[", 
         RowBox[{
          RowBox[{"Length", "[", "XRange", "]"}], "/", "2."}], "]"}], ",", 
        "167"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Round", "[", 
         RowBox[{
          RowBox[{"Length", "[", "XRange", "]"}], "/", "3."}], "]"}], ",", 
        "188"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Round", "[", 
         RowBox[{
          RowBox[{"Length", "[", "XRange", "]"}], "/", "4."}], "]"}], ",", 
        "205"}], "}"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6799863594835577`*^9, 3.6799863598287277`*^9}, {
   3.679986436200441*^9, 3.6799864851972675`*^9}, 3.679986851282713*^9, {
   3.6799868819113817`*^9, 3.6799868861895685`*^9}, {3.6799869164256563`*^9, 
   3.6799869373299446`*^9}, {3.6800092212913837`*^9, 
   3.6800092614797897`*^9}},ExpressionUUID->"6233400b-9770-4623-a105-\
c764e92ee711"],

Cell[BoxData[
 Graphics3DBox[
  {RGBColor[0.3315753, 0.4561011, 0.6388182], Point3DBox[CompressedData["
1:eJx022dcju/bAPD2FCKVktKkSVP7atHS1E4RDaKlraVIQ4uUiJKiTfddIqVE
m4aQSkhDQ0Y7q+f4vfh33G8e73w/1+cax3mex0h2uHhbuNJQUVGR+KioaKn+
nz9xZCL4QAof7Ts54n+0OaIoZ/UCmRjrtXJ81a6z5iJRWav/wOef5HbEZx9Y
87dOwgL/+fdtzLE59y3XfLr6BvVf8OR5xqRzF23XXMPHNv83uNjXBufVI4fW
/HrVHaZf4KbvtxQkcR9Z80KqAell8IcPGut/hh1d81pOHa5F8HMV+kl7Priu
eTmrbOMcuEXJ12QLNY81L9FZlPkJrnZ0Udk+88Sa//b/cPgb+JHmrqUD30+u
eVPRXqtpcIUPQqJyut5r/kLLgm0C3Pd+RCJjh8+aS8wHxY+Ch/v5xZ2e9V1z
hp6Ftk/gXxwjxQ5zn15zZR2urvfgz2XTqbrV/Nd8lV0s6x24xBjLnSbngDXP
dvHe+Rp8auVBvs7ZwDVffqQc3gX+tXkuxvhW0Jrv/deZ2Q4+E01q+lwfvOa2
wUHBTeAMknHjTEMha17zJpS/AfyO7uNDT5dD17xil0BSDXiMu/mN9ZvD1pzp
e9nTSnAu8rZNcxLhax7PfKKuHFyYrU3IVydizYNasqIKwXs1JuUT7SLXnHXk
LGse+Mr82Z4dSlFr/iXGzen6f/tQwuxoZwN6PJEYkg7OnlYU8sLg7JpX88sd
SgL3dhhT5XuFPpGVyxwLbj840/nULnrNi69tiYwA78jcZ/X4Ezp1dG9dIHii
3abvLO4xa94owtvsBV4lvLWm4iv691eSV93+c4HOnvu+5zA+pvryTuAs3lam
zIvoTv2l16zAl3/EG9SGnF/zQ5JZHcbgJ//QvGn/g/4uwqhFB1yfiodOMTJ2
zQ+cp05WATfi/jH+j+rCmoucXubfA96TejpRNBp99vfJcDHwTHvXv2U0cWte
fvD6HT7wRi+nfRnR6BPy9dc3gzsIvTn1iToe4/Nu8yFmcA8fwZCkKHTrf71T
/2Jhn4tc8Lz5D/3UN2W9efAXm/bs4whLWHP+wMiTk+CafATTj2X0uumhwx/A
tYw7ymUDEtdcViZZsBf8e+OY/NAP9B0lrRUt4Mllty//8Ly45rTWTetrwVME
+BtPjaOrkx8r3wd/OBlWZXU4ac2VXn+WzQe/ZfnzcFE/uped769M8PuDz6uO
WySveczpG6mJ4HUDtrcz29ENRrMXIsBTBSS55LVT1rxjNX+XH/ih6I9/NB+h
HyybknQFV5Tm4//Albrm/h55qzbg52Myh19boP/Rosoz/M9zvj88l4ROO6zE
oQ7+lTDj+taC3h8TZi0DXi5N5cVOk7bmjNTUx3eAz9gdk/quiq7aumS0+b84
r1A3XQhA3zdyaZUOXD4v6vZgOTrNEu25xfNk4plFqeL0F4rrdcP6v4BXRwdN
PxC4tOYvCyWp+sFFRf5KadqhC+XqLbeBexVGHz+Xhh6ju/S0BvzP9xCmC23o
Taa+h0rAb+vH+O+nvrzmCttG2q+DJ9p4czbvRQ8qOMNyEbyHVsua1gf9cPzx
bWHgo/Yy11fvoPcyDVKdBL/vfdfo8RD6FaZ/1Q7g5fImLxU50tdcZBOVthH4
gBnNeT9D9MSD63NUwMnfh956RaGLF1h17QLXuLhXVPIB+qUoml5ucNnqwjfF
0+j7WLWKGcEN39Hvnxa4suZxm9StFs+RiTdTxwdnrNAF2QRfj4JfUZCbIyWg
S2zjFesF//mX/ptKPXobq6XJU/DLip3isXPoc5bzBvfAz+x6ynhFLGPNZbfu
4rkBfpXP+bO7A7qjFG99Avi3JX+u1WR0k43ze4PBnd/x0To0opf8eH/BFVyY
9JwqbAE9qfRfiQX48kcRT5edmWuu/upsgSb4+kqz7PUO6BO5yf6S4MO0RTNR
SeimzAe2bgUfuDdR/agePaB89DI9+KToDstHPymuHw8b/RlDJrjHazmjhK6u
uW+NGusHcJH5KLv1VugPJgyZ2sHF7JJ9j8WiT428HKwCt7t0tDK6Gt379fT5
W+AsNB8Cj0+gj11tZ0gCf+agyrZ1axauS3OKUzB42TrejjQDdN6Sw0lHwXVz
I2lfh6D/NnS5bAJ+aEc306cidINjj3yUwTOD+iUf9KNreiWICINLPu1qsGa+
tuYbr61UrP/v/kWmWxr3oof3inOuREPfUuMcuuyO7vNUy2IEvPier+avDPTL
zUfcXoLT1h0ltzShf6Qut6gGjxg8K3xkHl3J1IDr1n/3WXfhU7Pg9TVf2G9d
mQA+mX1TfsUMPURnaZc/uLCL66nlCPRaG5PgQ+DaS1Nvn5eiD9iF5+wDD54n
1ToNoOd8KMiRAXcTfnC8mTF7zdlVJ4O5wcUfHN35Rx791zkPCWpw85N52lQu
6N6Xdasnz5KJ1tYe6t5kdKvVG9tegTcpdJT7P0afFLriUAP+RGIkbewLOsFv
6J8HfuLg1KwIx40173j13i0BfLRYeqsigf5u5KScH/j41TAjzpPo7LVbB+zA
5dkFupsz0X/H0zhogSvcHfu6/xn6aa19D3aCv7jN+yXrG/qubNqvG8BPcV2m
rdt6c8238dj9WYwiE5GTubEVuugbaVy/DIFvGtteGeSNzuqiV/YcfLrxZNeG
a+htG7hNSsAXdvvyhj5H31P0qy0NfEvftYEH39BfpLPsCAb3txs2aebOWfO9
NK6WTuDats2PCrXRr06JHtEF/3HS2tHpJDoj+ylDcfAVYfGgL1conPbgho3g
e365GerWo89xL99biCQTJfoNWwIm0D0CAyQHwfl3qK2rY8pd8wcsE+cawHu8
77fu4kPXT/N8VAB+y93rY9Qe9E2XeNsTwAd2+3g36qGvHNlc7Q0+qxyS+c0O
XVXIK+ogeGwJZyC9F3pf0z5RZXCJwZxdjNHo84wPC/nAd9cpds9dQd8f+J6R
BlzdqvVCRxF6wMlOnfEI6MNF2LyS69BDtxQ6toML5MTnqvWgM52MsSgHf5iY
rPZ2FP2rSqjIJfC74crODsvoJ/nuvAkA91cOEHnBemvNCyMFjtqBhwn8KtnJ
j75yk6ZTDVz3mskGX1l0kwRXTgHwprAWzwI99ARBFzVa8MrTcUNNtugfediJ
8XAy8d7tXNQrT3TJlYQdbeCBH8N9OiLQzTknPpWAx59kbLufhp56k4hIBndm
OFcQnY8+nFa64gNO6yu2Q6sa3ei5jqUleP+NReuvbeiqH/gSFcDV1rUeOfce
vd/R4hYXuN4uXUfm7+hHLi1fWQkjE9fKxw6foc5bc787YscHwT2ofsUPbEZ3
y1jkqQM/nXDrp6go+i2FsJKb4IbbuisO70WfkOriiQLP1j0wesEQ/d4q/fEj
4JUllXnZjujuNEoZ2uB8pwIZcrzQ3x4LzhP677k+fTtTotCdpD4l0YHbPf0p
eOoSuonKOduxMzCHjleyKeej79EOpWkGf7J3nHquCn3r677EO+CCSju4r7eg
f7UhzceCSw/1eezpRy9fz6/uDs6zaLHuwRR65yY51/3gu3xIPLv+oJ+ypT0l
Bs57b6Ykge32mpeU5R9kBB8Y6u0b2I4+UyOx7UsoxF9z3YOtu9FFaMueNYOv
i+R02q+FzjOqZnQHvGXV8MtRC/SyjO+k8/9dLzHo4X0UXUim/9cx8KdPelaO
+6O73WAT0gW/wLO5wvI8unFZroQQuNnFQwWSGej9DHc4aMB1sw1m5u+gn5fe
8+FTCORJG8Oc0mr0sPNWcfXg7dllPZat6KMGoptvgjO7ZF+bekfxXZkPIsLA
O6l5N/pOoi+4bu2wB799lln/ywo6c9KR5b3gdgNCtgdY8tf8c8MtBi7wvZo0
1rd50PXSvy7MB8Pcd2yrzaQ4um/wweZX4NlNNT78quj2ddNB98E/T3I81DNC
n0h7zpIM3l4kp+3ogC5P9zPCE7zSj0r4qCd6I3XMa31wzwRtP/sz6A02F1lF
wf+a52hpJ6IT5O3CtOALF67d4bmO7nfLaPunIDLBmJBRNVKM/ilF+FctOH/G
6+gbNeh3XtRUZ4EPsQQI6rejl8by2wSCx9wNKhzpRx96efSdBbhBx+OdPpPo
LpevqsqA76ykqp5ZRu8v6oxiBeeqG3NzZCpY84QmzsIvgRCH61NGtVzoOWFn
K56Be9zwDmETQ3fYz38jB5xmtIrGTBHdNIrK8wx4w62Pv2L00JOPKfDagL8/
+MO/6CD6yObOMlnwRJqXMQ1H0RnTBgTXg4f5qqm0+aH3PD0ROhkA++3ol+Jn
Z9FPeidXPge/2G07cS8VPW6fVU8OeN62f3TJOeipfZ3doeCWlmKbncrR32Ww
kK3AFZ0YRQTq0LvecwXvBr+nVmn8ugNdfpxegBX8h4pYdugAuu7rkeIxfzIR
vVNdZPMk+pfSBu4GcJPkBys3lijcvuT4NXD5USUJXoY7a85dTrrhDy7RbNCR
wIGe7DBWaQI+utNu+qsgevNf83s7wWmSq7O19qD3cTAm0YC/V7r+I04TPYdh
s8n702Si2ZF/ufEA+uz2c7NV4LN2us+/O6A3pXiEpoD3j3133XAC3d63c8wD
XEt7ZmZHMLp34zN5bfDnp2ZOisWie3hYu/OCrxy8MMefjn5GJj183o9MSNHu
vcSahz7YnhD0Erz4lYvd1D30z6/3W90Bz8s2t6utQ9foescZCZ4/IZ93tgOd
U8io1ga8kldYV6UfXXVHqd5u8IU7fKbj4+iGNMxkJvA5Bcbe8/PoA+NedMO+
ZOLs+7KP3DR31zyvb0r5ETih23wuZwP6raZ4yzTwyv6vPVv50A0SbM2Pg9Ou
FLy9IE5xny9H5bTATXmc8iaV0APjHq5wg5f9Pa6rqYceQHU0/4cPrONbhhdx
FuiOL7zlWsE3BNvrNzujb7OYvpMDXhp+unXpJPrqp+F/geCLQQYOfKHoXRXO
qibguVvqNihdQP817uMoAh5/4Oq8bjp69cUdLn+8oS7HJXPvv4UulRVu3Ov9
39yklqBejp7+NZW3GHzj2122Ox9TvL+5e1cUeIlLcypjK7pp2DoPG3A9hVPa
g6/RK9ddHJMCP2B29MztYYr4XPy5nw7cbes7g8Pf0Akf/ZQBL5hrosYes/9G
L+LKfnwf/Lpo6sdqxsI1N3m59CIWXPdcS6MFB/pKs9szR/CyDW6nPwug14vM
35QFP++yZ9VNCl10sdiZCTzEeeD0J2V07d0Z9B9OQb61+fvBZB96f3VDKhl8
v7SgCckC/ZyjAnU8+IPI2k4WZ/SO/n/WTuAmzyS8bD3RjfvELsmBZ/s8Vr4e
hN47UUNiAn8reFujNwY9Ornx4dBJMqFRy5BAlYo+JW+QTwLXi1/cKZSNLqVg
F3AB3OGo907VQnS+N38kHMHDeu2v6Fei2+/XaN0N7i+fEmbUgO5TImZID97/
umtK5wX6Ituzin5PMtHI/fLrnnfopR48q2XgSteFU7aMomflKclGg9uYHvnw
7Tu6WKqwkTU4cev3eN1vdK25KQNx8PsZdlXRjEVr7ncmXfrfCTLh8r3TSn0z
+r8m8ZUecDG9G69ntqPTOFUXFYA3SMyrp4ujp9TqECHgAWY/b+xWRG/S7681
BvfIyqV6poU+a3OWXwC8TPePr9EB9EIpPY+549CHM878bbNFH/4tldkMPiNu
eF/jGPrmEd3SLHD68v70Im90k9lLd0+C8x42q2Y5g24ttiNeEzyRykLIJRa9
3mvZbBP4ioPv6L00dPr8HaujHmSi4vhuhvls9KK0gsvV4C89qNKlC9ENf15c
nwAu9Fcry5mM/sTzk7cj+KyR3o4LT9ClsgqrpcHtuA2VCtrQd1F/G6MCv/wx
cvzRa/Q2nke/Xrn/9+9N9CpNH9GfGm9azAfvujGt1jKFHjpD/S4QvFdy96/6
BYrn6qTm6rv/9/PPZ2H3qIrX/FdMkykPeKnMua4rrOhUb4vGpt3IRNRZnb9+
nOhBpnoudeD8JU837t+B3rKY05QMTn53j2OTJPrNxqcbDoO/GL23+bUiOvM1
ErEHPMTvIHeSFnrKwVBbGnBRxh1S6sboWjUCNr2uMBcIJziOWqP3xZSp5YP/
O7xwP/oIerP9TuYAcOaYR/LcJ9Gt+q/W6oHLXt0+mx+IXpnAYMMJzrDBaW7n
WfTN08Hvxo+RiZSuPO38RPSH7ktENXi/JfMUZwY6p3N86gVw9Yacuahc9BEB
xRYb8Ljfrsc/F6NLfqMbEwMfbz5gpVqFfnLlz+TSUZgr36g8TaxHz3MTedty
9L940lT3tqG7GZ0vygQ//eoUsfk1+p9yoWPu4PRVCu6GHyjun8DIoAROzDIo
hEygX21VSmEA32IdRc6ZRTfe93j1jQvEf5fc17o/FPF8ddWmAHy7/u2JXoYS
vI9UX4Y/uPPe/aThjehCrOF1OuA9mnEWX3jQdTamdWwCZwltfDUqjJ7xeuvT
4SNkwuKbrtqANLrAZ76b98H1CsyvtuxFd6m67RIJbvmE70epNrp7XcV6E/DN
53uME4zRPzmY5G0D94uNq3a2Rpcai+SbPkwmygvMlaUOo4fmGkc9ApffIzM4
exz9RUtN+wXwA0ucd+6fRueK6/5jBV5sP5vnFo5uTp3OKQxe73ZzgOMCetQ+
Vu5Z5//mkWmrx6norw+pUTeAL3vm8NlfQ68kpF4lgQuH+6r8vI3+anAkwQG8
PXl9VVQZuuYGN4ld4MnCXBlM1egh5Y/Ii05k4tsw/3hcA/rZqFGh5+BXb1SU
Ubejz2h+PZMGftnfYMGvF33+2tvHTuCmQ7ZN79+jx8kVjUiAx9boiWqOU6xX
zvG55UNkgtrrhMC17+gcHnzTTeAK01tqZ5bRt7G2t18Cr2lLpFahKcXnrvhf
cga/a0O3EsGKLnJNSFsSvLGktLiWA91ab7B/2ZFMpFff2T7Hh+5gcMuuCdzG
jvmQoBi60UTo0zTH//r/T6cMd6Mn2Z5idwKvG5a081RGn3oebiAO3v9sVPS8
Nnq2ccXxRQcy0WE19yHTCP0wLZtfI3g5n3L87YPo539ecUkGF1lKlCo8hL66
2VzVHvyEcHVvgRu6j6POHxHwPc5nYrK90XUqfAt+2pMJr8lk3YvB6BUznxTr
wGlu3tgecBa9b/jK/ThwTWqDrTYJ6E0WVzYdBLc036kmexn94q8RR37w9IzW
ZIZsdJO42JQpO9j/5FLu1/noZrlni6vAbwUcGL5Whk77vr8sCrzv9tYf9g/Q
t7ZfzjICf7kh0JijHj39G/kUJ/jH/Lq/zS3oPY0a4sO2ZGIoSIv1dDf69aq9
XSXgMW/1w7j70ZUk7jgGgvdZs9tWD6MHhie+IsB9xzsLTKfQ639/3c0KfrW/
5OTwLLrQdGfQGxsyYf6rlXzyN7p7rMLdHHCTTPXon7Rla77ln3D9cfC6S1wf
vdehJwTfqpcDp/Z16PnCgU6z6V7hX2u4jzvdYTs+9JL35qEt4LtO0F16LoJ+
71OSfBp4l6qu1y5pdJ1t7n324DGht39fUER/EDPsIgz+pHyZ+KSBHk5N3Tdj
RSb07dj1ZPej6wa2yVWDK1CT1keYoi8/1AiJAn+hlZH/zAa9L+PYXQNw83c+
bLSH0cN6NZ5sAq+qmDZV80D/sbOnbvAg3H/5rp+3Dzp5P/+dfPA3Ahph2cHo
HW8lg06Bv1xWP/0sCr339N/diuCvSdJOo3HoDOT03n+W0OfPJ+uspqIf4F90
agEv+/x6F0cWurGKSG8K+LyMF5fQLXTvMJHdtuAyOxs2SRahLx38FSAATvtE
TFCmAp1J/G7+hAWZuJC5YiT5iOK7bGVq74NP8kRnCD1Fp1fIqA0Gpz1Dz7Sl
DZ2D5WMBAT7wrP4OVQ86Cw9bMBM4/ZfR4PF36LI3heS6zcnEakvuueZPFPdv
EenLBD+sz9WdO4GuVMt5zBmc8eCxIwE/0J9mr/SLggvOXNfQXaZYr4ievd/M
oL/a236Kjap8zX18bkVVgX+5MDffzYhuE3iyIgx83oNjIHkDukKSQocOeEfZ
DqH9XOg8RasvWcCJUKa3K9vR71a9fNRjSia2mZYv3xFF35qRl3wV/NqWn6km
0ugHRc4aO4N3wDr8UED/rnByTgR89kSOcpI6usYlt5ivJlCv1W5ZCeuhH/nj
94cEHpF98l+VMbqpdLpTCLiUWI2y9kH0j/0vijTBY0RU2doc0N8U8n+gBx/N
yIowPErxPmopvzsOkAk1teDLzScoXGY7zSXwrjw/c3U/9Dubu37agH+T5ntS
HoJO5ZffzgeeI0r/kecs+oaXuRdHjGHf1t5/dDYOnSunWakIvIo7x3IkBT3T
nvuFF3iUmz5JM5NiHU9cNZAHPz3IN5hxE913j8H9FSPoG5/F904UoB9ilaKq
B/8Z/z1XoQz9l9E+5XPgXk0l+uGV6Dc0Mx0MwOUJju76xxTvKSHovh6ciTZY
7W8j+nOjSYdeQzKx5MR/WaEd/XLfN+Wr4BpLRv0ePejsf+WpD4Fv7tjLkfkO
PWCkrmIH+AlNHoOGj+glxYlG4wZkInfn9vDRcXQHz9zOYvBtrz2raL+hLyn+
U/EGf88uvMS3gN7MdTdVDnxG/ch+uT/o0xtvdC3pk4nPBkolOrT31txv++el
x+A7m8lipizodgrBzFHg1tNDT63Y0bN1jtDpgp+4/SDChhtdY3fOBCP40qW9
Rw/yo1sMyj3o2A/nS9DW31gUnWn7jlMp4PqxtNWaUuiV7R5sluDdbYK7peXR
35euy+QE3/82c5RLleK58etZBvZBPxCm0f9HC32Qz8ftBrhVxNdNQ/ro9IJy
pYfBn13xzXhoiu6yz25QCHx/ZKZHijX6H/nRuXE9MlFCLZh85BD6vrQ3C0Xg
bYudrDLH0CWWpYdPgm86aD2+dAKdnWq2SgacRe6EYK0v+vReAf9ZXejT+h88
PxOMriL5mLcK/G3j5x7FSHS+Q89Lg8DP3kk2mTmPbquvLqYCzh1tpZlzEd3p
mFjiHx3YV7kvCo0vozvsOPfuCfiHvJiUhSx01cmDG86C+1+gW87KRX/If11G
B3yC1DuufJfi/oK2yvTgN5e8D78pQ8/ST5Js0f7v5wkWx09WoteNqDLHg3t4
fqdfrUFn1XTtMgQfKqlUSXqK/iyHJXId+LIS6zquVnQRPSnuTi0ycTHcOiK7
Ez3co/NaCrjUhfkrfG/QZdS/M5iDv6DVsLk2iP74R6rjJnATk9jmTZ/R24sr
r/cSZIIzgHcidgJdIcnheTp4jNa+hsVv6BsrY99agTtqGlq6LKDfU1B6xQmu
/Ny1oO03epWgV3WfJpk4+dvjECf1/TXfEisZexVc0XO4Q48OXcT1tIYd+Ndc
OYHTjOjZ9TqftoL7R/o73mRBz0u56TmgQSYeH34Q3cKG3td27tM1cL2tzFe+
bUR3OLSk4QBe9TvkymYOiuvllmJ5Nf77vfTNsYpc6LF7zj8cVCcTgRwfPWx4
0DUU8nqvgwvFDmsG8qEHcpu+cwC3ydnOdlkA3eLexWZe8LhDma/KhNCLWx1u
DqpBv2FueKlZFH2TdJ3zdXDHXDmToV3oo7crWBzAK1gPMM1Kou+fVM7hAef6
kdRItxtd6aE134AqmRg2nI7YIoee3MR0Pgt8qtZGU1gRfcNTs7e2/12f9Ix+
jzL6cSsZdm7wC/e2vVZVQ9fdWaDQpwL3aTAp1dVE1x8g6WSA32DXSTXSRhdk
tFO1Ap/M/3TWTA89Te/qNg7wX/LrYiz10U+J+X55pUwmGBQLrxw0ooib8uj1
NHDv/vTHliboHnSzymbgwxvvL5qZoy+yXH+6Htwj7Y2+8UH0wY6Psi/3wrq8
/UDWs0H/2NCQlAhuIHJbWd0end1Z45UBuHrK0qDsIfRXnHZUTOCJC+XZoocp
7m/Jzt2sBHWK9Vo491GKuIW7bz0HXuRwIYrJjWJdFhzotMEv7tO5u+iBXsTz
/d2qIsxZzFfnPnui/9XbkVkHvvvpAfeXXui+L2Y1zoDHHRene+CL7v/vaPde
cNrRnx3Z/ui0OwOMFhWgz192bTgbhF6ZKnqfDL7Vft/IsVD06jPB/3zASXfM
FPeFo4+JeSpKg28+RTwWiUJ/3vXPZloe6oV012naGPSUIrmjheD3nSuPfDxP
cb6+MNu6gn/wLoh9FIee9OCsoiC4ZovVaFoixftrXf/3QQ7WvSMwzCMZ/VeJ
9f3r4Csj1WbqaRTx5K40sgW/EtzssjEdfWc+uZsD3Hj5QOVwBnqQu5Vmjyzs
8/6lfRVZ6HFBWZlJ4Jw5ntsisynO41hkvwH44lsTRaMc9Jt1TPQM4N0Cehlb
8tDDmOV5GveQiXzpH+of8tGHX1JvjQB/2vJduuAu+mdWP2oVcMeO4RMnitHv
NZzrXdhNJnjlXOakytBzxpRTKsDzt7C2f7+HvtsnTf4UuGCR/497JIr8bJH4
bCd4h56Ch1cVukqImNqoDJk45DEsK/EQvb3L9WYO+PVKVovxGnRltX1T9uDP
l3Rbcuoo8sOtVn5OcEaJbek2DRT558NXjR5p6K8CttewPUOn6STtvyj93+8N
9qk0NqGv6POo7Ae/+qWLK6AVXUFIiJMGnMMh1UK0gyKPSb0crJWC9zx38+ub
l+iN8tyJQeC1mRFfYrrRJ2nohGXBn9CRdXf3om90Sr3zVRLeJ7SWfvAN+jxT
3aa74FzTWyXPvUP/0hjvcQQ8IV7/kcQgeu/+xbu84JXdz8p7htD3mdH0vJGA
fjKGfn3gJ/SAtLKRFHC38vPvuEfQdeqWPhqAS5XWbKgZo4hz9KcmWvBCka1V
dhPo/YnuV+rEYd7cwtG+NIW+PvqiSRB4Yes2s/QZ9GZm05+7wa+N5OnL/EAn
PS8Pn9pFJiKPcFS1zqLbmpfM3Qb/nDmUcXgBfZuRruUh8OS9x78vLqHrGYZk
c4KTLQUaEn9RnOtRg66unWRinf0JFv6/6CHFVdNx4NT8ZV33V9HrJGt/aoE/
HzBm16KpWPOxRcfhX2LQz0uWdnfRobNcyqwhgzNsk9xwiBHd9Jxn+Enw2m2S
nRPM6BNm73aJgHevZ9lweh06f/BQ/ZAomXikJdj7ez26fVCoZga4RGAXbww7
ukhbeaEJ+LZPJ6aYONDlx0J+M4C/3GlMJHGinyAGlepFyES7T9v2jVvRPxu/
OhQEPmOudCGNF30uxOmUDLjV8EQo+3aK+8tHun0RJhPHKmR+pwigx4/JGeSA
k3sdmNmE0AUWzmyxAWcefHwnTgQ9ssW6Yz34/qHs1zQ70WOfPDvRLEQmbAMM
08+IowcqN86Fg+9oWv9lVhJ9Kd3cTQHcOUi200MGfbuEb+NXQTjXT/8YDu1B
97cUYMoHX3AlO5nJo6+4OCk5gItWXWNpVESXLhU32wROpC6Yyiqjb408Z9G2
A/L/Cfrdt1TRDXd5akSBJxuxlK7XQB9eGNqsBB7Rrd0USqBfkXr/akaATARJ
fw0b00av4XQ9kw/OLa/92kQPff9CEJsDuKNR5IsH+9EHWDji2cGPnnnvxmeI
/iRj77cWfjKheiItP9oYff7NqFoEeIHT69hxE3QFWu4AefA+rYH1BuYU8bHu
yZjaDvP7rbfqxZbo4Ywb83LB1e//5mCxRm/V782wBh81CL3iYYteYcwTsA68
bPZsQ5M9+hftUbVGPjIhM0Bk7jiE/tN297cg8DfvR3jCnNFVav7GSYEnn88w
fnMEfVOqEdvINjJxZkOMlNQx9ErqrWeugme7v3oS40ZxTuVdXx0Aj5Aupe73
QGc0ktlMC/7+keKSpCf6X7dA9Ye80NdxZuZGnkK3vqtsfgq8l+nnv25vdPVd
wSaC4Lc3um/e4Yc+ybhHoY+HTGR58Hz09kfPdzxKfxF8hkniaF0geo/G+noC
/FlhdS5zCPr3Z7tdFraSidb6oasHz6DnrLZ9KwJ/fuGR8c1w9GLa/mNO4NL/
XOvGI9EZPjk+3wT+ZOzPtFQ0+lDeQbYWbpgrWzL6T59DT7at1zwDXrNoeOFh
LPoD1mwHGfCOJJnF33EUeaNp8vAIF5mw97cT00ikOF8X75pmgic6veeNTELn
cnstZgS+1Nn++kkKOsnae/IfJ/Sr3IqWf9PQtx0OSieBazhJX1VJR2+Pnt7p
Bs53tTE/MAM9va79zlZwlTSq0Iqr6NVsHOtfboH5Ymqee/oa+nuvZqco8E98
JdFCNyieO/jpqhz43TNSD+1z0OmMXGrHOcjE+t3na1Jvod+oMmjLAr+hXZPQ
dBvda2NGvTE4/dXeXSsF6GdN9+Wsboa6P/f2qkQhRT53tfMggfsst75zLEY3
0unkcQU/IlE2dbEUvf/d7Qdc4H1z57sel6Mf4ehXbd9EJqJuHIybvI/e8flk
cRh4jt1WTk4yep6ME40MuA/RG6JVhc45VqIzzA7znUVUpWc1Os3Xg16XwcVD
+VrSH1HUFwnbaD3wexfvkGofo4slVkYubYTzbsQZPFKHfvWbh1sR+DZ3N27m
BorzqOyv6ADOE56SLtWI3mn65vs68K5t8TNmzynOO3vipScbYF81Gwifbka/
6JS+3Qfc/nuzcnorugvnj8s7wHn/zUtXtqOf57wx+2o9maAzb6HrfYEeo3pN
5Rx4t9ru2h+d6C2Hxz0VwIPW77Bm60HPPRwVO85GJvzWJfTu7EXX43BPyASn
DrZX0HlDsY6WWUH64D7JUWGOfejei1tMVtZB3UyYLPLvR9/4apCtGPxD/tkn
iYPodY8nH9iDL3LKP741hB50QcOAFTyLZzr3wUd0Hab+549Zod/+muLTPoy+
c+PDXSfBf7ezSAyNoGv4DARtAx//rd3zbQy9aFnj3gsWMiHUtv3Y6hf028Gj
XWHg0udiRtdPoUc8aeuXBO+NtbLk+4pemDnz4j0zmXCRD64Q/0aRH7pNii6C
D/16uar4A91M4auXGvjOg3s1tWcp1jf1Od9XJuhjWzJ9jOfRF0reVl0H3zHZ
kW61iK5vvkPJCDzCiVx6aJkiP+vfvvWLkUzYvJd4dOwXuqa9w0IR+Ildmx6f
+IMebawvaweuy69N9v6H/mLMw5YJ/HhJRt5pKtKaZ0w/dq9mIBOnuyfjA2nQ
8wWJw27ge+5ynAimQ2cxndfaAt7s/F0nhAFdRr5v3XN6MtGibc4dwoT+Kv1L
gx+4BWnjRBALOpucsNMOcAkJ2sqAdeh23YmjXXRk4q3e3zC/9ejpUnwHI8CL
ql/peG1Ep2ftK5UEH7W0Zj6+Cd1h58NvA7RkonGdfacLB/oD3fqt8eBp8+WX
HTjRi7dPSymB12mI2Ftyo+v4q0iM0ZCJEeKioCEPOhNtKftl8PenSTOa29BX
L2gME+Ad/q618tvRK+p/ZH2jhu9l8EvZKYAu7fZUNRv81cZ8d15B9M1K95oN
wKkLmvXYhNHjZx6qLFHBnPX7tvg/EXRj3aHMfHDBQHqub2Lo9xZ4PpiDd90i
sw7tQs957MO2ukoiohUDmTsk0AtNh0RKwV9wc7A/lEJfOOEsZgf+yN5SKF+G
Yr2aF9gZwF+rrRApe9BNeXLGSP9IxHaZ9hMhcuj/ttvnOYOzvYq/5aKATlwU
0V8HfmHp15ihEsV7bqXqe/iXRLy//XGvrDL6kYgJE1fwuvUr17hV0c/5Dt1j
B5fLZ2T7p4beUjS0UveHRKTTd6R81kAvGfoieQL8DAuNcDOBHvzslz4n+IOn
J9oLtdE12beYNP4mESp+jTEJuugfwhTUvMC3ZDeZee5Dp6u138wD7rAiI2uk
jy5/Lqa36ReJ4Iys3SluiN6eUB7mC77HSUSByRj9z7mB9XzgrnTCtmMH0D+J
MSS0rpAIIT7fS09N0U/t3P3tNHjYpeej2eboUao2qvzgrMlvTIMsKe6zJdS3
fZlE9IfYvzazovjek5mpAeD7qJlP77JB15oruyoA/pU9Q5LaDv2Mc218xxKJ
iHpfRf3OHj3U9enRQPAHb3jnyhzRnz96LLoDXLA6lDrGCX1oY/GrjkUSwR11
TsrmMLoBf6J7IHh84FSQuAt6atahMQHwYbFDw3+OUrynvIBxxwKJGD1+8USn
K/rS7Z7rAeBxDmIcOe7oNjd8XvODd7u+/+B1HH3bm98LbfMkokDNrkPdE30j
lR+VP3jpR8MB1lPoXL09c3zgfNcPrev3osiTtDzdLXMkIptJ3aXAB91fz+CK
LzjTxvT3Pn7oO0yddHjBLSbWhan6o199YzPwfJZEmHCba9EHoh9Olrf3Ao8N
YpbqDEIXl5lr5AJnlPmgmRGC/ubUJY6nP0mEbE1g6KEz6D5U7KYnwBO+hAwJ
haNr3Djltxk8qj/p+GQEevWvOxG1P0iEJqMtf3kUelLX49Ou4CHq4au+0RT5
8FWx+Xpw6ZxbLArn0M0e+3FXfycRAXc8tJbOow8Sm1qdwfeJBOQ/vECRh3nj
DjOBa+47Lh8Sj95H3Tt8/xuJ8Ega/7k3ET2t7KeRHfjfd0lDSxfRu99+vkkN
LuWyulSVjB6mWDBQNEMiPtYNaJ1ORX99XmnVHNxn6MljmUsU5y7i6rpfX+F7
Nxi6TV9GVxhopskDT6Li0b5zBT3E8umwAfjC4w7Tw5noI/mxRT+nSYRv6e+U
rVno0fFb7LPA57L1aF9do8hvtSfnCHCnR7rF8dnoyb8SAiamSIRqyuXzxE30
7aten1LAQ9e/uLKYg77rApe8ErhowoXBklsU32sa4/NhEvL5Iyebw7fRqzgr
rpwH73owycxRgD6QlXNbEnyctmGu+Q56a+aBa70TJIL5QvCWkEKKvNT1KCQU
PC6pyFu8GP0s1YjWDnCOFxM0gyXoL6ZaZlu+QPydO7oSytBHTdwveoELvRx7
q3yPYn1n6tdvARele8E9cR9dOL475PE4icg6xJ5xhUSRbz9nvjwC7nVD31S7
kiKfP+FgYQLnnqPV+1aFHjSkJ1M+RiKUf70OyqpGF6IXVz8IbvbYeELnEbrX
Sr3cr1EScaT0d8ZMDbplJMPmXPBbFb7nMmrRPR3/DOiBC2zXqNB4gj5lnZs4
PUIiTld+5xuvRy9Q+CmcBm5/l6Pj4lOKvqJh5o4i+IlrKo9kn1Gcuyfp7O8/
k4h7ed8m+p6jC6yMHjsLbrO/zj6sGf2H8lCuKLhFtOwGgVaKdTcMa+oYJhHL
Df0Mz9rQ7yw2vPIBLx9V13btQH/JVNy6Bfy8zuRThpcU5+6A4t2aT1D3C11j
73ZS5L20Y17O4LTWaqn7u9Ef58ltpwN/R7P4cbwHXc0070HhR8gDH3gCz/dS
9l33lA6AX0yRtRR6g+5WbXfr5wfoQxSeBzW8pegHNufOXQHP97AedXyH/sTo
rLQKeJeKd9ZyP7qt7B/zD0PQh+xNz7w8SPHcaxucosFfuRt+lBqi6K+sayxE
4e8Cxpy+LR8orlf/LdP+nkRcHzlz4PAndAnBnoVT4K5F//yXh9E3vFfJZwd/
d2XHRMoIRR+upaRaBe/Bz+9+V3QMXVuiqcYW/IWyObl2HJ3Bd0TwzwCJ8LQ7
ss5iAj33a+rpHHBOX27y+CS6d/CLUm3wDfOLd0On0Unf0zvHIC76b8Om2WYo
+ljpyXdx4P8u7orI/UZRl9lbOyT+u35D2GHZH+hfgnbf7YS4F7ydvfTsJ0Vd
09zh6Que8pGV8+Acevj+LC4OcOZi3amRefQLvpmlD/qg7qjwbDy9SNH/3OQR
twN/ws0cR71MUd9JO1J/wz4otUyySFmh6DeSSz7cAC+KEPTZ9hu9i7t6CwFe
QdYZLvyDLqeoo/AZ9lnmZc878v/QeV6aqJ8DT97H0VC/StH/PH8nJQpeEVYt
bQhzwP+8l/4TQ+tr+F6vztleGnSLkKOtx8ErhnrWHaJDv8/s4scKLrxFJXyM
Hn1f3gBdGZyHf5MRuqcY0f1kXkSagI8+5jo6z4R+7abCyPdXJOJywJn+UBZ0
qQ9bZNLAnZMECqnWoecPeR6VBa+nD+86z4Z+PkkxqhfOZ+spBjOWDeiuH/3P
+4M/HN4jnrwRfapJ5PQWcD9Wfyf2Tegv5fUNHsD5pxfSmrm8GX1QYJDRBlz8
+7q+LVvQlyKHype6SERTk+G2TE707QYmGlfBXS+equPiRnf3l3ywF/zZwy81
mVvR6X4HcvZDPtIyl9jCxUsRzz5J5xBw95miF1e2od+gO5C6FdzlwevhzdvR
syPfFj2CfBflvs0qjR/9l15riR14iclP0fU70FOtd2SsvCARX4yf2SQIortU
fPLIAm99Sz1BL4x+3YZeWBl8fp73XZQIeppRcss7yL9XdKN2/hZFb00NtQwG
71vK7vffif5Doq2FC9z57cfpmV3o04IhwtXtEB/1B85uEugvwuKPW4NTCSYp
fJBEH9BayViAejDH1nPKShr90pmW0nTwTqFvTC9k0O/IzxXLgSfzmTFq70Gn
DTmT9grqjfcBl+PVsujdVs6HfcFdbqbISMqje/ff4NoIfjZd2z5XAf3sZsXq
8haI/4Gxyc1K6OMcYpoHwAXPDn+I3Yve8N373jTUv5Kzucoryuj+1RuYEsDN
1RJ/nVBFL46iN9gJXqrMIvheDd3yiJlfcxOJ2Hnz/H1jDfQCn+8xx8CDxV3v
1GqiC7QMh9OA/1PdSCepRbEfIkQP50KdJl7OtF3TRmcj1YprgFsHHltm0kX/
F357aBDqvdWpgZRAPfStVAPBIeB1sVWpI/vQ3Wyc/3CCTyg4/DbVRyfyZT0q
G6E/T9rd/dgA3YbJstYcnKx5bYOYEUX+uVO//A36D7acP4/SjNGLbgfx/deX
nL75uOv3AfQV4VDxXeCtPSrmrqboFebN/M0NUBe8hjQ6zdA1LBz+uoDPGTJk
KVqge5rtfbYK/dDiJ67DNy3RjwU5+maDsxv7p9NboVfONTMqg68ahiuetEbX
nwuMfQP91rBm+r5XNhR5ssBzxhc8ZzdPk5Id+oRKvtp6cIsWb1K2PcX5GuP3
L64jEcUWC+upHdGv9g9d3gdu2swyeOwQ+n6joeufof8zeryBq9UJXdqX72IE
+HGfo8/ED6NzxNw4xgN+s/3Yp4tHKPJzjaPIg8fQ/1j5eX1zQeczt+80B5fT
mTpleowi/jFXnP/rR2tOiX+850qR31LZ+uPAj1unNm5wR1+tfKoiDN4oGsLt
7UGRZ2QrztVDv1t9X2v45XH0z4aDD+zB13vv45P0RDfR0uxZeEginp8feRF/
Er3E/n1vKrhHo/+P8VMU6zJU8UQCPCzbKk7HmyJfbaxPa4b++5XCcPp//4/8
f/5Vg/bAEfCv9n6cv33RaUjhP34/gD455iib9Wn04AdSYRngHK/Wh973R99y
bdOP3eCDWzodWQLRhUoljDtgHrjc9qvqaBC6l3pwqiv4TY5v52uDKdY3d6l2
FeYKlQ6qlxyh6Bd2FvVkgQ94JSaePIN+UeJipxx4jPT402dh6OpUueSXZMhX
Xzx8eCLQ162ORLmDTwl5ZvpEoi+ctVGkBi/erqvUHIUePbrSew3mH/EGQzPe
aPS2mHY7efCI3DefvWMo8uqT1paXFSTiKKPq92fnKPLe/ByfO/jlr90BXLEU
eSPOyJEKnH/5a+CJC+iJ7zujs2AeexY9Olsbhx5kHZ4mC66ZsW5qfQJFfByt
4zpgriubeeR4OBG9x9rO/Rh47wJhVHERnf7eeem/5bBPXi5UUSdT5IfugaEr
4B16kjfMU9BHxGwDpMFTPytR30pFnxT6O98Mc2b2gOfn72no6fJtjs7gm7l5
tTQuU9TfjselS6UkomHvVb6L6eimjq9HU8BPJCsE919Bz3PYRL8TXJBfz1w0
E12MCGBrgLn3WgF3kd9V9E3Rf/7agJ9Oo456koWucv3u2+8wP6cwmr9lvo7O
wxiYeQHc5bNN6cFsirqp7U7wg2uT3GhyblDs55ehPQ+KIA/UvXw3cRM9UvS+
oQn4G+ohGdlc9OVuhtIxmOd9ZEcZz9xCNzaLWAgDj6+RPfIsD310F6cYB/jF
Wi411nz0V6MviZK7MGdt+nzVogD9LXOBtjY4vemnoKw76IeErkv23yERGrWH
+z/epdjPdff+eYNHH6qoEylCZ3f7/JABfOkbv4hnMXpsqazDjQISQTO+suF+
CUU9FcwdkwNP870YMV9K0cfaidu255OIk6HCvnvL0WO+dJMOg4feXj9x5h5F
fnO5vLB4G+qOYebIk/sU++2Ir0ASuGosyzFqEvpi5Ak5IXBGicrjOmT0OZsI
6Ud50C81f5w/V4n+N7aU3RQ84vY7+uYq9J8l8+9Hb0E/3zyZzVBN0d+6W6eG
gs/NHqrZ9xCd5NAjsRF8w51Ip9hHFO8p6XqvIJdEWPJmxTfVoDdFsfOqgg8Y
zqvS1VKs7783Xt05JIJpaiBAu47ivJuRil3BX3pmKEU9QX8mcKfz100S8Z3K
52xdPbrttoqBFHCzq/ctfzWg9/181SkMrvgxt1yxkaIvMmcteXQD9pVW/CW/
ZxR1dsbO2wRccqpitew5ekvIE96RbBIh9MxlcaIJ/XHJ3vtB4AsBI4FCLejv
VFol14GPeJ45e6gV3ejTybTc6zBXdvpyZrahM9mIfpAHd4hlU+xuR+9wmN/U
do1EBGlc+cT0An1b2VuZQ+COR0w5tV5S7B/Wl/I/s0jELE90X3Anevjevh3n
wX1sTwvf76LIS8vzi9zgt1s9/o53oxuwi1aWXoU4vL/rwvcKXdjwhB1x9b/5
KOCgZS9FHTz5dLw3k0REhnL1xr1GP6Ej4egOzkDq+VD3Bv379buPfmVAvzQ+
ETT7Fv2lruJqEjjJ+tZN0XfoN9f3Se4AD6LRtLTvR+/siNeuvEIi2svpM5IG
0G+YmRD7wQVG97o3DKLznxYWHUiH/fadt2X2PUV/yLpu/iT4yU8/q4Q/oNfM
0hWvXiYRXUl/5aw/okvQb9C/BJ6Qdlbrwid0agHxTmFwVqOGD9XDFOdd0Fqt
+hKJ4Pz4m3XiM0U9mrl0yQD8r1JgG9coRX947FP3YBqJ+Ezvy7V/jOK7Tmos
nQKffSK1GDBOURemS+mpwG/nzLjmf6HIP+0Sf9JS4bwU/3R7NUHRJ8/VDAiB
pxWHrqxOUtRrS/tbVSkwt8q08UlNo3/pYzbbD/4zle+13Vf07b5t4++SYX2/
V2+LnUH/szHL9QT4ld3vliq+UfQzJcEvfidBfaR74jr0naLPV/DgTQInPhe6
Mf1EL73rbrEdnJb53S/ZWfS6X4G+9y5CHj6bIHhojqLvFc8IJsAleVeHYufR
5eWa3HsSIe/5+kvdX6CIMwedpgv43i872fsXKc5pt8W/2QQSsa3IPp56GV3L
o6IgBjy/bH/GrhWKvDHMr8ABrlQltdf8Fzqtzs3S/HjoSw0NvYN/U8TtiuQ6
BfBdjQOqOX/QfT63WzbFkQg6tW03m/6iH1MKibECP5hnlDH9D90qT+n62AWo
I8UFwuxUlWt+Xo7hegD4ljduBorU6MJ/R6PpwVW8OugcaNCNNr+2uBJLIu4m
bbCJpEWnvdjLIgL+j9ObuE2Hrhk5Ulx5HuamRyJPm+nRhxno5HTBM2e9+icZ
0Gs0FG73niMR7syx8euY0BN0g367gN/dfKdHmhmdem+76mwMiTg/x0wyY0Gv
V5E+dhbczParuB8ruqXPbf+N4GVPLqhdXodO/Nt1Kica6ogP5xcyG/ov1sYD
0uA5sa/EX69H/9LoyVl3Fvbz+ALj/Ab0IyZiLUbgzDo1EZvZ0asG550HokgE
i4BdiuwmdJFrrz95gC+9ZFUx30xx/5pmg6VIyJMnWSO9OdB3+nZcOw+uM5Xq
lLQFnWn2c+9mcEb6N++KOdFv+bMt3IqAudtg47cWLoq4yRr9kwG/uOXMzVFu
dGnX7O914VCX0w9MUfGg7zKibjMCT2is79nGiz4hGJrQHwbn9CSz1d5t6I5S
jPLuYf/lBxd/Sz5077LCpvkzJKIyiHq313Z0hgknzWjwDzHb4+L40VeFxG9t
AI93+RGWJ4AuX8wynR1KIi7Nla2v3YEe1kTFJw7OMZGk/kYQvbBxnVJ1CIm4
0djM/E0I/cIPaWVdcMe+5NMMIuhjOe5CPcEwRxtvO7NdlGIfClUvHAI/vbVA
QFEMXaOb7/5UEImYZ3I+dmAneuuf6xZB4A7VkfuO7UL/Si07RAv++LJaS6g4
upfKJ9PUQKh3H9vHUyXQN9PeLd4GHnPfueCOJHpuTexMYQCJ8JyRoa2VQh94
GsmtAF5o7kPVI40ed+aSxFN/6MM9rW6MyaD7GdeLHgCvv7F5YGU3+rHrDCz9
p2H/8318wCaLLtHj8eYYuPrCtNwOOfRM2/G4H35wPY2Xubw8xbrcjBQOA9++
fHXDfgV0ErtCISN4qmOul50i+hYhRo7LviQiILHay1MJPVZv0X07uFAV+8bw
vehTMzT5RT7Qf34YtkhWRpe6LNUqD35ixF4pRwVdqzzwdb03iXDzu1d3TxWd
r+ZDqyG4Afum8Xo1inwi51bwxguey1t1v0sdXfIa24nD4EMN7XwfNSji6fWG
c/rUf3nsvNQ3TfQCuSclAeDve7Z8+kOgj3i17qQCr3hZrsCqjW5xdz4p4SSJ
+Bh7VnqrDjq/m84gBziLU327qC56tGLVxhxPyG8JWSzyeuhPCgyld4Hr8Gp9
I/ZRfK8OnTz5BInwXhgPOLAffSnn8w51cNG3j2/Z6aOXmI4vNR+H/tz8h6+r
AfqdLxsemIHnvK4c9zFEd151dhzwIBHWecpUYUbotrv7po6Cv31b/iTWGF2Q
M/DIjDuJ2OimK5h2gOJ6E/WGQHD1beIS103Q84KlGKnAaW6m9OebUuRbxf2K
8W5QXzzypcrN0A9KJh7YBD7XkylWbY5utrpifN2VRPxgymqpt6DIDzbp8sLg
Plv62FotKfLzB3u6smOQl95F/eo6iH5Cy6RWAbx4XVNSnxU6j5S345OjML/r
vWr5YI3ObvFkdB/4oZ9vC8ds0INd1Ky6XCAPWFPv+WpLsf83TZXZgN/IjDw8
a0dRx7lbv308QiJ+lUcqLdujd0r2cXmA5/rJPPjrgN7OzL3rx2ESkXWp9j3N
IfR5z0TBYPAzWQdLGJ3Q37HL0lGBx30VFlznTPH+tes6LzjDOnbYa208jG4q
tS1qA3ighRAzxxGK/Sx+hCfTiUSkB5aEcLlQ5MOQ99nbwXOZBS7zHEWnGUtm
vHMI9ufDMiu+Y+iJiiH2UuBHWc8+5XdFv6SafaXSkUQkuTW/3eFGUS+eLT9U
BX/FXHxFyJ2iPt5Med7oQCLWs9v+E/ZA337ryEMDcCX/PxtFj1O8T653erc9
iTjH+Oyl6AmKvsWvxtYGPOlMn7yYJ3rTrDb9BzvYP4dc94mdRH/4m/naMfA5
zqs0YqfQ1T03ck3bkoiib9eOi3pRxHmHTZgv+CamrDMi3hR1c/VD25INiXh6
tG6vsA863WThajh42EfZW4K+6CxNVXx04E6KwlUCfujiZxiEE6xhvqCq9d9+
Gj1p4fqmjeAXqoQ/8fqj+woETV6xIhGTd+OWuAMo6sLU1UJe8BnmTY+3BKKL
6dCY3ToIdXZ6SnxTEEWd5av8KAoupKK+f30w+l+vezallhC3RtmNLCEUeU9q
oXoP+FvphfP0oRTxMY+lqrYgEaeYygupzqDfe3N0jxr43IPY4N8UPlOdbPjU
HN4zqnBhIQy9b5HReB94a6KawI9w9LTL3QodZnC+Bj2XJyMo8knaJKMZuICV
c8RIJEX+X7BsfG1KInbUaJLeR1HksZaNrnbgB8oU0t+cpTjXG3f8GDIhEeH3
jwt3RqNffX/+qAv4HhG6o80xFPVLmagfP0AiqoylzJ6co+jPFc1pPcFV9Nm+
Vp1Hvz72SOa7MYn4zf1CsSyWoj46nNE9DW6Xm7Y7/wI6V1mG1pIRXJ9zvv9a
HMV7zq0TOwP+9VHXnrR49Eb9j/P/DElErU+m8oUEin3Vtr4kGjxHjO5nWCK6
8uVsAwbwBEF1W7+L6FEt8d3xBtC3xx73dk9CL47r02QDf257X9ExGT38d2xm
qj7sh6i95WYpFPlqX1bfZvD7zTvf6qaiky9voMrcD9f33i3fm0axr9imN/KA
a8m9V5K8hK7/SZLlxj4SEWX+1Zf/MvpptbfT/OCvw/45bkqn6FctJqry9EiE
8djeFborFH2UzTEPEfDx7Kf7lihcIdKItlAX6kXmE73JDIr8Q5MTKw7eUmK1
OJCJPr718GypDom4l1Zq++Iq+ima1H0y4EqjEyfrstDLV2RiKrRJBFlgt1z5
NfQ6Ta1COfCNd++W3LyO3sbZVFWlRSJmH/m/Tc5G3/astkQJvDeilhxxA507
cVfCI4JE8P67reN1E12lep25KrimkFnsoRyKOnjJHZ4N/U/t2BnjXIq66aF6
VQO8NyxeWPUW+kJcPHeDBvRpy85Ru/Io6r6u5VktcIvCpBSu2xR56VvWq0Z1
EjE9oWhBn0/Rfw46rdMF3/srsnWWwldcbks3qUEcqJJmPxagK37wUN4Hvpsm
uvvFHfTswvuSLaqQx75Guzy6S5Fn+MOY9MGDk8mFBYXo626/eNGqQiJuZSvd
TitC90y/HWIAbnBP1iK8GP2mDc2GdmWY33VaqzxK0FMtpi4agsvU8HZalqLv
n3Gca98LeczO7LpGGfpomoO2EbjzgXi+XeXoOaVfQjqUSIRs/uTBzfco+oQS
mmtG4HSW6Vp/KXxotSyvQxHmDrnSkfH7FHmPd/qyEfg5uoOq3RXor/0en+pQ
IBF8J8r1H5Eo9km4wG4j8IaZIdY8MkW/QeIdbJeH7/1Hdz6hEt0mpdzLENzk
h16lXxXFeUwZmGqTIxEv/jZm2T9An9xzy9QAvGTfTQXtaopzukx7o1WWRNzu
Xrmw6yG6qhtd735wlwtLqRsfoZdR5f9s3kMibqo9MluicDPT0WU9cIXCwy1D
NRR5b7B54vluyBseGxaePUav3XPgqQ64IvWX/qJadLaPwdGNMjAnDjEFptRR
rMtpI0kt8FHTjDb/J+gBZ5uf1EuTiA0p91/b1VPkw+xpZQ1wxZrgTI0GdB+H
2hu1UrD/327YJPQUfZO1ypQKeFFPhi5jI0X8Rd35H0nC9eHSMtMUfumErroS
uE7GUk/nM/TI+l6dKgno62o3SZGeo7s2c8rJgaeG5BJXmtCZBTewVohD3VR/
ui64GV036EmHNHjmkStp9i3oTKdEA0p3kYh3Qupdaq3ozqX6jOLgvSXvmra3
oXt8Eo2+uxPma6a4AKp2dPsHjWPC4Jy7PT8MU/i5IT7ZPDESkUGdR/WsA92Q
UcWdH9xLx/j97RcUfcsX7vPZopDP8+N9z71EL5WtTdwKzvo4pOFYJ/rZWyJn
MkRIxEsGtTbdLvSj/8fUfcdT3f5/AEdIVsgoGWUnZGWkcplJQiKSUYlQQlYR
UUh2Kq1bViWVcz7HlplRqIhQ2VFWhAiZv+v7z+/z/vf58Djnc67Pe7yu+3Hf
j3vi2NFN2LknJ2MkPpEu1XqEN1EC542afBbGFtJzOTZXsGO/UJ6tPQic+eRL
85viuUh0ZUKxupV09RiOD0zYX8amdad9Jv38UaR4TQzvC4d+3attpA+GGASv
bv/fvxf0wcm+nfTf7SJ5gdj5tl/X1uoAc1isqWVuWy66eF28Y/MX0F/KVt8u
Yndn/yA9B3y+taDhtyi+t2o9Uv38lXSJ9ukMd+z0QdRl6jfSaWxszkMiuchZ
SDo0thO830PruE5j32K3rdK1i3SZc92ZPcK56LVjSYl+N+nf9e5vO449Wo3L
a1sP6cmERmSbEJ5j33QHloDbx1e2mWH32OnJ9aUX1FuZAvv7rbno70LuIq2P
9I6tUXKG2KsWdqbH9pO+MfHj7jeCuejq+/l1Z7+D51+lk9mLnWlZRVxnAMwT
U4l1RVtw3a6trAoOgvnmpvlOCXu7qs+9WeCDe3R9X23ORTJDxPjHH6RXEYhV
GnvggbbVZz9Jv/ta7Wa6AL7HBSx+vDpEurix1PRW7JeuIlubYdL3HuXWTebP
ReeO1mQqjpBe8/5fEBd2vtbUFyyjYP68/P44mg/vzbo/F/qB/xlvfMGIvb//
61TRGOnZMUWpIby4X+ouKCb8AvUWkR28sCkXyS5/kncZB/m8K0P/IvbVpa2j
eydI70t4OvuLB79HyfOnN/0Gc/VZXpwzdsa6ngejwD9ING/s485F8jxxCZWT
IDfyLgbaYN+umKx3dwrs2atqzS1cuShGnq/QfRrMvYuR7Iew0xilhrX/kP55
6Zdy7cZcdPPRjw7eGZDf5Nx092F/X3M+YhQ4HT+dViEnrgetzj/ls6SLNeUK
7cL+8oWRaNJfkKPOXR/O4shFcs8/s7rMgTnA7PtoG3bmguQCzXnSj5REajxg
x7l0f44oxwI4z/TyCm7sbqnKB/uBF/cKKkSz5aJvQrrKef9If5CYFsmAPWl0
rjNiEZxDp3l9ICvud4nzejZLpJ/6Lj/zZwO+j3wtOye7TDr6oLn+HPZjq+ss
l4FL1PozDrLkoubLdssfV0DOnB0as8VuLfT9TOoq6do3Y1+3rsf3zcxXcV5r
oK5y3XyMsR8r/eavQ1dAPmd6KF81M77XLF7bxkNP+ljU5zRN7M9/VkcPABd8
fIaPxpSL1k3mFeQykK6/Wc1HBruxn1f6tXWkZygav05lzEWxtTymFoyke4tl
jvFj38JfULqdifS/snqM8ety0e1E77Ep4D435dYzYWcwOt1ZyUy62tVTM0EM
uej7vvSY+PWkx5j9qP9Dj++Dp4xW7VhIf6NddMMNe1y8t/LODaTvuNe9q58O
595ENZl/wPlTj705hn2XCK3vLSvpvRnSez+u0ZBm76LNHTbSv0weSdPD/s9J
/s4pdtKt279MlKzS0Jri6VsKHKQXPCmVUMT+NT/XfAm4EW1N/9kKDYke1mh9
x0m6s/kzUyHsiQbs/Hc2kn7yG00naZmGNn09IHSSi/T4pxIiLNhb5Rh/7uQm
XZuL/kfwEg0Z2tp6zQOv8T94e2aRhg45O1VU85DuokEn54Z9p45Gc9wm8B4L
pSm9/2gov3k6w4aXdFnL6i2W2PW/P9cU5yO9xb/1QsMCDXWr+t+eAJ4ZYZuz
H/uuSxeJIn7Sv47atefN0xD1QGFimACoK87uIRnsmQq2qoc2k65wqvN7yhwN
KWf5P+LdQnqaue1bHux+ghJve4BvMXW4c+MvDUX2B+Y/EySd+DByaHkWnzO6
7eK5lXQ/neVxL+x9XhHd6kKke4o/Cvg5Q0MTyW78dMKkp/x69+s49kvvrHnr
gc/xRhxs+kND0cyuHQki4P0KtSf+779njjuQa2ctSvr70NdvCqdpyMbDNEtk
G+l0NerdstiRsWXhT+Atzmb9j6doSDKt6+ar7aSvTKxr4sEeuW15u48Y6ZoD
1k8jJ2no5vmPIZripMu9P+yy+JuGuPjOpq0B91YZ4bqA/e3D/sg6CdLvZO14
+n2ChuQuHFGOkSSdt5BX3Ar7i8lPGeZSpJ+afBldP05DqZ7+X/mkSe/+Od2l
hf2CwvHPncDb5Ef5qb9oKMYu8XaqDOh3+ztaYtjjBFW2nNlBuhLH3MG7YzS0
97LNGRlZ0n92cOmyYE+5LOA3Djzv2LB40CgNMXLcOETsJP2u7JXJiREaEuGr
GPaRA3PpT8uTk9gZz3w+qC5Pupj5L73PwzRkVNbjvQj81HDjBwPs9C0zjuUK
pHfZ+2gXD9FQl4Ecb+gu0qVPDD+SxS5FTYnXVST9XdSOgf9+0tDALYdmRiXS
xZP28mzE/tEpouMt8FsS4nJhP2jIP0bmSZQy6Ycn+3bNDNKQ3kkHDWMV0q9k
+gk7Y4+U3XebTRX09ezQbMcADYWLd+V/AG6crFZohD3GzzQlbjfphejsqdff
aWhBK8fEVA306auguZ3YD17nqOFUB3Pytr9fSj8NyR6MoGsGXpJr28uJPeyK
LFOCBphX9bJKoX00FLzC02KqSXrd3VGP6V4aepJieYZzD+mzXQ/unMbeJ8pU
+RG4s+P+p597aChKY8/3WC3SeYa+pepjD4jb8P7QXtI/q3uGF3TTEGdh1BXW
faSfFqE/KoX9kNbHv/XAbZyT2O510VDzvXG1G/tJ39UpSVmP/bf6sraBNun7
TSr2XOqkoYrL3NzrEOmlsQ60kW80tD1H50UV8NcXNvAcx/55UwZbiA7Ya+/e
2DV8xe/9+4HdWrqkd5yPvqWJPV3LSHoBuJuGC5H9hYZ+aRZ/z9cD58NoU7IF
++LPV2e89UF95px+dbMDzzEtLULegPQhrps3/7Xj9yVzqXYUeN7GJnM37Aux
l9KfGpLuH6PK8K0N94vWkQOnDpA+ebYyxQg73wJ/oZAR2JvR3uLFn2nIIbB3
4gtw9a7Dt6WxR5wr+510ENSPrvVEcisNnTxbV3zYmHTLV4lKzNh1lzlMWA6B
HMK44ujXQkMsL188rwbuoJV66ccn3I/D1KYrJqRLosCgo9gL+JUr1A6DPcJ0
y7W6Gc//JIOAKeCaoUPaStinn67+yzYlvfFpMH1aEw25JXgbOpmBerhwPIcT
+9LVXDshc9LR5yt6wR/xe3zUvrcduMmnsZpfH/Be+Pd7KO4I6c9PP1OwxV6Q
wXPC0IL08zdzr9e/x31xx/LBKvBgA54aNeyvKuvTC4+SfvNB/fiTRhqSYL7u
e8GSdPbor3SbsPvtv8ctZUW6mbDBWmgDDa0qbbncA/z0Ce6R3/U0ZJci9PLO
MdK3m6JSO+z+igVZh6xJV6Rvv9T4Dr/f+LkLDDakL4W1btPALmk6S1cCvLBP
K+/pWxo6/u+Nvedx0u138ipuwv6YwydC0ha8rwCHe6F1NDSzJHipC7jaN+HR
iVoa+i7zcfetE6TvcbGSPIE9Yfy/CkM7sK/VWEzqa2ioJimFZxl4+RlN+93Y
/9oOKNHsSX/CNm6TUU1Dxy6FCLk4gDxpJK69EXs3d0SroCPpHloDG6+8oSEz
3Q2WzcC1GeXej1Rh3yySfv0k6Me6dd5W2F2SO0rUT4G+eHKevroSz7E8g8e/
gH9463ZFAXuFTYhp6mnS/xxd/f6wAtet8+1GCycwf/zklddjV8+5x8N8BuQi
68XzPuU0pPU3RaoE+GYp16S+Mhr6tFDMfN6ZdF+uwIxD2JdclnJFXEhfM1RJ
KSqloZWBgJ0twH8tJV8Tx36SUcfr+lnQj07PLRJe478/5ha225V001x3jqUS
GuI4sc5xGHjVtu+5LtjlI7ZveOBGevQwp15rMQ157O+4auxOupfOfPk+7NY/
VGqWgP9yTxHPLsJ1Xm/y+dU5MCczGH15sa9TUSHsz5POIK1IvVqIc6z9v+Oc
HqRzaIm3jxXQUNUl2qcK4DHbv/+0wj723IPX8wKoB1GP71X5NHR+PZIU9ST9
WFDju53Yj2bsWdcM/G7w8v3kPBq6csWTEuJF+k4vZit67A/jpqQUvMGeffxr
6VwuzgnVzed7gBcco8Z10GhofkkkNPYi6UzDlqw62HdxT53U8gH9ntbn/ZKg
IcePlhvHgEu2W9TyYd8w7RBz35d08280+lAqDb1R2tZu6Ed6PAOd7BgF19ue
F+OzwBWfo32W2PVecLZm+IM9Kx6gVZGD9yy/Y4R5AMgzTc8kZLAHseYwrwJ3
Yfq8cOsVDV1kZD328hLoa6m1oqWXNJR1+YaPzWXSf9xSOO2M3ahNzZEpkPS+
rDPzTS9oqN9nx5Zc4PHvnwRoYHfL8Up3CAL58NSfgfRsGjJ9L7zAeoX0c83m
mmzYL3HoChcBPxFcE+j7HNdh9m8up2DSw9oOZ/Vk4T3eoPqZMwQ8v/ZMhSH2
pgTJM6+BV+8sekN9hnMyd2uN81XS45hTqJuxi9ge+sMVCupc+3lU2FMa4jmf
MVkKXPNgt8nYExry3T9S6hIG9svdvcsW2N0r5K25r5HO/eBDcmkmDQ03XX9T
CtykMUFIAnuZ0dKi83XSO9NuxsVm4PpcfLKOK5x0zuTy0dl0GtqWfaurBHiT
xC4le+wDnK3XnCJIv9fw3akujYZ8uv3/sUeCHMLwLUweu1txonYhcE6zzTF3
U2nIU1vRyvEGyNWKmVdXHtOQAaPLHpYo0mt3BDs6Y29O0J0kgC9XZMt+TKGh
rac6fI7fJH2rv9x3VezuE0r19NGk3+5guf7ffzSkmeY8ng38tJsuFyN2o66w
/iMxpG8q6Y4694iGsueSn/wDXn6ka7z1IQ1VogKN9FjS6d/o7N2D3Wx1/D+j
ONLZkjcFpD/AOd/dtGUSeMIpyxQW7P8KR9uT40lvKFhP9byP5xVb84t9CSA/
SCm96riH73E3OM1/AJ8xaruzD/s27eK66ESwx/NmXZ8k43vH/m42pVukD6/d
lWHDPnojWuwL8Pi3pZ+979KQCu/nDcFJpBtnurl/vYP3SGvdG7HbINcpZ47v
xx7z4qJxPfDxTedtn96moZGA0UyPO+Acht7lsWHv5NzTxHOX9FfGrxe8k2ho
TtO3oQj48x+GO77ewvP8ddZdu2TSrWy8DfZjlzr4Q5n+HukRh/YdfpKI58kd
zfSn0J0piBX7Xr2i/oP3SRc1qxf1SqChienz0xPAk3Ljx9rj8ZxUdf986wHp
D7WY0rWwVydXRO5+SPrZe7v00uNoaP3Dy2zfgGf4crcwYy8renHqyiPS3a5T
jM/H4uc/eeqm6H8g1/mxEi0xNJS3+OpaNXC7FRl69Zj/3Rf+O+ycQvqGTxz7
/4umobcBaGz9Y9J1Mstc6LGLrDyzeQH8lIJmkMtNGjr8uu++SSrpGrI3gt5H
4fc19u/Fb+D0R16cVcT+9Q1jQmIa+L0Oz7Tv3sA5wW2jgXI6mJMbr65bjMS5
cd2Oj5+Bt4lp5DlgV3t+UtovA+wjm3bTmgga4nWrO8qfCXKFt22HNPbiwy4W
RcDvKL4/GBtOQylWFuI2T0g/bLsze+o6DdUG3H+7AJwjP2TWEntlxoG9D56C
OcbYsLPkGv78sgvhms9In+blNBPG7psplPoNuBbliENYGP69cidjL2eB3/Xo
3vGfoTR0X8LIZMtz0g++GEQHsY+aD/YWA4/M0uTNuUpDvR5I3yab9K7TKZ+5
sNftunBlHvjfVzxXfUNoqFA36EbyC9IHrFP4vwbT0CNjf+fdL8HvVdd5qIVd
bdCDvw24tigDa+oVGpJL83p48RXpj4YGnRmwM3HETXPlkJ52ZizHOYiG9uS0
bKUCl7m4ZaA+EM/PZZMthymkO4/6Mshh9/DgGBsDPvCUbmPCZRrSP789PopK
emh41fo/l3DesLvHJEWQHuBUPG6J/dP9YPMa4FZi4+VFATSU7zdw4SSN9MV0
xyBB7E/2t51cAf6wll8y2B/fo9VPST3MBXPbg6+0z4+GQv67V6mWB/bsNcd9
utgb0yPkPgNXG1l4+cQX3y98ND0880Guu/GTeT32d+pvwtgKSO89sMPUzYeG
LFh3umcBP81bH/b+Iv4cuggpvULSeb/Wpctjd9vRU9gLPPWqFCXBG8+fmzpb
A4tIX1iYeDbthe+D26qO8hWD3KKyLfYodtcfLicJ4Kaib+wLPPF8q9XTOVRC
+mNK21YB7M3ZZ+Z+Andoc3h76QIN2fh8uRr6mvShcCf7Tg+cixazewRLSW8t
GOrXwi7JNbaxADi9w7h5ynkaooQ85TcrAznB71LO6jkaCmAZmx4B/vdv/Jwj
9kzXuvRr5aRXfFORe+OO946FgZRQBeg7oXOmYthnfAKuFgC3KdOwv+6G56eX
W45pJelZhWk2P1xpaMuwDDEM/DhbFjLA/taj5kZoFen6pWZ8z87SkNAdQ9Ut
b0CeqX/cwYzdZKCygAZcTe1++FkXfD7f9rIbV5POuAGJ1jvT0OaZRvUB4HcN
Hz6TwX4gI0AjsIb0L39fCN48Q0PXLMw5eWpJHxPxDxp1oqEjrqdLsoGLv1+r
P4hdXqdUU6eOdFYmk3UvTuO9r+Ka8BX48a8OsqzYP8T7v/Z8C/royN797qdw
Hns085r5HeksoSP7G0/i3PtwPDEFeKP3WTlZ7O/fXdirWk96sXo5c7QjDVGt
bpQ3AvcdnPg46kBDlt56vKcawBy+sRJ2EPsDRKB54BUaU2LZ9jR0faBTN66R
dFe2RoIFu4HnJ0Hx96QL8CfsdLWjIcOFlPpi4Pu99G6/O0FDMlHmJqYfwHtU
/jUshf292N+ng8CD/aN3RNri+13d/fZLH8H7tZa0+XmchpRdjLo4mkBdTVX6
6GOX+ctVlAF8wdHhSqYNvnecWHNVbybdp4bxIgP2LUHbpt8DD9tTZHnKGu8X
xTCzk59If/nzskTVMRo6ba4QPgv83pD5dxHsH7NVE6JawHs/iWKCrXBuZEz3
EmolfdDPRKzbkobaxUJlCOBChy8/24NdorK3UO8z6fVs7wUeHKUh4/iGrV+A
838z8J+3+N/9/bC1exvIhz0Tb6yw6wf4u60Ar9R5t5h3BOfzziMWie1gnih2
bOPB/oV+nFu8A/Rdh4iqlzkNrV078rwA+EWHp6pNZvh3/YrnM/oCnn/eQ0wO
+3QNcbwT+GrTlZWbpvh742p8z38l/SdfR93wYXw/rf7ssgqcshwcZICd49vE
rsRvpOsWXBLJNMH5Vlvk0/ZO0u9fbKTQYb/k4H0gD3iBa4CcwyEa2n5/5q5+
F6iTD9fvlRrjPWVEK20HHtk2M7kZ+1xdYbFLN6iTove7/Q/iPObIFTcP/F7O
RrfPRniPn2zUiOohXWyq5qYi9hOs06Wbe0EOKRm/F3eAhhYeJfJnAzfUj789
Zoif36TASLOPdOuPr64cwG54+JxFA/DSWyZHnxjgfddQoXK8n/S8Zm8BeuxO
w6XjI8DD3m5rsNfH9526C8GXvpN+ptDe9bUenvPBgz/XD5Ce0i/3lx+7gbiU
1D3gLjeSPH10cT6p1d0vNQj6ayLpS7MOzl1nDRQKgIfbKMvLYW/buGdO7wfI
t+x+XlGIhohiueRW4Jpmjuk/tHGf2uzgPPWT9KeufysR9tVeLYdJ4AlpWh/+
209DeupekcFDpK9pq71d2Ifr2aA1km2Y9NnE0RxL7LmjHo4PgDv2Hr9O7KUh
zmVTLukRMM99YwzZsZ83D3uQD5w39dr8WS38e/O5lnRGSZ9/pZdcswfP2ymW
3c3AQ8dbxUSxS7zzO2A3BvJ2jmpKoCbOybOnlUeBz2l7MHVo0NBrxe6/fr9I
n/gbekIJe7LcxC2GcZCvtvumxqrjfXQnnTkBuAn/oZZhNeycTJZbJ8A5y7BO
62L31BIPzAJ+7VXBasru/91/119W+Q3y1b8jiwuqNFTKX2FeCVzEeXDw6P/+
vxS/jtAfmgR/b3ShlKKC90hFU3QHcMaludAN2Pv40cSpKdL3fglTPaOMP9+H
JjMB/KD6po4KJXzfN1PYd2kanKc/1XkL9jLRatl1f8B7mbYd9FHEfX300nQc
cAFGQbOmXbjerOxubZ4B+ZZj+rkM9o7oy6yZwFfO/Zi6pkBDBRZddvKzpJtd
XZDqkcc5f31cVBHw0SylQ+rYo1YfxOn8JX37gTv2t+RoSPUGx/n3wCUqJRx+
7cT3rPE/4lZzIHddHDYxwH7iolVBL3CPt/07UmVpaJ0t2uY6T7q6CN/fhR00
1NRTcWYaeGtfFMUC+yGV7muBC6BfvNGxVzI01BOdGbjuH+m39qBxJuylG7eZ
xAJ/lxHr5SiN59Ww3TzvIulTPLKDxVI4z6g6X0kB/nBWSJ8H+x5u/S7JJVAn
uW63z0nSUOsdRl4K8PRC3pZaCTxvP9Gk1JZJ57ogtiKMXbv12KYK4OIG9wQC
xGlob9rqN4MV0m2zA7Z9EqMhn335gR+BL7HUC+zAfjbr2l/LVdI3fY5dCdtO
Q487fI27gV8MaGzp3EZD6RV3LzutkZ7jEnFHBTuT6dS1MeBbeaoNYkVp6NyF
BBdvusL/9/Zf4T9/iODzYQyRWACe69Lqsw/7tqm3ZSH0pB+ao0zdFcb5lt1v
FxMD6X85Re1+C9FQsMLtKzHAayWlCw2xn5WRe8K9jvQo4v3q4604/781fnYP
eKMkt9q8IN5Tzf+uCTOS3rS8dMIM+zZm/T2ZwBNzEr2ytuD5KaP6QYYJfC/x
2WdtMw05TLVpUIB3XG1wtsa+yqUUqsJM+o87/oZUAfy+9hzNKAZe697Htx57
P79h6r71pK9cYWlz4KehRRPegGrg9QfmQgv5aGgwuH7HARbSuY1yhDix6xl6
FL0H7rOklOXMS0N8+zm2mW8gXa0/alv5Jhp6vpDr1Ab8qF9hFC/2LEa3azas
pHvsqew7x0NDguOaV7qBt1OzJGu48XtXVTxyko30iGO+toLY3RyO0f8Avo3Y
EeLNhffaUGHsWXbSZ/Z/SKzfSEOVenYzY8CnI04miWJvGzXffYGD9HyWX9f8
OfH95UCqxTTwoENepz9y0FBi3ZFDvpykS3+eVZTAXtp4UXQeuLZk8O9AdjzH
itibL28kfewdx6MWNjz3RnbYLgOf1nmpJoN9U2FbVQgX6aWCtm9CWGnosI/A
Onpu0k07RbTaN9DQTc/lbdeBm21YzdyJ/erfOEEmHvDeFZeXwlhwnR/qmIwE
vrtLWO/renzOeX1pLJvAe0k6e1kBe7N7vnw08LzvPY/DmbG/cEhm4yWdYhmR
18n0v3/eNdIZCzwl4HSRIvaA23ZLHHykW365/CKSEeeE+7Xz8cC16D/Fdq/D
59Mn+2kjP/i9190clLHTxz4ITwQuNG4sGsWA53OZIB+3AOnvGi8199DjfBtX
HHYLOB11/oIK9vObghu5N5O+fseHlSg6vBdOX5y8Bfxlw2JQ7xqBOKMypri3
kG4kFjWqgj0sXqDpFvB3tZcMb64SKCio6wa3IOmP9FqSelcIlGS+IHwL+Bul
5CYV7PJslxK5tpJeJfbhX9QygaKfnOlLAP7sRQBv7xKBKrnrWTcKkc7ikCKi
8j/Xe8UTD5yuVWdz1CKB7KS3zrMLk67wnxt9zz8CHXoqUhwDPN9iS6cSdpmM
KitWEdI1Yq0yIhcIdGmV9VMU8O99YrZd8wSiJK+XXi9KutXPCHpF7HJ6VbYR
wF+rXr8fPkegg1/3n1u3jfRCF1HRb38JdEQqziYMuBuv41157HH/8sXWgHt/
MVwKmyWQjmBVw5XtpA8d7DLvmCFQnknx4UXgJ5i3J8tilz+SRQkQI70rS+h9
yB8CrQ4mj88CH2lonWydJtC18sT1F8VJv8JixCiNfXvS47XfwJnpwliCpghk
xdPYdk6CdPfD15abJgn0YkzoxgjwtTjzfjHstTVp/M6SpMc7TuX5/ybQaV3H
69+BHz3pEtA4QSDH9ac/2kuR/k+hSFYEezE1d/Yb8Afuwx+9xwkU22b7z0qa
9LLcpZN1v/Dzs53pagFuk7UwuBn78I8vDw/LgP01MnDs/Biu58lK9QbgvwQq
SypH8e/Kl8zV30H6z/Zb7Juw+7zmYa0CblfraOYyQiD264naWrKkH4uQv1Yy
TKDB2OcWhcB1SteesGPPtDijp7ST9CmWriLHIQKpHfrI/Qr4I+7a17k/CfR2
dLxcSo70nkuVOUzY61I+HEgHXjjQkmjzg0C/Wv2oW+VJvz6z5vRykEB7p6dn
7wJnNDeVXh0gEIu98WYuBdKPp7zpNMf+xz9qSzTwtVCHkMzvBJp6VLCwbhfp
LWk7eOb6CWQq2VUQDJwpUzrZCDvNleHIPHB5BXvWR30EEi5WbfRSJF11tOnC
RC/+3lNB28eAOwaF1Whj/0v0HXNSAvkn9jJLUg+BzMfd3buBj9eU7vvRTaBb
1lJ2VsqkxzaaOKlhL1TeKtcEvN5I6XJUF4GkXlt0GqqQfnvY42pnJ4FKpTpc
KoGrmK/3l8NenUNpUVclfZ8cg33INwKthP4UJIA/kHRS/fSVQM+bruvK7CY9
ZEhheTv2y2+SjNKAe21xz/f5QqAnoVvlN6uRrue2xb6ug0D9u6SnEoDzh+nM
8WN3may4tV4d7CP24auu7QSa6/rFfRV4biHnYkkbgb5xFnnNAd8lV36GDfuP
lB0UDw3SebbMV9p9JtCVRyaNP4CP7XjDRmkl0F3+HXUnNEmPZttmtNaC+1ew
/nErcM5zm/3MsTMRytYH94D6+UtJSv9EINUu79+VwAOOj6T9aSbQw5T4M2pa
pA/oNaTqYZf9e6vkFXB1p2MJd5rwPO8OnxDbS3qn8x3Pnx8JVGbsRfcAuNfi
DaSGvV3F/g/nPtK/Ne9muPGBQMZRljXhwHffzcj/8p5AZrsdfRaB9/1rtZbB
XisRyeC1H+SNnPe/LjXivtvX6vUTeI7jLa+GBgItnjKpsNUmPbtKZmjL//zi
ylgz8PTQZBP3egJNmvye00ekc5j3Zb5+RyDDBumBEuCP+taPs2KXq8h9paBD
ulw/r+SJtwSKWb13LBP4FwY2s5d1BNpo298noAv2zsJvt6Va/Dkpd4xigbf4
1Pkdwi54qzyRTo90Q8nbFx/VEKh3yanYF/j2SruTv6oJdCAtsXIE+LkZKW0t
7NP7TJ7Z6ZNu7zvHGfMGz5Nbqec/AT8x29zcWUWg1KO3efQNSJ+TLA6Txb6y
R/F+EfCx0jyJwEoC2S6GrMgagnzl9q64oYJAoTpRuo+BP+qf37cF+5Zyy7Pc
B0j/r/1gvms5gV7xT5wLBx609GZrcRnu09nj5vPAy5icfddjN1vM5HU3AvPw
uXrFsVICDbz7XNwNXDx5/7+nr/E+Wpzea3aQdIbwEMm/JQQSl1uf/gZ4nuSy
rj72lpmtP1WMSXfZVXbkdjGBzv3U2PAM+DmrmiMDRQRqvOXCsfkQ6com/HpK
2Esjc6ZvAjeqL5EMLSQQgxl/4RJw65Dcf00FOHddzLb1MCFdQpypUhh7mJ9n
Xy/wW+cK/c7n49zV6aVvfpj0++zvhUvz8BwQLbz5BrhJ6YGiDdg/VR6gKpuC
/pVT0rXJxXW+W6EgE/h1/tiKZ7T/zQHvR7xmoF/k7eX+EgQyuLj1dATwNOns
GD3snkIqG+aAr3vt232Livvi5JtEF3PSHR7WivRTsD9vWugAbhOSYqGA3feE
k86BI6B/tzJeupJDIIeeG+5FwLfIrMQ3viKQf4K+r7QF6VePx93bjJ3+U7rD
PeBvnEtuubwk0MnFrB3rj4K+Y4gMzn+B+/SsY7s/cOrQvC0D9ufnPp0aAu78
bpOseTaBhmzXNVtZglx9oncs5TmBnoXTCdcBL7C2S/mVhfPD7k+HVK1Iv+OT
pKOJvbc48EQm8NYzEV8inxGo1ZLFhOcY6U+/azq2PSWQnmmYcBhww7T8r9ux
dw1NNE8C/3tsUc/zCT5P+2NODtakz5ZuTC/LJJDA7+ovH4BHRfyb3IB9XauW
vJYNyI1uZYrWGQR6qd3glA08TtTe6Uk63kfuPkECx4Hb9d+YTsP3oHBd3wjg
6Ivx4/3YP5TsN50BPmaQ/iwmFc8lda8Np2xBnnQYSfv6mECKkn1Pm4Dv+CoR
J4ndNPu2+N4TID+4njh3MYVA74buXssGvr0uUavyP9x3qxPV/Hakiz5tWGHD
/or9yY/rwC0qWHNtHhHotXzV8BTwL29tbJ4+JND5y8Yf7O1Jr/Qtnpp+gO8j
TIeSGoHzhigE7cdu+KNBU92B9M/3K+ej7+N9KtVcnQl8ItDL5cs9Arl9Oy3P
5Ui6QafBO3Hsv9fHXb4CnHZeX9ArmUAqr62yRoDPD3s5lt0lUPnf2kLLk+A8
6T8ls2A/Vz6QVQW8y9OlyvIOfh7uokC5UyDPDGt0p90m0NXJg7vuA28TMRkb
T8L5yiKzbt1p0imNT8Y0sNcov9/nCfxB2oGe8FsE2hrZcK8T+DcrzepPibhf
tJ99NnAi/WFqyAMh7H/M3KYJ4H+UhZxcEwg0+0RweusZ0ntr+UXz4wnEIVvd
Gglcj9Xn41ocgdjqzyZPAx8v2n3hEHZZ50177ZxJv3HNif5eLIE2//xQ8xb4
cxH6GwMx+Htl/pNXciH9Ldq0Jo/dYuPNy4+A70l57HY5mkBavo+ymM6Srj2S
9bb2JoGUlLqKPIFPt6vwc2GXFzZ/8Q24seABmxNRBHrKznBVz5V0Sbeh2Gc3
8H2tZWF3DnBNf/786UgCHdXa28zvBvby366Pe7H/4m8zDgW+74FW540IAjUo
1D8fBT7Kt+dbazjOq8bbRi3cwf4S6W4Uxl6s+IOtDLiNsxTV9TrOdZlbuSXP
kT6TIhyZd41A0k5NC3HAGwPfmq2GEchVgbFmDrgTRZL9IHaiqtbT8Tx4/l/a
pbdD8bl9Flh7B1x6cIt971UC5QgxeSt6kB5jVDwtg/3ykTt194GLfRS97BOC
XfzjMt0FUJ9iVjPlwQTaoVvE7wb8wqLdSRbsD21tN7UAn2LaW2VxhUB+AhV/
NDzBec7N8aQE4by0bSw/DbjelSSb4UC8X4SHjrN4gblhtOmWEnYpasl3T+B7
2EPKgi7jPHDpvMkX4BsCvnTWXcLnJsD8cL836aaaEuMbsWfJxDc+BT7H4DZ1
PIBA/IbsvewXSS+8/mI4059ANuuj2nyAc56baJnww/c4+g2UTuAGrmpUdezb
65PddXxId5ONvhrmi+8XvzRYnwM3Pzmh+96HQLv/zcVy+pJ+t/jMP17sfCFf
//gCv/99NsPhIt7j635qdQG/cjND+7k3/l1cEq46fmD+O1xsnvYi0AvZlIAs
4Ac43Cy0sKu0Wbtz+JOuox9TH+6J53zcCeQDXJfoUWq6QCDlduq/r8B3r56J
F8D+SMoueX8A6XWdkr0nPfB7XzrL/wT48T8S21+cJxDr+87LGy6RLjDtYj1z
jkCOrGVVF4APXJsK3Yt9t9ymX5+BWx99mxLhjudY+vCCxmXSmzkmcprccN77
gsZSgNvZu9EEsN/cI1XJEEj6+3Ht5yddCTSvmhpwFniqi19S9lkCLcnnbfoA
nM+P0+uPC84z0W63FYNIF6neqKOFvZXSMHcH+Jn5YKZwZwI9Xuzc9w+4foV9
+Ycz+Hs/PHG1vwLyVWWeKx92y2sKAW+Af3oSvt7BCd/LfK+6SQaT/pqv/cGz
0wRaXn6sfRN4yets0clTBNrvdeffOPBsrfUP1LH7ip29Zx4Cfhf6wxR6Es8f
Z5Et+cA1PT1d6h0JlHvjTYjAVdJXPa+/5sJ+4It1fSD0EWWG4w74nvh45G8P
8ODQa/vS7XGOlQ5arxNKuke3//lROwJ1FPGvZAI/l8GboITd+U51B3MY6VUB
J59ePoHz1VrEHTfg9vSO1De2BPqn6ar2AXjvIG/OBuzBYV5lCtfA/qqJfHzk
OIGMeJ5J3QKup19y/YENgUykuPxmgD/ZQLP7bo1z9d+CLKvrpP8ovLhjB3b1
gscVRcD7fjOMeR0jUMCDlpIt4SCHW7o8LrbC97XPVg+CgBdHpRvSYZe7rWzf
AzxCoWTggCWeY0yeTNoRYC8P0S4mHCXQf1Y8SWnAFy0S5zosCLTwSnwdQyQ4
n03HL4hgf6j8wsYJuFM9V6fzEQLFs+Uk1QJf5C7TzDHH9ztbFZrkDdJzEhzj
Zs0IZK6jnx8J/Gn/WpsW9omeoUfDwLMz07mum+J75WExV6Mo0rcGHESNhwn0
9sXK5mzgiwtLTtzY4zhDKRtugvf4tjzIxoRAUQmEjDvwpeDbN1IP4fPRTb7R
CFyoNOzGkDGBOjU13stGg+cUjAuSx34tMmUmGvhdjddOvgfxfVD9I90v4MEE
Byo1wjnfpumPcQzI/8KxXAzYhWazGl4A9xPc0250gEDTm05FsMaCua0jFJ9g
iO/RFXRS7sC/yalrdRgQyHo+7mUD8Dy/hG4h7LurN/LviAPztmDHRSd9nEtF
45yjgK9dZ13O1sNzm4Pj4TBwvUC1wCldAuXdTM4zjCf9za7ccTXsevGKuU+B
f9C6djRYB+c93oG7jAlgXu1+SalBBEI8uQ5OwO/nKq1uwO4WnMVeDbzuoKCu
uTaBko0aUrclkm6Z6BaYvB/fO86IbL4K/MRWiazufQRif5Pj1wM86KppvRj2
cOOQYq1bpPebT/S47iXQqfHk/gfAtcWZRihaBBpJWJ2YB/715sOh2T0E8hIq
67dKIt1HIPfbHuxuAR3FecBPOpi/CdUk0LFwS3/u26T7T11OeauB57zEvi2e
wDc5qlxgx56kcS/9A3BBrTAVC3UCnU5x2yh7h/RZXteJe2oE2rmr9PQN4IlX
xh/17Mb18y7p0Q/g9vSbtMWxt2nPl+jcJf2Icn+HqyqBNnlMlj8GPpBi40RR
wecpcS1rCfiG1tAfM8oE2qte6G+TDM7Nzt5WE7t+QNLOAuAhDX9qQ5Rwvs0V
fst9D+SEZwYStYoEWit0MLwAPCzE9tIG7Gmmdq8agef37H5juotAf3WFF6Tu
g71m2r16WwHfC04833EduKGdhdI3eZxP7Bl1+oAzJ/5nI4J9H7vGfq0HpF/2
qfR1ksP7TtZ4+z3g4QmVEc93EmhXgM7YH+BR59NjJmRxf9EkHpg+BOec5Bap
jD39zqL8C+DWUUL+ATvwe+lqeM70iHTUXmFbJoPrQfvBhlPAbdcsVemxiwV4
mpcBPxk7yGAojfej2tFggf9Iv0bv+TZaCt8rlQ8lXgTuMrgU0iyJn3+rw82P
wGUK4+V4sb9OS3KVSQHPubKz2UaCQDNek/LXgS9ofXVJESfQmHrQtx7g12bv
zXwXw3kmde85jcdg3j739JPC7nxkz2AScNdOp3H37QQSngnUmQD+e8NlG+o2
AtHJMkUeSCX9VVFeyYwogTQe9BHpwI84bebSwC47wFW9BHwp5uWJKyJ4XzxJ
LbFKA3OP8P6vShjnxpCke1TgS4c9Wxmxz7JOndiQDupt4PmKkRCB7v+sYHYC
rvZLTCRuK4FuP2O6Xwb8zeB3lRZBAtX+aNzIn0E6o9HYfj7sJrv5LngC57+N
tI9vIVDCzl+59cCDtEdVUzbjujp+tHd7Jumi70ZEvwvg32tqORUI3CZTj04S
e9r92ZHPwIdMVttd+QnEXbenXu4J6ZNawumv+HD/OsjHRwBnGHlyaooXz5OJ
1j29wHnrHwioYt/1T6lJ7SnpoRZ0NQGbCPRz/RGjBOAsK91OpTz4+VPUsoeB
t+5VXVzl/t99eXRK+xnp7pGskbrYK097it4HXnH4zPpILpwPk5pVp4BvYzYM
adhIoA0HuJSMskC/i+WPsWP3XlbnTYPOm2dizol/r9zh3nngDw4feHKbA/eL
6bEEs+cgX2n7TXewEyjy23HpLOB0x3VUBbFv0XV4tgp8mJU4b8+G63PJjf1Y
NukNNXUP01jxvvO/fjwH+PJ0ZMXgBgJ9F6PFMb4gXX3dwhcp7BKe/56fAB5/
RnjYjYVAZ9+dfpkL3Pva0q9X6/FeSJ65s+ElyFf1yUOTzASSNMh1PgncPWOm
Qxm7oNZT4SLg8oH85X5MOLf0tpZxvCK9vWTdg2JGAjEn6eidAf6osdJ9aR3O
gSXzxGvg3HxmyvuxPyhYYuLOIV2cvnAylIFAe34e1T0LnG9uIaOGnkA8z5hd
yoGH2wqZMGMXsBT03kQBOfOOxC8jOgKlHrzr5AZ8gVuOTmCNihz7gvdVAu/X
HOP7b4WKLpzvXOWlkn7eNVZg+zIVHTSkZbkDVzmzlenZIhU1VbFoVAH3/5Pa
K/uPirQVhql8BOkiX8SeUOepSLfPYuM54GVtr6xU56hoWMziWBXwyFeGM8Wz
VJRm+Cucj0b6cZF/V/bNUJFRssQjd+D5Ix/+vJmmIgk7xgeVwF/XN1oaTlFR
b39iCG8u6YqBSxmNv6ko7tynQ27ArxSd7TGdoCKaTgNdBfBMzc2Mn39R0e6s
sBSePNKNi/kErMeoyLN3bftZ4HmjrvxdI/h5ZIzjS4GXXRNkcBymoogal4GN
+SA/qKl0DvykIuXfJ0TOANcsLn3s8oOKNH/s0i0G7l1UZjY2QEUC/SOH2QvA
fh/cP+HxnYpKBeN0TgLX+GUcMN1HReHvxYTzgQsHjk749lKRngzRv76Q9Dgt
8SML3VS011kr9gRw6W906UFdVCRZ0ChKBS66FN2z+o2Kdhw884ihiPS9Ro3M
175S0Yg555oV8C/O74SYvlBRwGKTcTbwr/PRolHtVHTq4quQZeAlacIb2dqo
6Pngq4dmxWCu0kf9imulorcBHY8zgNeWtOZztVDRy2O7Yv4Cf3aW+dztZiqq
eVbuaFRCelvWTk7+Jiqajr0h9Aj4Db5Dj+9/oKI7crffTAAPM/bYuvU9fo9Z
Q6boNekb+x5GpDRQkaBIVG0ScAb37m7Renxu1GCxn8CLQvdsz3hLRTMBH13V
S0nnKCq3kKijIos7wfduAndPveD9rIaKYkXuULqAlzRaBctUU5H7LgGKfBnI
M/VB/i+qqEitlz35KvBTUqN2cpW4TlCQSwtwIe9nipRyXA/nXEXFy8E5qJRN
7yqjoodenVW+wHnnldNor6mI6/QX47fAc/U27VUpwe/XzLlcoIL05lTnuvwi
KpI6EL3ZDbhVovJetUIqmrcysXsN/OX9a2lF+bjfb9Ci2CrB5+9x+KORR0Vr
PypT7IDXzX1Uek2josiA4Ec5wEsOdTpoEVTUYjAVtgq8qzDmchmFimysRI6Y
VZE+lTcWti+HikRecGxIA65avhZQ8ZKKcgxrs6eAWx/6fEL7BRVtkTNS0XkD
6rPdQ77qORXR2aY+vQXcqOXLOMqiopimZroB4KW5Wx6+eYrnSWSfvnI1yLfj
Wrt1n1DRrytt3teA800aVlRnUNGHl/k3WoGbyOrt1kunIg+2yEixGpAr2DQf
1qRSUX6S6YWLwIfWFCf0HlPRZnVe7Wrgu71VFGr/o6KU8e4F7lrSO+uN7PUf
UdG3p5RHp4A7XLgcWPuAiqaOJkjTgOe++xihf5+K7g+F/0dXB85T0/RqbTKe
YyZ3F82Av5Rcd1b/LhUZer/VSQVu9Ht2b+1tKrqlI3LxN/Anf3bS6yfh+nmW
EbPvLchFiUReTSIVbYg+Hh8LfEUixlIvgYomW4wCu4DLs9YOVsdR0Zkz/may
78B7fOB0SjeWioolRzguA4+RvfjxTTQVfV7ILHgH/MCmBWmdm1SkWkk15K8n
nev5ilfVDSqasOF+cwZ4plbMc+1IXFdPmiTygIuIZjdVhOPvvTrhTd8A8lWG
4+C+61Q0Xufz3Ay4NE/RUFkYFVUdOVufAvxTadFXrVB8nssfW34BvzPqVvI6
BM/tlJxazUbSPX60R2kGUxHByp5+AzhlZt2B4iAqqtgy6dIOnMV+eUYtkIpa
U+z4xd+DfHLmXULBJSpidrOlegGPMvEQVA2gIl6T30oVwD9bzd3O9aOio/wi
j9k+gJxf6b6s6EtFJXcnZ2yA/37bepR6EddhsqvKM+AzWWoP5b1xrvgRbzcD
POu/x80vPamo8KCrJ/oIPr+HZ3bHBSp6Hbd4Lg64Rvqj9c/PUxHLpUMWncDn
hXRYpc5RkXXTSTHpJtJlwtmWM91wv1uhbh/gcSzrera7UtFq0+TVKuAanbty
Ul1wv6z4cnA0k54o/fC8sDPux4z28OPAjYWNtz5yoiK7QIGhp8A9hg6UbD6N
c5o+UvoD3OTVI8Pkk1TEXmblsv8T6bHJh2s2OVJRyH/2EdHARd8777plj/dX
qn18B3D9C+PRnHZUxHjlRJhYC+kRGaPtMbZUxDRm53ABeGmUM9eG41SU8Pis
5Gvg65HrnkhrKio/HNbB1ArywM9/R9cdw/vuBdX7CPCBu2L2oZb4vTsvzP0H
XNp9zGrFAve14imXEeC/A4/vDzxCRQzFk5Uqn0lv6A3gnzejIs6X2euuAo9/
cbjXx5SK9AvuKDUCt58euDtlQkUuYYUH+dpIv1+rvc/jEBV9L+Y1OQl8VOV8
2+hBKmpeV6DxEvj+w14nXIzwXGJJ2TgHvEHIsnXAEP+9R+sn1E762itRTUcD
KrrSYXslBvg95q6ELj2ct39q8XQAj1GM77DWxX29LyhpWwfpAoo6HG0I91ew
yIo78CKWZRVzbVxX+jstCoBLl701/rCPigZ3Zd1aA37GOPuI0V4qKuq+V3rw
C+nZtJdGtXvwnv3J8Ok2cM/f7buQJhX9HZxo6gHusbRrfZk6FZ3wciiW/grO
s+VNk7oaFVVvt431Br7N9XZknioVDcUNGZcC98l/pbBLhYo0Dm6YZfwGcvIL
vncvlKioe+jdDVPgVlodZlKKOAcuSDPfB/7Teq4+XQHP5427PL8D1/4drCws
j+utZKBatpP02THf2Ps7qUgl0ojeF/hHjcGOTbK4buldZMuBN1Z94k6QoaLg
QrSfuYt0cXeDfazSVPRpV+9eM+AHBA8ej5Ckou1zelL3gXflDzrTSVDRSmLA
Yj/w11uFnYLEqCg7MqRkRzd4ToUV87lt/7sHOThdBP7xQ8wub1GcP+8KLbwG
XtHyafWXMM45+RUB63rAOW9uq3ARoiKtPcYDh4C/v5zi+V2Qik5n1arfAf71
gyq33RZ8PwpUudQNvGcoPbNDgIo2Kv6XKdFLuumjcakj/FTEZsD4+jzw1lKh
R+95qWhZxbs0H7j25j10hpuoyM9/JGsZ+MMQk2NV3FRUG+55Vb+P9M2lJ1L2
cFHRXDubbixw4fue7fmcVNTRVz35GbhWb8KqAgcVjfE/jNraT7qyZe3mbDYq
CvqdzO4EfKqCV0KclYoSv1YEvQAe9z1qWwoLzhUGAh3TwI8Ey3AKrMfn/Ozp
Vs3vpOccWRpPZMJ546ynSShwbaEN5ayMVPRu7rLrO+BN94+HhDPgvF3V6Mk5
AM4zbFZxlY6KGuTPnrYC/i3ue1vAGgXty7ZE/wEv9JVxn16hoCsP728YBG45
9mnKfZmCjrlqVOwYJP1g+oDrj0UKcryk6eAF/Kixc6v9PwqaVEgfLQRue+ek
/Jd5ChKb9D25Atxdrvuy+RwFfRV8Xa33g/Ti8r6ihlkKyufx54oG/nj64rDu
DP4cNcrBT8D/80xhKZumILPBsxf4f5J+rMdl6+4pClIKeB5iBzy5t0OU8puC
rh/2C8wAbsz3l096goLeVn0+NQI8fHvDSuovCtKTbVBVGCI9MN32y+YxCmId
sJ3xAR6uRMu4NUJBM/vjU0qAC59vc2QdpqDHOJ+sAR8cfc95/ScFXdw3ma8/
DPKYTip1aZCC0iKlxaKBc7Mc0/UdoCDxWv6gZuAnPs2/He+noArD6kreEdLv
7ozd59xHQXQOu6aOA6fLFnzW00NB2jZO7KnAV9pf0B3rxs95zYn3B3CO/fqH
mzopiG3HbpYdo6BP3X/HGH6joP3JPcMewFl+EGUVXyiobNPpvFzgsbtu96l1
UFD76Dv3eeA2Lf/NUtoo6JkjL+feMXCeh9qXpD5T0JZSk5RQ4AYi+n8ft1DQ
D+S/uQ742Lupfv5PFBSrmnx1wy/Sv9cOVMQ3UdCZr7TWw8DzE7YnMH+koGiP
Ju4k4Mzp+UdC3lPQb5XpvR3A73lmMs81UNBhd1FLwXHSdbz+5njUU5CqqYO1
A/B/fLkHfr6loLWteYYZwJta+j/b1VFQJ6e42BDwYZ6bFm01FFR9Mm90xwTp
kYa5NYeqKSjc2C3FAzjTVyfpmip8zuuM99GAdyg+Dd5TiT+/2rZhFnhEcfBb
WjkFiZan6Wj8Jr2gbZZ+RxkFpUhtfxYEfNsot2LaawrSUP4+VwH8vnW3uUAJ
BT3nHlJhmATnFnriTHwRBfn/VbU3AO5alezOVEhB9ByfL0YBb/O963Qln4Iu
R9b5vgfuP+9gNpNLQQPx3E6cUyCnpS3Ku9MoiNeibN8R4Bffeq71U3H9LzYy
3gEeW15XY02hoNO5usUdwO2/rgtqeoXnW7qMzZZp0i+fVZI0eElB736H/TgB
PKrEqro0m4KKq47aPwZusPWShfJzCmLYm1ndD/zql9T2588oyDLcj1f8D+lb
1NsOiT6lIJWyZgtn4MxhQgV3MylombEoOAu42eJVbvYMChoMUbw7CnzjENOp
a2kUNGuk82DnDOleEQWZC48paFPY75sewKkCyd8upODP19t3lgp8ayeF4ecj
CtLPUVaaBs7Hsl70xEMKOv7l87DyLJgDXU8VWu5TUFiXZIwv8OvRSUoH7lFQ
d4v81kLgrCZt0uV3cd+1TN2bB65/9CK3yh3cX5M+9Jp/Se9v8fn9PImCduiW
WQcCT5/vqxC5hedSV9PDUuDH/pRfu5NAQbQmonEZeN8E7x7WeArKlDs7vG+O
9B284z+uxlJQPNP8VAhwxTjj63+jKcjd1Xm4EvhaiDrfuZt4zjsVNdLNg/Pk
eP2w/wbuI4Y/D3WAu5z4tulYJJ4DRwRtrgG3jvov9H043mu2uxlqgNfmsn5H
1yloSNrowboF0pfmZHcXhuF9WmUtrA/8mCdj8M5QCmqVc4sPB75f9XFxWggF
eXmHjdcCl7JbG+YLpqCbt5+qM/0jPWFJgS0miIJKkzs9DYAzSqqK0QXiORMs
eTcCuPAon7zfJQpCB2Oy6oAHH+vaOeZPQXKLXFlMi6CvL8eIOPpRkHNC6W0D
4J328kxtPhQ0wpzoEQHckq2+z+giBd2yv61aB5zn5mlKuRc+54TGEcYl0se7
1nkre+L9nrwnWh94PXOedJYHBRmdH9kcDvw2a0Dr1vN4v2/4dqcGuMHQMe9E
d3zOztyrDMugDpOPMzK54ef0T7bUBX5BIDLm8ll8bkoe98OAM50aZP7tTEFH
ox82VAGvdr/kf/oMBYX4iI+sAf+ww6Sz4zSu/1722f0rpFvcclY+dArP2/IT
E8HA45Leh1Q64r25wttWBrxcKKJSxYGCtifse74EfKfwg9ksO5zTHDrd9qyS
LnOVU0ToBK5D66nNl4FzyI1rJR6noJ0u4QVFwPewaZoy2lBQns8j7TngmxmW
LS8dw3nMbU+R6hrwWS3zcUs83xRchHyAE9Vr2iePUtCNbHFPGnDHw6YSbUco
6ElVAHUS+EtvhZUD5hS0YH22R56u6P9dlC2rsdSUgr5YzC+cA242UxG76zAF
Bd+WY3gBvJ0+WC/zEAWxL7H9GwZuwT7ym9+YguLcHvZI0pN+fog5IdqIgqbL
u6lOwJtP9YuvGlIQT8cXz3TgCqZBOd4G+HziE4X7gOtd7t35Uw8/Tw1biRAD
6R8pXKk2unhfmJnq2gJPLN68/gOioEpW+5J7wI85rDhpa+P807xXpB34b+e6
gtx9FOTg88eLZx14ntsBy5J78f76eI1mBnwqS1DjwR4KCsj70xcLfNOZAld2
TQq6tGC43AA8KMI0/qo6BdV4hjOvZwR/Xz/+/M9uCtrzi7qqB7z+Z3KxsyoF
ZWs1/QgFHpd8tPyrMn4exR/F5cBtE3cUHVKiIM0Hc4GLwGVviD6r2IXfiy7r
TnUm0tfk9kYrKeCc+U+8wQd4j1Kk0xM5XM9RRlYE8CY9RmWBnRSkW3qleRx4
H2f535s7KEjGtk59BzPpYvuKKMvSFHRbXjreGfgr/392nlJ47yw/a00Hnnwq
mm5AgoLM4w4y9QJfTfd6YClOQalPNkkJrieduTNX+t12CrrAzLr7GPCWbOuX
mtvwPvJTUk4CHk11lnglgvNMXrxwE3C7G4NJIsIUlBMmNb+BhfSA91/mErdS
0PzjlQoD4Jy8B83XCeJ92rjZLwy49fy+VL/NFFRedWVLOfC4DeWDw/x43mor
vFoAPtH9QdiWD+c9OmV51Q2kF9P7Hv6wCe/Zytj/PIErM5dc3M9DQYd26y2+
AJ7unxFHcFFQwxZbwyHg5j1qj8U24nqQ6Ajdzkp6bPWVJ3c48PeylmXbAX/6
KjCNmR3nwGtcb+4B/y2qnnSJlYLO7f/6thV4+ePiy2MsuK7+CJRysIF+z2ay
tltPQSbmbSlGwK0rJGSbmCjIg4XH8zrw7uNCM9qMFPS0sV2hArj93B8ajQHn
ZwOJngXgiJ3qIk6P54kUQ6AKO+m/uK25767loF1bfZkuAK8PmqYxr+agLx9D
rj4Hrl8WbnRpOQc5jEqNDABv1hNoH13MQfIC3trCHKR3hVKtT/zLQalrpyKs
gff0Hf30YT4HMRqvltwCfvg9q/b+uRyU9p9xz3vgz152ZlJnc9DL/w5NMnGS
7jzcsLptJgdZ/Gaa0gbOOthrljSdg4pUQ/ouA99Mv+3euqkcNM1dUp4HfFPG
7Tbf3zmIXbo0egJ4uARiGRrPQay8Nw2lN5I+92OnsvWvHDQQID19Evo+e4v6
0RwUNvUw+iFwvqhOV82RHNQoOMLTBvznlhd+L4Zy0L2kTdEcXKQvH2i9tPVn
Dir5s33KEPjMmeMXYwdz0FybgEEocOc3BqdXvuPnb/0XVQJ86mWK0YX+HESE
fSj9A3y391nJvt4cFB94p2cnN+lfT2QvmPXkIGOLY7/PAA/Nd6uu6spBoSn8
v1OAf3lDuabUmYNqJ791dwCPrg/RzPiagzK6nrzeyEO6EVv/EM+XHPT4T9AN
I+C1jV+jr7fnoN11TnphwPMMPCVnP+eg3oGTv0uANxVnF55pzUHMnQFRf4C3
OsTvb/+UgwQ0crh3biI92Eu83KA5B128yRTtBPy2hKdy4ccc5H08YvoR8G/U
gMdSH3KQu7KSURvwzQZ69Pcac9CrFI54dl7Shfi+2q5vyEFXxUVr9IEXmu59
GfAuB8kcch++ArxExP/PcF0O+vlwZjEf+Ao1RtGmNgdN3qtcGQd+Yud15/rq
HBT4tnVSgg+cT9HpWxpvclDh/zFd3/FYvl8cwI2sVBqIRIWyMhINI4fMRMgq
o0gyIzKSUpFkZpWQVZ79GCmjMhPSMktIdop8E2VWv/v3l/Pv+3W/7vt6rutc
n3Me6q5We+RfLig9olQz4e3z/twU5L0pP98IVTFhLHXY6TXySzKFfVHPmLAj
R3vdCsFlL7P2Gp17wgSy01KhOvLQ/UojbhVMiLQVPuCPvG6CpaerjAkfWe89
pSEPvzncaFjKhMcfY6QHkVftGKCXP2KCjN23COGNyx7wcSlSuoQJB1kqW8yQ
Fz3SPJZWzITVOtyropCHvKSKcxcx4VZay55q5EM7DIaCCpjQGrLJ/Ddytm6R
jC8MJnQ6fjsuL4Ry+7v8IRs6EzIrdC1dkDd6hv9ooDJh+z95zQzkxcfF4/dQ
mOCTRxNoQ95RvVaCRGJCoED1J27hZT+RZVkokE/U+UufVC3kEbPTytfvM4Ek
X6sRiPxi8wxzJpcJdcVl7Qzk1/gdtrrkMCH8uc3xIeR9LcrR7VlM6H+X3yK8
adnfz10c17nHhBYd0h4z5E/CD+g+zGCC8Q2H2Ejkn12vpGxLZ4IhV0vrM+TZ
qQa9t9KYUCPHxjWN3I41XYTlDpHP9nNyMiLoXO5esvBJZQIbMZOeQO5hPHel
L5kJlZd19FKRZ7GtJZskMaFLLXv/K+RJlOb6Z7eYcORuqyjr5mVvkFTolktg
wpY/n6b2IK+zhy/pcUzQb2p67IVcUIVrgieWCS/sbrvnIbeJjRoLjib61Ebj
1V3IJfSae79EEX3w+HjOatFlF9Noa7K+wYTz4RclDyL/dZjEeHGdyMnJf3eC
kdubH45SiSDyai50kYl8zbZmu/vXmCCw+Nt0CPmbxO1S668yocrcL0lIbNld
g1y+XQkj8s1q+oUJcub92Pz/LjFhj8Plr9eQXx69b+sYyoR9tRv/lCGvXF3E
/iaECRofnrN8R249UkpSv8CE0zORM9u2oPlhb5U2LYgJPV6nu6yRh7x61SEU
yISXyacYMchXuY2cuHGeCSeeXvetQc7Zunbolx8T2lRaJH8hD2866uhyjgnH
zQxeymxddsqaR61tPv//Xf85OCLPddqrqX2WqDfq68Ek5KRLQzmFXkxgCR+y
aUS+sLlqSdSTuC+q+yoXkX+ZfW0W686Em6verVfahvpRvcC9hTNM8LRg2Log
n9qbNeDmSjxv1hGfhryb3UvsgwsTjI4YP36N/FdXxFG9U0wQui3wmkUcvf/0
5JUSJya4ee5tV0HeZl1A2naSCSX8j5vdkJdZN9cnODIh+H3Sw0zkG9cY9vyx
ZwLMdES3IM+VkP/maceEu0VhR1dILPtajbCpj8eYsMnkzqp9yOUWDk4Z2DLh
5MqtpZ7IX/y98vWxNRPWSouZZSOvHlPvlrAi7ulwancb8hVWIc8TjzLB+3KM
Fafksif0aef/M2dC3C722v3IXcXSwrzNmPB3P6uoN/JM+jWLHlNiPmm76Z6D
/KgIl5iRCXFfVHNJ7cifsMgNlhoT9zHduINzO6rD79NZkoeYkKwW93M/8hSf
M5ZJhkxwPezB6o2cIRDDxmLAhK8cX1hykD/xcKF66zFBPJNrqg357rk5w56D
RP4cbGnl2LHs9/RMBwx1mLAor3d/H/KYLne/UiD6Y7zHaU/kuSrmSxJaRF++
rSuUhfxWD09YoiYxbwd+eNqCfJPJ3YW/6kTO2EuZsUst+zouDh8vNSZkBO3r
VEVufd2i9+M+JnD/WmPshrxX+4aOwV4myLEWFqcjz39EyX2kygT/xs08b5A3
HH02v02FCcf87M3/IXdObjyUoEzkhpxf9C7pZS8YeZeypET0dxHnR6eQTz3p
/uCuyARtd6V3qcjDr37f8EGeCTYaA92NyN/lrzbS3Uns/5PgD/PIzZMgqFiW
OEeuxXo5mWVPK4zJEpNhwg8Dr/sOyHVdZqpipJhwL6vFLwE5j8CVrrntTLCS
37m7FnmhpMr4aUkm8AmED/9EvmZGYLZNnAlvAj5GSsqiOX9QdklrG/H/5ezu
TdbInxsHLzC2EP1dNDXrBnLFWPafwmJM4M1h469AfnWpdTByMxN41l8J+Yb8
9/TY6+lNTPgSv65NRG7ZBxpNik4KE/Wm9HSTCXLqK464NxuZQFt31fIy8pdm
gqfUBJlwxuhMWCHydlKEMpmfyJ//zmX0Iz8rYr24YQMTxETyKet2orpaSKi8
so4JBgMryDrIT8TtvfCdj5jbrVNv+yP322yhcHwNsT8Jx4MeIE/4PtzbsIoJ
dlm2Rp3IX+v+itjNy4SJlORVnPKoX7tE7cjhYYJWBF/tHuQBsfdrV3EzwTy0
xfUM8ohFY+sLnMT/3NjuP3eQz36PHB5ZQfyfqt0V2YTcLuuYlwU7Ezpku//N
IbfWe/m9ipUJXO0fPGQU0H0R7nGTYyF+7wuFxmPIt5ilfLrzlwEVq4f4o5E/
ElkwXvGHAdyP5o4+Qe7NXPfId5EBprX+Ed+wq/QLfJpngJimLWmTIrpHnzzO
Gc0RrkCrOITcvLO04fFvBqxI964KQf734EsB8V8MSLtOekRDft2c7Bg/zYDH
M7aZ3cjjJKxzF6YYYPgtKmClEup3n7o/uf5ggJmbGqghP5Snxt8+yYA+n3NL
7si7boXoan1ngCCrMu0u8vTG7LP0cQYoiVwxeon8uXNh0sZvDAh4dqJ7Dvn9
0IKi8DEG6Ax22EvvWnayfF7Tf6MM4Lw51GKD/FhsQrfdCAP0GQl7biB3Zl4c
bRxiwF39T3GlyCPve07sHmQA1bzl/QhySpjLRHY/A1QbvNYJKKP6NPMc5f3M
AL7MUk1d5Oslr3cHfSLOpbnYzh/5kxVlTUM9DHDUd/bMQy6xxFF8pJvYN47X
Xq34/euCkp92MaB26ecJlt3LbmnM5yv1gdgHsR5dReQXGO36yZ0MYNpHiTgi
F9n7cuO/dga4Uv8OxSLfNz4z6NHGgOEZ7aynyGca7CjvWxhQqmB96BvyWw1s
bjrvGHBZT2tMSGXZfYcntxW8YcCvHazBBshFhLe/F37NgK/V2fMByPfb0SKu
NzNAa0nM+wHy1Oxw+akmBkw1XGtrQy768XGLfSMD1q18J8OquuyDc3pnm14w
4EUBl78icqHJfZwq9QwwuadU4ICdlJyWXceApWcmPTHIHVfZbeetZYDmjPNC
BfKYlSmMwGoGpEif5x1D7hJ1UGGwkgEZB66vEdyz7B2eZ2kmzxjAtimdXRf5
eJrwtoonDEi6V/rtHPLPU0ZJkhUMkKP3Pc9Gzmuz4m9CGQMaJAQT3iCfIpm4
LD5mgN+Xk4cXkatVyb5wfcQAm866Rem9KGeCcra2PSTu9Sute9bIrRklgZrF
xLmTe5QikMNu90ZKIQOs9dNLi5GXDrxYz1/AgNRrYQqfkUvFvLUNYzDg4N6E
tFX7ll2GNeruNxoDNh94M7Mf+aUNsx1WVKJOfDQPnkHOe2srby2ZAU8fDIWn
IB/R4dHYSWJAYMnz0lrkBr8fn7nzgAEGfgM9k8jT/OTi2e4zwK0UpkX2L7v7
5bOF3rkMULAcWTJEfr4v/FVXNgO4trTPBSDPs/IdPJjFgNCvq7/kIWfP3zdT
kEnk1fW7je+Qv48ZYNmUwYD+ugvpS8ivN/pwX7/LABe/hydk1JadtGFs5Y87
DCh0NthojfyvzBFuu9sMeOukUXsNeWgdlaUhhQHjGqkOhcgPJC9NKyUzwKjG
aqIHeaLZ4cGMRGJ/yq56c6sv+3fGvVectxhwYmLzgAryP7a/Cs/FM0BKRs7A
CfkddtuE3lgGWOwpyo5DXnes2d0ghsiZnsJvFchLOM21Ht5kgHi/vPQo8paS
H3yiUQwo41GwXa+x7EXcBT03IhmQIPoo5AByIXpc3s8IIjc+P0/wQM6ileLi
EM6ALfxOd24jT3Zt2NZ0lQH00ITEOuTSddLdyleI9fRYXJ5EbvKjOu7eZSLP
fxQ4bNJc9tq4Wxrcl4j7cpGsqI88QDV71O8iA+I0YOYc8tgrP2I+XWDAyx+h
9HvIT3De3GkYzIBbVk5WL5EH23s3PQxkgIzU1NQM8juCeSdEAxjwe6vS1a0H
0PzZIPfzhj8DQv5sYz+M/OvSmis/zzHAMrA5KAj5fQMzHgdf4j7qyn/OQ+6z
eyau8SwDJLaY7n+LXND432plbyJvK5Ui55Hf2Rh4M9OTyJ/3XS8ktdB+bnVg
4fJgQK/YobkjyFW/lfudc2NAzKEo0YvInefj+ntcGXBo9R1VEvKYd/1G+qcZ
UCwcAq3IayceFxSdIvr+NtUDS8gt3q3jE3FmgHfnKwUpQM9Pz3lcP8mA+BHt
9RbI33T41P3nyID/WDLGQpF7jocIHHcg+kVndzEZP18g5lJvx4Az6zjOtiF3
SDlRoHCcWP9JUdE/+Lt8OjNptsS8cVaqWkp72T8mNauy2xD3ZWSHpQXymrg/
ft5WRM74bukNRf727Gf6h6PEnFDGb0NGfifvfL+2BQMeOq980Yr8W3LtWoYZ
A/4Ir9ixhLyd3qwheIQBDuEcITt0lj3DPMXligkDzHXX15ohb/4mHvXNmAEX
WBUWQ5Bv7wkhWx5iwB1He+l85IUROXVVhsQ+/80xfIecZpD2UdqAyLfwf3bz
yG9fc51I0mOAdvxFZ4mDqE6S+BaXDjLgXLWQvQnyyNY7HGd0GHCytNswCPnL
u+yrWoEB99a9kM5FflnHZo26FgO6z/YsNiN323ZnVb4mAyY9ttXNIL8Z3cjJ
p8GA1tz0i2K66Pe2TCwFqzEgq+CQtCHyeh3e/wb3MSBZTrXpHHKFXVKfDu9l
AP9DB7sM5GfHdBtLVRlA7m4cqEfeWeLG3KpC9DuNILtJ5NO9txOilRnw2sen
aaPesufQ271nlBggyvNIWhv57GkJQ0dFBvy9ZxjqgdzGLFqsSZ4BtDql58nI
TzNXTe3ayYArK33/PEPOW1VQnSHLAHbulXKjyENqz0dzyDCg5zDbYT79Zd/x
y9ncR4oBHe72J/chf5tyif/jdgYMTIq4OSEP6m5q15FkgLCn7qlo5J5/DRMY
4gwo9/poXoJccy+bgeA2Bmy72re7F/nLirmFsC3E+arY8HAYLLtKhRL9qygD
EjcYtMkjH3ctsDm6mfgupTjeGnn+zwCWyk0M8ApNPxCG3Dk6Jn+HMDHnC3MM
kpF7HZ/Wv7WROF/uX8EtyI/HFQ/PCzBg0ztv9nnkvIebL5/iJ/6v/fK7us1w
2emV2gJv1hNzCAv3tBHyh1ybKXvWEf06QMnWD/mQicPeHD4GzH34rygduelD
nuc8axhwn270pw65mdV2Y/9VDMj209YcR55q9ehd70oGeBR0+24wWnb+lidm
+jxEfX4WSlNHLtCv8baQi+gLkf8enkK+M/uAoTAncV+2JtXGINfcXl91bQUx
n8h3PC9BHhrVumuCjcgf2ZcVPci9PnnkWrESc0vS+fvsh5a9f0/K6up/dFg9
9PGKHPI/+eaB0n/pEJa6ZH4U+T41ck/iEh2kJPsFLyK3Yb2rubhAJ84r6l0e
cj8uuUyXeTpcqpi92Ix8xtpp9s0sHeoKlTf/RJ4+p3Vk7286nHXSKBI2Xnb/
6eb7OTN02K0rtE8b+fBhzl8803SYfP2yxA35A+7fOv5TdCD5WErcQl4lnRXX
+x8dorOfRpYhT2aydepN0mHmLVtfH/IPqVLChRN0cPORl+E8jHK1b+1xoXE6
pE4dcJNHrhRed+fqVzpYvFDLsERufwnavn2hQ94xybqLyKVfxPNYjtKhZPO/
3jzk82bFmpXDdOi7+Hb8JfJoAcbZHUN0yB9KnfyB/AdHeGbCAB1Kq21HNpqg
OXyDWuPcZzqMh2xqOYDcQKFz0qmPDgZhfQWnkYvo2m541UuHRVXK1VjksdqN
Kio9dDjFddGwBLnXuh1H732kA6fdcfZu5GOZwWc5u+hw547RQxbTZb/xqi7S
5z2xz+KHraSQ7wznzuzqoIOs8+kJE+QCFJMC7XaiHirSgs4j7918u5LWSoft
sV9/pyMPqht5uaGFDv0adh61yNWDoT30LR3s5KdavyDvEqF9HHlNhytVBfJr
jqB54+aOT6av6OBqdueSCvK9GRWfyl7SwUynoPY48l2yZ3q2NtGh6Ofv+SvI
g1bvfn+zgQ6S1ed3kJEnbtr29mc9HYJXyBm8Qe6xXfW53XPifMVE7aeRG7P4
P66vpUObm+lpYbNl/3yx74F8DR0sNeuctZDvPnMx8XYVHQp/XbQ8jbwkweTi
v2d0SPl2WS0GuUKtrbPbUzoM+b/lL0b+/kWOfmsFHahj3kPvkWu5ykirlRO/
K/skaQm5k/tvzvuldKieoDqIm6M6TOEd4n1M5MMOEx5D5Hl0r2fnS+jwPcuE
6o38vq9o8qdiOujQCjSTkUs+2HZGv4gO6un+DeXIN3Bc2ldYQAfFmuyDfcjr
zXZzCTHp8MBrz2N2C3RfdAzbr9DpYP6fmogM8vLU6syvVDpsvlMUYIr8Aeu9
UxYUwh+m1/sjz9MclnpKIuo8bonrLnKef2lfJfLpwBb4UasKefp8FSX2Ph04
ylS8hpCHfD52+lcuUQ8Z6+K4j6Kcd/Le4phDB2dv/zx55L3yf943ZNFhKcCB
YYH82c9VsYr3iDr800YLQs6wyzmQlkEH4cMf7mUiH13/dJIlnVgnxft6LXK+
2pOZ7ml08LC56zSKfN/qVIO223S4nO2gzGuJ6jDT7odaKh1y6itnFZFPbii/
fT+ZDk4rK4stkT/lL1BblUSH6yWOJy8gXwnavedvEethI7FnIV+tGnDxUzwd
WPfezqhD7ppoIqQfR4dPScrSX5BLTL15WBBDB3Gry1Req2V/Pjl/aGM0HRKe
hW5RQq4i0dkfFkUHQa5d0ZbIO7afOj8WSbz/XNbXYOS+sWQO8+t00NjfpHkP
ueF4fkpFOB0q04oja5HzdTptE79Ghy2vHOpHkA9399GjrxD3d2XLbx7rZXeM
3aoyfZkOVxN4xRSQhwfJPrG7RAeW5A1qFsjfSbMcqL9IB/vD44cCkSvK5Vfv
DKGD9c9Us3TkK7hFtVKDifv+RNC4Cvl2A89nfwLpsLPHV20Q+aezyXtdA+gQ
f4Msxmmz7BPsd4ve+tMhfbpyVgZ51M0wqb1+dBCyKHthgtz+6qHMbF/ifDtv
R51DHuv5Zw23Dx2imCcgFXlxQ0aYrzcd+FYJfC9H3ssnM9nlSYddW5/E9yJP
raMc1/Yg9l/IYjuL7bL32Yq9oLrRoUKiv0gCuZJxnPz6M3Q4cfbMLgPkYWvn
k0NOE+e1fZzkgXyP2Om5wVN0yPY/uy4eucZYx3FjZzo8jZjxLUY+3W/8tOQk
HSKuXXnRgVz1whvhzSfooHtbgG8Oud1Wh8AIBzpcGCs1ETmG7p3u35YJOzp0
5Zy5egC5iPkjGavjdDAZlaU5IX9XfO1KpS3Rx/vYmyKQZ73z6txuQ+Rn0a9u
MnLT9YHS8VZ0yLrMPtSMXKI/98Lvo8T84K3U/x35wL3pJkcL4n7lhrWtPb7s
LwvOCjaa0eGi2kzFbuSZ5wWdFY8QOWaXeNsaecaRSfodEyJPJI+7XUB+I2t+
+p8xHZiPzRUzkedVqau5HSLyU+HieBVyJm/55RZDOnTQP2YOIJ/8fK52nwGR
S4d9D66wW3aZFC+2XD06SMvrfN6BnBxG1+bRpYOLu4WvEXKVuV1h53ToEL75
wW9P5KIW7E8/AjF/nlTzi0eu2i/+S1uLDoZmQkNFyFunk+VpmnTwZNc2akf+
pveYy3oNOngllT34hTzqa9DdEDWiv/CH/dpoj+Yr16nXg/voEJCTrq6G3Cbn
5d9De+nQaLw6yB5542d2xRJVIm/lusmXkRd633cQUaHD6NEVb3OQr02kR4cr
08G2K/5rHXLfhC2l40rEPrwKXRhG3sdg6z+qSAdjrVYWLodl/ylny/1Mng5v
dBOWpJG/NpFQlNxJh5MTFd8PId9occYyVpYOd/UsO7yQcwRJBc9I00HvhFNR
PHLredd0eyk6eBsMXy1CbsEv87R+O5GrvP2GbcjfsJ7r3ilJh5AyG44Z5FIL
2nMp4kSO2ZiWCTgu+2GVbP4/W+lA+93guBd5yUiM4uktdOjJql+0Re6sw2v0
RpQOmccOxYcgHw/d6qS6mQ63Fe0EM5H7NrwNureJDgXSC8mVyLNMheM4hOnA
dViW6zP+7kH2XO+NRP7nTPqwnFj2i20JJZ0CdFCWPfR2G3LLHXX1mvx0CPxP
S/wgcmn3ex356+nwebrN0wV5wHPJodXr6FCjxkm/jtzQ3u5HAB8dyA29n0nI
4Zju0qfVdHC8e2xlE/L4vkFO/VV0+K8kTPYr8l9r1NYWrCTuo6AFrDy57K94
TYQEeejwq6bdWA75/IzYlstcxBxbzGVyGPni2EPJUQ46vB39cdAb+dCKVTKm
K+hwyyFJKR65pYv8zlI2Oviu/299IfKb2zYpiLES/2dZV46/Q25u1akQ+Y8G
BZKj5T+Qr9/orDD5hwbqQZGh65yWvSH0+U7rJRro//yuqoycJWNJpmqBBlfj
t4xYIB+LWLtjxzwN+g+KRfsj1z7Mti1+lgYpPN8lU5A7sXZu+v2LBmvfxz9+
hFy9JGaD4wwNOLI5NTqR2/rI8Db8pMGpYzblv5B/0i5mVZiiwfH5cFlB52WP
VN0xm/of4X4JSXuQ04/GjP/5ToP1ZaE/rJFrPRjqOz1BA/8KU90g5G/llVvf
fKMBw4M7/g7yq78u1Kl+pYHCU8abMuRi/yof3vtCA2r6AfYu5JwmrHkcozTg
m6tRmEO+t1//lvcwDRJr95gJnUL3tDzxUucgDfKG887sQx7WPuyuOUCDWRPu
AFvkFIWDVvmfaRD+1T04GLnmi0Kt1X00uJzXfC4N+dFEeZmAXho4npJ3Kkee
E1O97lM3DT4JpOp3IQ+iu83rfqTBr7wV4nPI343K9TM+0GD45+XpjS7LfkB5
VQP/expIf+d8uhf54pVV9NAOon6Cs4NtkA/UKyYMt9HgZ4jxziDkHpPBfodb
aVD7cfX728gfT3yzfPSOBucvfA0oRR7OjNqz+S0N3msO8L5Hvk/UamPEaxrM
8Mzd+YW8b8fR2fFmGojVKG0SOL3s4o+uvz/6kgZftOOTVJBbM/979LSRBpK+
G1gtkfvNJydJNNDgh+zz0/7IN1wO8ImppwHZPKcmCXnoljvG03U0+FrHXPcQ
eVrN4g67Whqk20/atiKf1SGxPq+mweCiy+0fyNsj7/bIVtFA/hJ/M5/rsq/y
7HqU9IwGcs/+TSsgl3tzOm7hCQ1akmX4TZGfuql72rmCBpZ9KbLeyONCgjSa
y2igGqC7Nxa5UgjrBuVSGqjsUlejIw85OTJ29xENbL5d3N2MXG/FjirWEhqM
B/FIfEUuqN6Q5F5Mg7CiUW7uM2gO+djk2lpI7I+74MgO5HuLldT2F9BA90JG
mR7yiRSW1bkMGkw9DL7igtzPUv0zN50Gt78VaYUjp1cNFflSiXOf1v+Vi1wq
d+lqF5kGT7M0c2uQ72iKsgASUedVdw5+Rp7yN1qc8oD4vZK2vX+Q863h/Ml3
nwbC2Vc9N7st+2DVUk1QLlG3fwWn1JBzd51L+JxNg7m1It7HkMtvcXMwyCLu
74Nbn4OQF9gOyhZm0kAiMsTwNvK7BkOzghk0MLnWQ36En2d611++S+SSS+mf
NuQnjCNujd6hgezc6kNTyN99lrE3vU0DXq6RWD73Zf8g7SRVmkKDd8cPNMgj
Zx3a+VM0mQbwbPNvY+SxLxOeXU+kge/0tc0eyD1vx0Z+T6BBRaP//ijkemw7
zKziaVD5b+owCXlwvaNwZSwNTjux2NQj35i8f1AyhjiX4lybQeTfxCtosTdp
8PhxlymLB5pPpPr9Zm7QIEOJoiGG/LNFsZp9JJG3I+u3aSDfbq3IVh9Bgy13
RJaOIf/Sb/9SLpwGRZwv3gQhD8/VuJV8lQYav9bdTkXOp9dqvRhGg2lxDqsS
5HZBoqKnLtPA9Ejuylbk/w1KDDWH0mDd/q+lk/g9u75QlC/SwDDr87FVnste
weNxNv0CDQ5p3JiWQZ6/oXA3WzANyt8Nhhsg158pn3MPpEEo/6+Vp5G/ORJd
2XqeBs0vaqKuId/+cvu1/f40EM8y/JONfJY1Xj/3HLF+mwS3SuSU9BcreXxp
4ES709yN3E753VvfszR4csRFYg75lCszqcuLBuz/Zv0EvJZ9ZaezNXjSYJeP
VYUy8hVCP4Up7kS/sw77fQT5n5cOn/jcaBDhESzrjbwlnJIT5EqDVScPWkUj
F/3UceqzC3Fe44OBZOTaXiM7DE7R4Fr1sYR65Mcber8WONEgLYGWNYDcKKyS
IXiSWM/qrgd/kRfLRPtcdiTmn2/DuSLey/7bWk951J4GHh/aU/chhztTMyZ2
NPgvnHzFCnnwhcSyx8eIeSbb2dkPuUmMVIioLZH/XVzqCciVj5VqXLemwf7e
uysZyO3Pwr8JS6L+bUVam5A3WjbVWh4l7t18fPwIctVUs4hn5jSw9pzVYTuL
cqmsR1/SjFi/rc2kGPJF8OKJNaXBYc/iW+rIH5ateD19mOhrJtyytvg92eR4
O2Ma6FAcn5xHvjbExvy5EZF7EmXaicjrXwryyxnSoMuVv4aJ/OKasfdJ+jSQ
Er6g2oxcufHN3QVdYr7q/5I7ipxxrtne+SANbjqf4mD3WfYL0f1bmrWJ/nhw
8sQW5D9i1w/tAhoES8cUqyNXmXYm3T1Ag4ESjQUb5Kp7OtxZNYl8i+JQO4+c
/sZN3l2dBn8Nx3xvIRdRkphq2U+DxdQvWQzkH9o4Hu/bR4Mjaznrm5D/kdlw
IWcPkXs2+v3DeP0UE01uVWLO4aVPs/ii+1JTxuq7m6j/V3v+bkYuOXC04cMu
Yt7ePfFvH3LFi5IxWkrE8wNv5iyRGy3JmZEVaHD3XN+YL/LTrV4CfPLE/lzZ
2hKL3MD1a3egHA0aKLcLKMjDtz/I6ZOhwWTEwYh65KHB2a760jRgFsiY9yM/
0/hpZ8EO4v9CtbHAEvJDF5ymBbbTINCU0bLxHNqf6Z1PLknQIH7GJHw38p2Z
OldHttHgmOFu+SPIj3Y+MDTZSgOZfse3Hsifs1qvfSxG9AXzdtdI5DnXbLs2
ixLnuyv5dy7ygbKCnAgRGjziz71Uid/PYuc+IUzc0/h/i13I71ScULYUosGa
XcXnZpBLQPXiU0EiNxLK+/j8ll33v4svJASIvFUXOiiHfPO2tISYDcQ886It
Sx/5fQXB49PraLCv8tuUE3Kaz5yk3Vpifihx1riE/IOa9o+6NUS/UNW8nIaf
H/n5VHY1Dba3h5aVIA+p54tK4iXmNCHJsbfIA2XTLRd4aPAhWXXtN+QU95Rt
ztw0EGgpUeTwX/bpNpb/XnLSQPRYrv5W5OtLB57t4qDBswoWK3XkmU77Y+6y
02BDaMdxa+QrJFYeZ2Uj8llmi+055Lf1rWXcWWjAbzx0OBb5xY1b51v+UuG+
m8R+MvKyz+4v9/2hQjnP4OY65LJjquk5i1QQfrxtrhd5SnCkJ/cCFT7/GG6e
RR7/wUHTd44KIToKqevPL3vyoSq+rt9UKFBgsZFHviBAG9T6RYWU/Q5rDZHP
hUqUkqepkDFqUOuMPK92ZzTfTypElte5X0I+LtnkGPSDCt67WnjSkFNGZ3d/
nqRCVZtf7kPkcXpVPAbfqXBAlKn0BrlimGh/wTgVOBKvln1BztGysUzwGxWu
M3+qsgUsu6t/YfzlMSpcm2JjbEYec3/UdXSUCht7HgnvRX7rbrWW6QgVyr6s
DDNHfj5OQ7h0iAqyKVy9nsiFS09Miw5S4ZY9UykSuZ6R3Nvr/VRwfPY3NAd5
7sVc6vc+Kjgp/K15gvzplfrrVp+o8GxnwVIHco6Y286VPVQYV1qn9B/yrlfC
sL2b2LcSGTuewGX38zcTi+uiwkn5hUsSyH8XafyZeU8FM4HraZrIfR7299p3
UsF98DXNBvm7Bwcq69up8HFlx6NzyL+X2GbtbKOCzIp7pTHIY1fuupLSQoX9
B2WL8pEfbXvpvPSWCtoal3OrkXfs3q7v8oYKbc4Z0R+R37TWk339igqdMhGe
08g7T+7kU2mmQhy7uu7qoGXnCu6dyWiiQrJTHb8Ucusamx72Rip0P9r8CZCP
2ufUeb6gQqH34XvHkT/3Kae1P6dC6eJRq/PIvwjnJavXUeG/N6oc8cj3XDxx
6X4NFR5azDDIyMMf/jzDW028fzbxcC3ymE8OR/0rqfBTZt1wN/J5oftaPU+p
MGB13n8G+Zkr9TsPPiH280vlwupgNK8q1G+il1OB3+jHBSnkhzQe8Gwoo8LI
yOopQJ5W5zof8pgKF6SETx7H3rX622AJFeYC+Rv9kcenZPQcekiFYQ22HXHI
6bzr3z4sosKmgeFQEvINFv61mwqJc2yuelWN/GNI7eNrTCrknExa/xH5irS/
tG90KvhyO5v/RB79ZGeuBY04XymlKN4LqH5+mqQ9oRA5I/6vVBK5uqnLLXEy
FdIdWj9pIl/be+5mdD4VRtWpS9bIUyjB4T/vU2Hv1psbfJFfqg65fDyPWKeX
v/hN5P5yISF1OcS9vuYhk4dc4HdwkGw2FdrrfKWfIp+RuhCQdI8KiXFRWzqQ
320KPb+QQQVTnUdrviO/2nf9vHM6Fb5r/f7FEbLsW31uBzSnUYE6bNYphnzg
clGQ8h0qiMU3MPYi377ufUh6KhV07x4LNUOuK80TxpZChbPOq3TdkSe8MI7w
SCJyQG+A/Rpy06/Z0W23qDCb2f00HXltEleSWgIVWp8veJYgl6iJSM+LowJl
gy7/a+Sks8IPVsZS4cFI+aNh5MHpjQV+0VQ4nGRn8gd5zYHEJ91RRD6fU+gT
uIjmGavgRp0bVIju3n1GAfnursudtOtE/kueHdNHnlRFGl4fQYWp+5+dTiBv
/Tc1E3KNCvTC6PYg5P8SnTmHrhD3OuOc5i3k0h4LQsZhRO49u51NQW4T+nRn
ySUqDJ1emq9BnviUrC0SStTb1weHPyLvFq61CQ8h7ktG0p0p5KpRPD7jwUTf
edXYzROK5qLf124cDaJCR7O+oDhyCUvF3KcBRD18W3dIDfnj+LXPJM5TwThE
LtAC+bFk6a4YPyq0NKWmeyBfZXrh17QvFYokj5ZdQ/6OuoLf3ocKtT2nX6cj
z7v1ene9N5E/6i0fHyK/Md5mudOLeE9Cyudm5FfzhINSPIj63P740yDy1My8
9CU3KvTqq3QsIH9d7VPtcoYKeVr8z9dfWnalqWsjr09TIeaYDU0WeSt/3ypV
Fyqs6/t3Uwd59epw1XvOVFgvuNb5OPJ1Vf4nOJyo8NooWtkP+QDnw2jvE1To
q/FdvInctEmrrNOBCkZ1L57lIr80IDaiaU8Fn5SYwArkaUrm/KTjVBC8VC/d
ivxdUpfummNUOFXr1z6G3Ha4NDDQhgr9+WmBLJeX3ZdlktpnRYWgs/vWCyF3
qA3r07ekQoCjJUkRuQfLWf5CC+JelE8qGyCfSH1ivNGcCs1VPOWOyLWOnYkI
O0LUz0OyaiDypq2BVV9MqPCvo5keh/x37dj8kcNU4HIN2JSP37Oudk/5IWKu
yKdefYZcapAlYKsRFXjb3Afake/noj2KMiDyR7Z8/zjyVRZVv37oUcF84nY0
W9iyaydr7TumS4VBS+4OYeSR6YqhtTpEveWsEdyFPHXPrVoZbaLP8jLMDJEr
q57iTtIicr51MPwEcsVTNLMFTSpw7nxcGIjcK/ZMurMGFTSst3fEIe+4mDnS
rEbMbzdVpx4gP7V4SHn3firY/P3C+Qz51o7zVzL2UiHw+wGBduQSb0Va2PcQ
c2+8xuZvyBOLtLd5qVDBWmhIhPXKsmdrj/l3KBO/q1aFXwh5ov66Jo1dVDhe
s5tDEXlVeJVoviIVco0GJ/WQ33w2dX61AhV2Jem02iN3L2G8CdhJBdG31gx/
5KMyU1J9ssQcorTtSjTyu/014foyxHe/3z+ci3znHdGBAikqvFUdWFeO3GEV
D2zcQYWv6j3v3iJf/BOREyZJhUqllMgR5N+kk9nGxKlQp7tmzxLyrUaqrmbb
qNBFNu5bf3XZqcLer8q3UEHvpmmYDPI8Sw3lbWJUeLRRWBiQQ8mD9JubqaB2
lUm3Rt78nbzi5yaiDqdX7/VGnvXUwPe4MBV60jWehiNXar/+qW4jFbY9UN+X
jpzn26nDcoJEbqutLihC/urR0LNkfiqsji7Z3Ihc9gun4tJ6IrefKUV8Qj67
+12eyzoiBxYjh6eRbzQ5IPSGj8gN33LNldeWPWrIKkF1DRW09BoTtiI/Sd7I
nbWK2Iecx917kL8zuH6Nk5cKTbTrYibIN/vn/D3LQ9Rn9H67U8hp7z1CP3BR
4c/p9lsXkM+IjS5qcRL7ecqqOgF54uyGS5QVxFxBrh3NR76L9/e/tezE/lhv
4nqGPJs9PuICKxVepDptbUNed/PTysF/FLh5467yGPJ7eqNJh/5SYMq0XvMv
ctM+6uaSJQrsXTOszR+O8n9BhiKySIF/owsHZJFrHnBTjZingO3CSlVAbnTE
tX5ilgIVboKS1sgbW7ZbWf2mAIfFllVeyM+cpnypnKFAZKfU96vI5wv+u7hj
mgIz65Qb7yD3NP2zLmGKAr7bIZ2JvHmojTr7HwWuy1u6Pkeuvcbv4MlJCsga
+Mp9RC7q1dvXNEGB6vjbXyeRv07fELprnALrt77MWRGB5vA9wiLpXylwTHCl
+SbkP3smn7KNUWBPrN2CIvJRyduOnqMUKM+oztRDnk9fy94xTOyb4759dsh1
eE5SNYYosDTR+NoXv7/zunn+AAWmT/gej0S+mhq+uLqfeP7t7oEM5KuE7ciB
fRQ4YM7vVIw84elqq8+9FDD9s6G7Abnt9nsrDHsooPBV5XAv8sPfVpYWfaSA
seyFsinkgfds3YW7KHClc1CE6/qyc7TeELv2ngIb/vlf2Iz8iGB657cOYh+e
KLTsQv7mz634o+0USBAR2GqAfOvGs0bPWimwQ0XG3R4535Qy5/YWCgQJetPP
Ib8hPFAf95YCE+2Do5HIM0VDrv9+TezzpViRTOQxN/8ZnHhFAVYJL6Ni5KVj
fquaXlLgdke4bwNy6ovONqUm4nxzO2/1IBemyWTcbaCA951TtB/Ih8R8T7O9
IJ5/oVjJEYnOi0Hb5fmcAgt7NV5uQt7Y1f2vvZYCt5ai3yoi95Bja9GoIc5x
i9gbXeQhMuJ5+VXEftJn648hJ9loBK6ppIA4U7j0LPKm/RaHg55SYJVCZE44
8iGL05L9FcR+7tOKSEMuuz3or2E5BTo79Z2YyGd33ewuLqUAO1/23jrkHfOZ
5ZseU8BswojrA/KgpZK08BIKhAQYtYwjf17+LmSimAKFxdlJLDfQOhlTjlZF
FIgjm5oKIK+3EtGrKqDAFgdbdlnkEkqm8lJMCgx/qCo+gPxKWczGW3QKvNwc
cewo8geunezzVArIKdEWziCPKtv504lCgS6B3amhyC0lkgebSRTga90qk4jc
SXxl5+58CoS5BJTmI9+7M/ll5n0KGLQpaz5BnlCmWMORR4F5EbvKt8iPqg2U
n80h6k3nx54h5Fky1JIPWRRI1J+hziKvnI8qgnsUeCvlLrgqCs1jYtcKqRkU
uD9iFroVeT7P7aL16RT4cJnZo4KcXaGh5GIaBfKmrqgYIXda2lAxfJs4F/U3
kQ7IeUau1JikUmDT8ZS2c8iDbdY0lyZTwM+oa2Mk8pN1lZ1bkihQxpFhnY6c
knxrKOoWBRyi++ILkHvui5qeiqeAYduDmjrkC5tJHHZxFGj58N/4e+Q9jHHh
+hgK1KTUrh1H/tLiuJJ8NAUs2TYr/kNeGjxteDuKuEfCrAYbbqJ+caP81L9I
CuS0+tlKIXcZo11xu06BtRL+p9SRb2J7nd0aToG0FSvcjiCvUBetVbtGgVIv
KddTyA0Xs4fvXyH6hflnhyDkK0hWK1eHUWCULH8kBvmpHC3lwEtEbpzmV8tG
zm96wv7zRQqkXEoVK0H+b11plGEIBWqHHy41INc31SsrDqbAj7izHd3IdV3W
jG0KokCzZ3P+JPKER+tFIgIo4Onb5MsWvexzWUfNvvtTwDXOQ1UQefS1thvW
fsR3Sx5Oy2CvvFVb7UuB3+15dE3kF5kJf6R9KPDrk4aDOXKRwhb1JG8KSNRe
4z6N3EXMKnTRkwJ2XoHMYORx1mLVLh4UGH8jfDgWOc9D+RVv3Shwt/3scDby
qOgI471nKJDtERRYgnxhn2RqzmkKFISpsjXi9QusGeBxocC3v7Qb3cjzgg4q
+jsT+9n+kXMS+cTjF2G9JynQ9vV5GGvMspvtuN2md4ICQnKeP/mRz4iWShU6
EPPG1VZHaeQwtSNMyJ4Cmh/m6tWRf5z+2nX1OAUu8Q9JHkFODmZRHbelwMC2
pMvOyFtaPZMtbSig84WrLQB5pZn8TKUVsX5j/S03kW/U17eRsqRA8Z4jrpnI
m1nLn92yoEB9nCS5EDlre7jkghkFPu1pGqhDvpObHn/qCAVkNmoIvkf+Z1Jh
8bUJBUw2XNP9ivxMx1qPPYcpcJov02sJed4Ki57sQxRY8V9MPF8s6kevpk15
jCigmnqUJo78md9svZ8BBUKHZ6pVkdvrOWr26hH9q+rcO0Pk5rEy5Xq6FHjM
8brLDrnUreOqhToU4Ern6D2LvDjt5yMhbQoo22/9eBX5iu8/91zTIubDnWIt
Kcgvtds/Hdck5uQxlloy8qrEXTpWGhRoPNdMf4Lf7+X3qkqNQvytCr31BvkN
ylYb6f3EHHtC2Kcf+eMozZHEvRQIDsszmEa+cKQ5YFGVAjAgvIkzDu0DNHGf
VqEAr9PVUSHkMhn7st4qU+BqdzdDDvlczuY9+3ZRoE5a2vsAckpiQEuuIgU8
dnhKmSM/ydD15lWgQDwzv+cU8iTFmFUBOylQeefjzUDk87aHCvpkibmrilv5
JvL00+EWhjIU+Dyn0pGBvD5x73yxFAWstp70LUC+VtgtT2QHBXp5Yzlrkbvs
ETS9LkkBt6Qnt9uR/5A4uDQpTnj0962jyBVFfjBst1Gg4eWO/DnkY5ZiJ+u2
EPm83U2CNx49z/NOYKcYBaj+JRmiyE/5sL9N3Uzk542Va5SQK1c9i/q3iQJs
qj4hOshT5Zb03IWJfT4y1G+JvGOijqN9I3G+NDftM8gj9qxv0hCkgM9G1swL
yKM0xmNJ/BQ461bwIwb5OuUjlms3EP33rJ9WFvJsIy2xkHUU4F40jSpCzvr4
2bchPgpkfdJ7VYfcJr+pwmQN8b9g1Ja7E/kaY5eYslUU+D50U+sL8uHOWye2
8VIgNr/bdx75l/NH9sTwUGD//OFM3oRlD7TO5fvFReQzY7BWFLk25ca4IycF
RmLvDSgiN7zD3ty0ggJFrmGL2sj7jgjSldmJPsIZzWeJnPKnJj6TlaiTPdWi
rsjTX60I4GQh5vDnW3cEI/87NOjg+5cMG4OLpKOR+/jaG3UvkcFE1Hd7JvKe
u357dRfJsOuS0+YC5BFRO6QL5snQdTJydQ1yFpcLIkJzZHh/q3+uFfm+o17r
rv0mg0bnub4h5O6hLCsnZsiQ/ku96hfy7Rx7OaynyfCnHNK4bi27xfp17DVT
ZJgeueoljFy+KYFd9gcZbuiwqsshNzj0iDNlkgx6KTXsmshvPA1b9XeCDKo5
tQ2myOUOTPO7jZOhX5Yz4iTyxmm+rW1fyXBkLkHdD7nun/fyGmNk4H598ns4
8pEQowOkUTLwu4fcTUWuE+tmvnaEDHOJfVpk5MZmqmdChsjwlDuhvxy54UhR
2PAAGYbi4y42I//o1ptu2k+GwJGetb3If8+Wl5f3kWHh9cWc78h/Fhh8FP9E
PM/hI/sPeRD15lJsDxnOmZYVrE1EcwLbFfHZj2T46WotL478RoecsVMXGa6u
NiXtRr5jf3zgq/dkkGLJEdZDHmJEeaDaSQbvJZMb1sj/E73Ymd1OBsfqY/+d
QW78lotnZRsZrnO8ML+A/OG5I1rnW8jwX3RiQTTyXLGjwX1vySDLW8uRifzn
tw2PDN+QQV/byoaJvGc86efDV2Ro/3LkfhXySdXW3aLNZBgpf/j1HXLhT++C
bjSRYc3ZMNkB5NSZhKqpBjK41pSd/olcP2E9t/0LMkS6OWSwJy37bJWtZcNz
MkSJ+b3iR7419dR9pTqiftJnf21HHi6u8iu9hgw7kv7btBe5dtArI45qMkRU
2qkZIv+YJ5vrU0n83jZNy2PIZR9ZLH58SoYNkXfcPJD7Veja6j4h6jPeI+gi
cpMa1vKCcqI+s8qvxCKv6IzeJFxGhu9e4RH3kG/gHAgLf0wGMv31tQLkQg4c
Y99LiPNdc/tiNfKxkTkL24dkaDYYONuCnJX+rKauiAwyK4vsB5Drlprvki8k
coNrhd5P5DNrKx7cYZLB6EefFHvysj96Pr2JjUEG4UAdDn7kMe/ZUrxoZJg3
VPokiXzQ7AvfBwoZngjRClWRR+zPi9cmk6E4pThUH3nObZW1jHwylHsa6tog
b/LOThF8QAaFw76cbsinng+JXM0jw+yQ7PNg5P732EjjOWS40H8h5Cby1X+X
lK2zyZA36bgzHfnAWHtdzT0yDD7p6aIhDzgZZSWXSeTz1FTYU+SPXUXGU9PJ
wKt5f9tr5D+X4sJZ7hL33Wiqshfvg8SAmOcdMozXfLL8jjy3R6CyM5WoNxOP
0T/IH0rIO0IKGd6lpfmtSVn2fwtSbPQkIq+MPebFkL8/wUUVSCTDCb6BEEXk
/x15bXElgbhHMX9/ayF3bQr69y2O2Icz9d5myOterCy0iiXDQWOVzyfxew5G
OtVEk4H10xHjc8gPHhgXlLtJBqHnQg+vIg8tVHuXeoMMpvdvbUhCXpMYEM0S
SeyDeIVPHvKsvkxDzwgy1I4mNzxEzpdQzPP+GpE/yeJCz5EHZDx6A1fJsOK1
q0s78sxFUgo9jAylKs70IeQVpJuOgpfJoOgr+H0auVeyg9zVUGI/t16XWZGK
1lkmsTgeQoaWscKT/MhleT69sb5AhlD3tCRJ5LGh0fdrg4g8PwjVKsh3ccqH
7gwkQ4MQdVQXeevdFzZ3zpNBMKqD2wr5LVmrPWz+RL7tqt9+GvlfWu9G73Nk
0Hl0QTMAudBqh6UPPsS5FP4+ch25gc6HIZ2zZGCp0XBIRe6kfvgt04sMHNdN
Tucjp449eyrkSdRPhqzbY7zO/bKMcHcyfMnuPP0C+ZxoavbkGWJ+UDBz7ETO
CP+besyVDDHDGeYjyL/YnkmodyHOy/6J1i/k/DEtMYqnyHBaiSnNcRvdUy71
mHQnMqgsBawSQL6pghzHcZIMV44Jjksin47dmOzrSNzfgYR6FeQ13jEZPfZk
uKQwnKaLXEh/BVnfjlj/B343S+QrWMIfFx8jw91ACWUX5IsR3I2bbcmwLm/d
rD/yL5WpPTesiRyb6i8NRy6RLDf905Ko/6Wkc8nIL040r3Y8SuSqrYzUfeQ7
i8/LvTQnQ3RG/oeHyEcbZQ6rmBFzlx1PeB3yZsFxn2xTMoC8tUwbcs/witsr
TQjPj2seQN76M7UmwJgMmTbFrlPIzxtd/d5vRIZfH+r+sNxBfdAzVPSwIRmC
Kp4nrEWerh5lVqZPho/xjzdvRW5+Lz9SXI/oR9/uPlBEXuDXWR13kAydDn5S
WsjP3hNamtMmQ1oI5Jsir/nro+4CZIht5RBzRH4oqPfSuwNkkJx+nuiNXOqL
43M1TeK7PqEsl5B/kZ/jJamTob5TySMWebws1WadGhm8Hg++zUCe9tSPFLqP
6F+ZyQp05L+rrOa+7CHm5016N58gX7v+qMlRVTKsejbX9xL580TP/KrdZLi9
pkjxI3KXTTksssrEnJPtdXEMefWNKcdUJWKen1esm0Uu9PhkDYsiGT7TFtm5
0pZd5tKkpJc8GR5otoIg8h1PMmI/yBH5pvkweDvyCj33WR1ZIp9VcugqyDnm
bU4XSBN9h5H58SByMsPtvbAUGbYrUdmOIi/Zl3no+nYyqBk27nBGXn5+uvaH
BBmSL83pnUP+bK+Phr04kQO2B05eQa5tu/ZJ41Zi35zSAxKQ6zA+qO3eQoZ4
sTWRWchVeBqqskSJ9QtlJDKRc+n26q3cTAatDp20Z8gld4m0BGwi5uSPnOmv
kJ97EO4wIESGa4yx293ITc4JTh7eSIaE9q/xX5GnenRcLRcgw5Z23mtzyHOc
q4Qk+cmQqGjmy3UXrV+u82HCejK0eZUfE0TenCpstriWDCfX6B/YjpzdP/aH
Kx8ZDO4siKog35uskNK2mgzi0R/mdJDLNrCoH1hFBlH3vrfmyLf0sI9QVxJ9
5/HanJPIP+TsSxLgIcPElI+XD/L4kWydq1zEHH7vz+7LyFmD1H5PcJDBUO3p
71jk7uI8TNsVZFhrQHuUgfzyo1Vn6tnI0HjwtTcNefC8nqQSKzGHF4qLVyDn
rXw8nPGPBP+4C1sbkZ9ttqdw/SXBmbd+oe+RH51Q9/FfIkHcJR/xEeT/TRzd
/3mBBG+TSc+nkf9Ozec0nieBcLzwSbb0Zc8o2vWhdJYE38dezq5FnswxTxP/
TYLjWyuityDf4LB0NX6GBKxFY0IKyN9d1rBf+EkCgQ3H8zSQ/9v1ZL/rFAns
6tdIGSO30wzc1PYfCaQPcJOPIRc9c+6v5iQJXBYMxN2QswQwRqgTJLjh9y4t
ELn2TukWgXESZG7JWXkdeY75SOXVrySAkKdBychPUocLvn8hQd6CeH8ucv3Z
HfePjZIgXKjrYBHyu38Z6S+GSbDXuDevCvmOa0Gpu4ZIcJ9n15/XyNV1byTf
GyC+2/zBogc5nfNTCk8/CTayt93/ivxN9IW7AX0kaJTZ9mMW+cVEh9yBXhJc
LWnYy5mB9r/nJsOkhwTcAvUh/MgvSv17UvGRBA/rNlWIIxfZU/V6excJPJRe
/1RCPvCicSDxPQnorR+ltJDrpG5e+NNBgkhhPVsT5KrOlQIe7STIDuGLsEOu
9o2m8r6VBApn1OjuyK2+jVjrtJDgr1njmyDk67f4hBa8JYE3tWz8OvJrugb5
m96Q4OzAKo4U5FqCPq2Rr0gQ5d4knIfc7cgXlumXJHhfPC5ThPwBrWj3iSYS
cMkGq1Yh3zb4yv1VAwlOaPtovEZ+u3D//b0vSFDq2nagG7n264XP95+TIJj7
vsYY8q8/+LaurSMBJWVQ9Tfy3s4Lp0JrSNATnCS7InPZp5T308aqSKAu/mjT
euQ3q01nLCtJEP3HkHMr8jjlp9q1T0kgEmTxXR65r05YkvwTEnQvtL5TR66Y
nzF6t5wEejNNTCPkZmvXHeAsI4Hf2303bJAP7etP83tMglUz4vankYe388z2
lZDg6Luonf7ILVPibY0fkkCs2XPuCnJORZ/KsiISfDB5Ux2PvMOasV2ykATX
nhdcy0QeUaWfeItJgsfJ67RpyM8IabH8oZMgZ8fsQhnyY4K3/dxpJOAYPln0
Anm9++GxTgoJtHebObUjz3zu7KRDJoHuxYbVA8idOz5+KsgnQZr4i8eTyCUP
P3QQeUCCYwkmx5aQX+qe6L+RR4IDUk5zPPeWPUUh+sxMDgmSj7Amb0QuOhs9
dTKbBBreijLbkR8f/O/ym3skKBmeeKKMXCSrgk8tkwQrN6kbAvLKD2P3Sekk
+OYr0mqCfKfGZfUNd0mQcjjByg75YFDI+7A7JOjnS+t0Q/5lT9/5iVRi/aJ7
zQORt0vSBI+lEHX+3rspHPnrib6nL5JIMHZPUz0R+Y39l1yUE0nA20GmZiE3
fHx9bXYCCSY/MjcwkA/zzFfzxpNgns/8QgXy2v4PfsGxJJB/n9TdgLx1UFxm
JJoEErHn93YgTy/vHjS/SXw3cTZhAPmulSw5VTdIUHhQdHgSuXpY8km5SKLO
2b7sXkL+oypVMi2CBKZy1mE8Wcu+0ZdrYkU4CbpEvBoEkfPu/1p67ioJNHfJ
8kgiL61Wv94XRtRVU6LBLuSp1H/WxpdJYKL54OoB5GUZqjvLQ0lgNuFcZoy8
Uq1vxfaLxHkpvRuzRd4tu9CfeIEEsq7fBFyRv+eLrvkbRIKfo48P+CPniYu/
7xlIgrurd5+6gvyEHnd013kSMceeCo9Dbtsz66/nTwK2RwbZ6ci5pxycHp4j
QcToQCkZuYC0usUWXxK4Su5ufoT8ybZb+rFniXNp0PhYi7zhssOBeS8S+Eiw
DL9Ffu/z/f2unkR/T7n8rQf53uFT+9rdSeDmUzExhnzbziw1cCPBIu/Db7+Q
h1ofBaYrCYxq3IfZstE8wBZhtOk0CSwGBz7yIZ9/rWR94xSRM40irzYjP2R1
3HXGiQTUF0LlMsi99rGGOJ0k5pld3Tl7kHtu2JH41pEEOx2drh9E/v3aS7q6
AwlUcgtPmyHfKTHxkmJHgmqTBm0H5IsJ8eMCx0mwpowk7IG8zqV4bbgt0R8V
Lb4HIr+iYbX/hzXR33mbn4Ujf10cctrBisi9dL6oW8jfO4qnNh8lckxR8sg9
5C6fDjfttSBBlgjPehryjoaFvw/MiHtaWN1Silz00c7964+Q4D8No5jnyN9o
DgWGmRBzznqydgvyVUti5RPGJGi/0j3di/xuZP/SsUNEH3w/nPsV+bvz0nqN
hsR8cqrR+DfybIfZWyoGRJ4EhE+x5aD79cGkP1ePBDV2/6O6vsOxfN8GgEuU
mSIjZUtCZKVInVKoSGSPrCIkRUayKYSKkJJnP2ZWSsjISqIhkdUiURFZoeF3
v399z/ffz/Ec933d53WuR/QGH/K3wUrqfPuJ87smb9+EXObtjYTQfTnA1veu
TR55V1zs8Fcg+ioXr5Mm8n6JZbDeS+TPgU1Teshb1NlozbrE3vWGJ+wI8jrr
tFVqu3PAhu0juz3yOInSM2TtHLCWvHnFA3m4uE0/zy5iL/VX5z6PPHs06WCI
Vg58MqqIi0QezGtaM6pJvPebJEsycj1pspqlRg74086fv4W86WHY3Ua1HDCu
vveZidzd6fvW7ao5sPfi4NF7yJULxgqyVXJAUnmmsg5/l3ygCrdyDjhvXNjU
jtzMO+1hsFIO8CaOh77F712xX/+LQg50N3f2DiNPvHjp9bGtObBqbf72KeS1
HrYnG7bkQGK5f+wf5FyWj38ryxH5Nqf2hoOK5ntndfod2RxwEBuTEETe431Q
nUsmB7J80zykkHeUnn4TJJUD69V2FW5D/mrb5gsjEjnwMv/tt13IC3z9pY6J
58D5jefkDJDXs9o8f7yJ6DPtq46bIxf07wpV3pgDmn9vpRxHbmb8ReXOhhyo
m1Vs8EL+YEPKF04Rok/O1Y4HIt/s/oYSJETcO5itj0EuU1N6fGQ9sU+Kjmpd
Q97JlJM8JkD04eZI6yzkU3d3jDxelwMNERL+ucg/230qUl5L9PmrzVfKkZfs
3BJyZ00O8G0/R6pHPvOC4xAXLzE3c+SK25HPMS+LBXMTe6Dql6q3yDMPUGdH
OHMgdG1ZwzByN03bl8c4iLqIiW+ZRB72p7ioYVUOzDz1afmNvFiKfk2Fnahf
CdeG1bT/3FlxR0D2yhyofOJeJYCcQj51nJs1B6R+hxZJIN/IpnP4AksONC0x
sxWRS78v0hn9x4RO1uEELeR59xpULP8yQeKopp8+8n2rgrY0/WaCtATJyhS5
vOMLadUlJkwXimvZI9fUeSpFXmCCkVqlgAfyrzInZXl/MSF8wnvcD/mJ20yF
i3NMSBXRaQhHflrqisbXGSbI/pBLvYLcS0dgn/U0EwLytjtlIPf20jvWMsUE
zyhbeRpyye2Cp9QnmRB3jzZRhPwD77VI6gQTfp3nLalCTostucM3Tvx+Rdbp
FuSrBYNqwr4xgX7dWK4TufneLx++jzHhuJ3M4CA+T8zfVXajTDidIXl1DL/X
uVb16QgTNoce2D2LfMhKznnHZyZE77vxZRn5kc87UxlDRPwluZO56eje4+Za
+T8xweBwsYow8n91DiuiPjDh9WLYC2nkahy+eybfMcHU5aKnMvKij0oRjoNM
GKvIZdFGfrklo6m9nwk+KmxpB5CHqhdxa/cxwWw5RcYM+WzOWeu8t0y4a2de
4oB8KetTjlAPE3YFGGidQr7vKstS7BsmWEX7PvJHLrf4/OjMayZwPHihE4E8
3/pQoUsncV97T1ZeQR4gG8j56iUTzlpqqGYgf9dn5r3nBRNct+jmUJEP/Hz3
6m4HE06MRgoXIef/Iqq9sZ0JpU9YLlUi71DhzE1oI+5rvvZHE46zYb7wQisT
DHOqLF4iP5D7O9H9CRP2rJ6r6Ec+2sLC1t3MhD6jc4JfkL/eWBWh38SEK7dV
zv5ETpbcvFzWwAQvRdXWP8ivHz4QLfmYCVoKQaIcjP88RUCU81odEyxaWL0E
kO+cpN/4W8OEZwrdD8SRN1sMS51+RJw/fvLvVuTi1b3l/VVEH+A+tk8T+bu0
2IMHK5lg8pElBpDvtRsdeljBhHMaS/WHkStHrIiUe8CEV+qwaIV/H9wlmV7O
BGuuN8quyO9VObasvMeEzOEKZx/kfg8pPn6lTOj49vVqMHLhkTsbPhUTeX7o
TFUM8uEH5m2mRUzYrnzg41XkLXcaQ+sKmcBf77vyNnJrngn1bQVMOLxlUpqJ
/GPg6x9ZeUywvN68pxT5sSP+RVy5RB3J/LR6hNyU7ZXvBSYTWDkDvZ8gl+L6
qjlGZ8I7T4vQTuRNr+qWrWhMmPdJThhE3v/U7HkLhQlcutI3RpFXu9JIGmQm
hP0TuDWN3G1NmT89mwkOfW5Zf5Ff0gk35r/DBJtZ/tscTFS/tlxbo24z4WWA
dLoAcrO3lpxTmUxoirmRJI68VsZl4vhNJrzX94jcilyuSKn7eToT/AZIZzWQ
0z5VPt6dxoRQXx3HvchnlFeVFqYyIVt2j8Eh5ImsgnTRFCZISuQpWiJPahu5
lXCNCYvRIbzOyJ9MBactJDOh2b/iuxfyqs8vUj2SCF/v+CQA+Y11Y2k9V5jw
Jd43OxK5+nDz7QMJTKif/nE2EfmWlpOM+3FMuHp+EDKQF0u3l8lcZoL29l28
VOQV7nONqbFMMDdc1VOIfPD357crYpiwdmB/VgXys8a3p85GEXnFM+/QgNyv
UZD3YwQTin+LbuxAntpqvc00nAlH2u539yDf3uJsVhfKBIH05qRPyJ1lVS9s
u8iEy+GHYRz5iEkb484FJrxlHJqax3Eo2PqGO5gJn+Sa7qzIQeehmq++GMiE
rTIVB3iQB2ft3/PtPJHPD2W/CyHvXF4OtvVnQjfr2mQp5FWalx4+PceENKkL
ikrIxRhvFrXOEv1H1eXJDuTksh97c88woeVIm6Me8hvNXQlCPky4lnHv52Hk
f/fFvr3kTfQZWfFoK+SZqSxb5zyJuSzIy+eC/IXIwfATp5hQHROZ6Y38sfbx
t13uTOBLvCAeiBwcQUP/JBM0DBYpkci7Pk+m3XNjQv5LFslE5OWaPotSrky4
o5eSlY78eXmlS4ozE4YeFApQkDc3vn7O4sSEfwfM4guQT7Q80j3ryARx7pjF
+8jNJM+XfbBnwgbxfR71yEs0/sib2hF70c1rnW3IQ05aMOpsmOBy7fTON8j7
14fJKFszoVKsP+s98kJGYE62JdHH7Pp+jyGPDNTbxmtBzFl7b5sZfF/f3z0M
NWfC8M6Usr/I2U8aG4wfZcJnDuPVHLlo39NP7rU3JeL26Y4tP3KZUcqZdhMm
CPfF5m1C7lwax6FjzIRHbOyzcsin/unlFBwi+v8F8d2qyO3VXhmKHmSCvsnr
SB3kw/lqEwmGTKDdkGo8gDys2TNj8QATVFx4WY4if/sxQN9zPxN62zK07ZBb
OVrP9u5jws5PdedOIF+fuSbfSI8JN6svM8/g9/7IcqncS+xXpya7g5Gb1C+L
ye9hQvu/RdYY5Dfctd/f3M2E61dzlZKRF+kZ01brMEFVYdH8JnLjIk2voF1E
nx+eDKDi87P/0hzVYoJ9e1J6IXLf3Ovs1juYsHvmVdkD5OMTrH1PNJhQ4l37
rB75B40jpTvUmbDuwLGPbchT3vol5qgywffajeku5CtVz3kJbWdCjF3Eivf4
vrIOmlxWZkLFA2HeMeTtfn/U55WIPC91FJxG3sh3RdxdkQkRNuaif5BXd0zz
9GxlgnHt/MZVeaguVmotH5BnQu74YdG1yD/xWM89kCP6wKy5oCjy0H3HJjdv
ZsLkJx5eWeSTfxQn0mWI/b8xZIUy8vq0Tz/YpZnAQs+e1kK+zfX8bIAkkefX
Aj/qIdeo/fx3RJwJ3umr2g8jj/+rxm0lRszx+iP3LJHfCnHa9GQjE8o2HM1w
Qp6S6KW6Q5TYT0q4gzyRW8ZZHMoRYQIkRlv4I49rFvMQEib6VeUD5TDkUbee
xF0WZEII5LDHIbd1ML07L8CE9cqWfdeRD7lWvnHnZ8KDK035t5Hns7KueLuW
CXVO04EM5AvXlVQN+YjzVAxBMfJu150nH/Iy4U9G+upK5CzPN2dv4WGCGxdP
ewPyXzJzvTe5iDoSMUxsRz73KEeEg5MJHm2GRt34vsa0HYJXE/8jZPlYPyDP
/FdGH2Nnwo3tpMox5M5HeSZt2JiwYm7Oexr5edVDe9pYifoKFt70B3ntrHfK
rhVMcH+8so09H8Vn/NxY/jIDUrse+fEhNzztoC/6jwG2D2HDBuRrWhRpV/4w
gO/cjRpp5IIHP7L9XmJAFfsDByXkSwdDvL0XGcATkrOoiVxkw1L3wC8GnH19
6sZe5HGrnfcbzzPgD//frQeRS7jfraiZZUDI3hO15sjPX/qgtG2GAW72ZBMH
5IMPFnOyfzJg2LOk/yRyD8PfsmumGPDWJ/2EL/KxhM854T8Y8MLT/Hsw8omO
B0qT4wxY7Tx6Jhp5q5NvhdN3BgSYW04mIo9JWbf/1VcGVO/LPp2OfLL0TjeM
MUBR7fEXEvJMnnXeZV8Y8Eqq3jEPedv0GTbpEQa48md1liG/XlZBTR1mgAmb
5b5HyKsyxvatHGJA8a+JkmbkLyfZxvw/MuDYuLvoC+TiXDwpn98zoP7T46i3
yO+p/dO1fMeALW//jHxEblsx8KNlgAF+7RsNvyGnfGLQd/QzYGetOHMGeReL
nUNuLwOeFKxi+Yt8pfNvEZG3DNiY+sZ6VcF/vnwooS++mwFjZxPu8iG35mUj
LXYx4MZ+uX8iyI9Pe7t7vWaAGtddY2nkWw40qA28YsD1uo2ZisgvH2VbafyS
AduOB37UQC7gpPm25jlx/pGazXuQb35kUbKtgwEZplMehsh7il0TSc8Y8CFz
Xe5R5Ctjnbz52hjgVCM1bIvcKPawaWQrA9Y/kNrkhnz1opzWzxYG3AvjNz+N
3E1xWtq1mQGktXOxAcj1ThTxdzUyYMbj2f1w5AfHbVbtb2BAVNiNT3HIv3DP
/b1fz4Cnh8y4U5AbcEcvbq5jwPJTNrXbyO3UWBYzahiw9mexJR1/71PfP6sf
MSDr0dHAu8jVhDpXXqhiwLTk9xsPkOe5yPJ9e8gA8Q0RxXXItaY9xe0rGNCf
xfukFTl1DU214z4DblJu9r9C7vO3w0i3nAEXxMXH+5B/ZvvuVlzGAAce2tIQ
ckHvP9ESpQx47iy7ahz564AVOdeLGcDPn7NmDvk9r6WOFUUMkBaSX/8P+bpr
o7/8Chlw17VQaHXhf84n3yb3OZ8BAhPbhdYivx5CtrXMY4BvQRX/BuR72r2u
P8lhwNVrBjzSyOOPK7ZrMYl7vN7LqoicFvyJM59O9CXa2Xl15LGOycaiNKIe
q/hGdyP/cVTlRiKFAXGtFW8OIHfLaH33h8QAswb3+iPIlc9ZKZ3JZkD6Lclc
a+SOsoPhH7IYIKw/kuiMvHXapvvobaJvlD7w8US+WuK5SmMm0Ye7Uo39kId/
33lV/SYD/Elh8heRW96+M8VIZ8Aga9CKWOQhPgtWQmkM4JqOeJuE45Bj3BCX
yoBVjrcK0pEbxd1SWbzOgBSN5hAS8tKjH6he1xgg47nCKBf5kL64yGAyA75/
M+MvRV5CtUo1SWJAe35FXyXy4oL4tfVXGOCcvp3UgO+RfD91ewID/t557PQM
+eX6fhFaHAMKSzzEu5D7H/5NE7jMAIUauf4B5I+ihVQvxTLgZ+m/1M/IBxhK
TfPRDNgeOmU0gVzkp67tqSgGdHD//T2HPDLn0ExfBDHvTDbf/Yd8bOWxlMPh
DDBS9rJdfRftw4bW6rWhDEjI6li5FvlsqXWf8kUGfIsyKRRBrhxmEUO5wICR
5xOmUshTv5mo8gcT88W7+OdW5B927B+OCWSAquH162rISWStW3PniT3BOE1J
B7mUq/wxD38GME8+atFHHvNIaF3fOQawRaxyMEaeP8badegsAxajAyctkO+V
m8isOcMADgeeSEfktaXdrso+DPCafcrrjtytuWY7xZsBgjuKMs8g182msfJ7
MaCCq1oyCLl4UFxvzCkGlNlPMSOQM5K97825M2Azv5l8PPJdm0yve5wk5pfQ
u9zryNccV/Prc2NAvHm67C0ch6uCNoddGWBaFEKiIt85uqBX68yA3XxXBQuQ
f6EPqqg4MYDb+VXCPeRx/x5LUR0ZoBK373c18n2qOcICDgzo8h7xbELOGZi0
7pIdA97PVnW3I7+96jzfLxsG/OBo2PMGedgmx3We1kS/vfqbMYh81U9D4QFL
Buzy9uIYQW5RqyFlYsEA80trPCeQm1XLqNSbE3XROPZkDvl9SUE9VTMGrFi9
JPUP+T95Tmu6KQNe7tQPWVWEzsPNck7wCAMMdre8XIP8EMvS1ThjBryZi5QW
Rn5476/SxUPEPD0Y5CeBXJ1locf7IAMub8yv34I8IuQPy3tD4n5Nhbm2Iw8Z
YVM5akDsaa2NZjuR6wSvc2ncT8yvU3czAHmOp/RNDX0GHFjf3WuE/PSUVmeO
HhHPIl0RM+Sc+uZ8G4ABm4RGLWyRP715zixxDwPCt7++6oK8QTbj5t/dDNjx
frnFE3mvxONPvjoMuM9ybukc8vq6SZWhXcS8uyCnFIJ8fsfmaIudRD+Rl7KP
Rt5W69z7ZAcDRCZd4q4gPxZPU9ulyYA7RV9LU5GHtn+7XqjOAPb9VW9vI//9
aNeMmBoDZFM7f9OQW169Znt9OzG/gtTFCpH3B443saoQe3XXB51y5EX5R9UC
thH7Ruxb60fIa+xqGKOKDKj12niuCXlzrcpGOwViDrrdjWtHfnRVYXqHPNHf
jBOzuvBzPJTX793CAG/2qrsDyFUFqzPKNhNzx2vHo2HkuXpHxGRlGdBoy9b6
HfmIxPfcDGnie0tlXs0gjxq6voNTigG3DqX3/Eb+6dHetosSDHjMbte/shj1
k/e/nH6IEXtCrd8AN/KrF6uWnDcx4JDpxz4B5OUtsbe6RIk8TKd3b0Ru/MN2
t8EG4rtO176QQd4ht2u4UpjYZ0qUWxSRB1CkryoKMSBz50KlOnK7JCFd0nri
/8KwaIEOcqeNglNrBYi+lHgzUx/5jnDx3Jh1DKjh8I09jNxtRM11no/Y03bQ
fI4h144yl/Jcw4CFH6oW9sg/RIV9HuAh8plLYqcbcgPh+4VHuBmg6ea1wRu/
99x8YAMn8b2d6xf8kB+o32+gwUHkp7LEmxDkfdvJG3JXMcDH7EpRNHKlOfaf
G9iJcwpYx15BbqhzoSNpJfF/1uSyTSpyNrXFwuUVxO/fiCjcRs7HcfmaHwvx
vymab5GK/Mt3iaCRf3TYtM27JR95L3erq81fOuQWKl0rQ74q46J5+286FL+x
sKpC7lqpa7BniQ5Xwj+LNiAvofDuKVugw7GIwcGnyC+Fft8l+4sO7+/q3nmF
8+TC21035+hQP8hh24tct7lTl2uWDoaf9wh8RO5+pf9A2DQd4jI/PhtFnrPw
02xqig4mL35ETOLz6Ii4uk3SQc7OS+0XcvZIk8CeCTo4rrUY+of838+UqwfH
6fCv+e61VSW4rkcKar7RofNwgPYa5BZ8B9tVvhLPCS4eEkQexl8zSRulw1cx
23gx5EPTe0SEvtAhhC9QcTPyhYHO/Qmf6dAjsapDCTnH4vmAP0N0iJDi8tJA
vj1AvsD3Ex0qv0Sz70budHF8aOgDHaL1zpH0kdvsaJCwek8HysoejcPIy1/l
OLcN0iH1X9lTc+T957OZuwfocHPlKjs75GtMmD9K+uhQOvx6zAW5c0ydjkwv
HW77bgjwRF6p9zUpo4cO3UH9/84if1W2eYizmw7kDqHLwch3/fXXCeuiw7zu
S65I5FYmbzKnOumQmcWWHIe/t91gye0VHVY+eMhzDbkLpd3p7Qs6BNp+TchA
vnfOte3Qczr8sL7NRkJePM2jVddOh60R7aFM5NoNbXmqz+iQkx02fRe5fsIt
ceZTOjCiyk7eR77sF5op0koH6UWPnkfIg3P8hJJa6PChk7q/CXny4dDM5SY6
2Pc5lT5DPks837+RDm8HaRteI9+Z8Czvy2M6WOR7R/YhrzrLp2VXT4c07kef
PyIv8jjV9ryWDqKvUgzGkEukdzvp1dBBoWmKOYl8SsJ66X41HZ6W9rL+Qt6r
PJEpX0WH6hOHHP8hPzl2U+fOQzpcLjB4wF76ny/5WQ/xVdDhvMkLLl7knbOK
yTH36ZAsMuS4Hv/+huDuX/focKcnungjcvvA9ZNeZXRQMi/7I438XoN8zvsS
ov9YnjFSQJ6WZe5iXkyHloLqFFXknltTJZ/cJfrYxpu9O5H7Xx8d3lVI5Oc5
NjFA/mzOvLAonw7XAlc6GSJ3DH8TKJVHh5/TaaQjyGeOnDZIz6HD65KqAUvk
8kmiopxMOrQH+Ak5Ivez+/AzlE4HLd7HR04g3/S++vkUlQ7qe+ix3sgP6RQV
naAQ9fJqU6Uf8l/pFSm9JDpsTNr29QLy2XVvLxhn04F3Z49wFPKJ12vcH2fR
4VaW8P545G5/HK00btMhP2za5xrysrLmQ3mZdBhjeKRnIOcU0tffdJMOjW+D
qrORBxj37b2eTodTgzLvGMh7g+KALY0Oz4NP/y1EPl5tciA4lZg7fuYby5Hr
71Q6Mn6dDmeu9eyoxnHgl7F3vkb027RF0wbkB7zVTr9JpoO/QY37U+RHT9pF
GSXR4ZyXxMWXyF2ks27XXKHDQLNMcg9+TvPsw+0JdFjY8OzOO+TM0x59jDgi
T7YJFHxGzqI780/kMh32NC/f/468xCpTPjmWDk8o12unkY/0W1mtiKFDw+Un
TYvIi74pxwdE0cFoF62VpQzdV45k3dcIIk8uyratRn5iu9KCYzgdtvEdeboG
eV6u2Y7XoUTePpRoEUSutC0l2OAiHWJ23K7fhFzn07e66gt0mDWpeyiD/Pfw
cU6VYGIu1CcVKSD3spywpgfS4aXxKqoqclfLjALhADoMVyim7kSevtJuRZI/
Hdrq/kbuRZ4SsdOBxY8OsDnMxwB53Zjqo/NniXopKLA2Qe543ED86xk6lPPF
7bVAnrQccMnRhw5s6wU22yPf+/3xVKc3EYcgUw5X5Adhi7OBFzGXF3d/PYXc
Siy/q/oUHXzsBlt9kY9TDA6reNBhl40yIxC579flJ/STdFC5px4ehnyDYLeB
yAk6LMpNWMYiZ9335FmSK3HOAHvFROTiV7vMV7jQIcou4l8Kcm3hv+8DnIg6
Srd9mYl8eWmf7zdHoq8Of8smI5+2Yq50cqDDFlYNrxzkfkayd7rs6NBarKlR
hLxmvH6nkS0dnHOmfpcj/+Ic3FdjTdQ182RDNfLhBpNwVSs6XPJMj21AHqME
W3IsiO8qjjzwFMen1vSN6DE6uKjIs71Evi0l9NI1M2I/yU963I1csvmJNttR
Ogj2FocMIo/3U54NPkKHpMBrasPIwyvLyyaM6SABKmNfkS+VWfm7HqZDx+TV
rCnkL0OEd709SAdrKDH+hbxIeZ7V2IgOh8av//6Lz/N1+tVjA2IPKdLIY7v3
n6e28NI1DxD9ZG+WOTdyww8GFwr0iX3JrmVpHXI3M9IxiX104K4qp4ggH9mx
Xi0N6LBjvcd+CeQFBXnrOfcSe+/mjyObkXu12v8O06WDBlPikhLymtxtX6Z1
iLlsLCetjny9u3i3hzYdHN7M1uxC3rRJ+engTjq4zSZaAvJfIw71Zlp0+Hhi
/LsB8kcDBdVPNOlQ8E4o0gT5grBItY4GHZyEePgtkAfeZ9SWqtHhxJMOqh3y
vmdHWzar0mGEYavigpxxflPnbRWir54qr/ZArtm++hOfMrGnPe3XP4O8Y5R/
LlaJDmUXXz07jzx2WJd3SYEOHlrppheRW7+N3+q7lciTe1tfRyEXG5w5+HkL
He5Rr5rHI0/mijhjK0eHukfNr64i331R4eYLWTrkPegwTkd+x2C+SV+GmMv7
c59kIV+OHZqtlCL2VTHLPTTk6UcmtypL0sF0rqc8D7nPo01udHE6HI7ctqUE
ecCwF0VEjNgD/WwzHyC/8L7vU/JGOqyOsl9dg1ym2XPLSlE6VB3XON+I/F+h
6LlgETqk1H9+/xS5X9F43YQQHX5b+Ri+RN724cNaN0Fi7+p9UdSNfKvdrHuv
AB2k5jn5B5Fnqis0mPATcXCTOD+E/G90lETTWiJvu/jejOH4Oy1F7eQj8v/X
gOok8uz3aWNFvET/iYpNnkPOImJ2TIaHDo9luUZ/Iy+UUmnM5CLyNsVnD2v5
f/5pnYrmGk5izwkpucGBvOXf0bsxq4nvuv7qyxrkDv/StiyyE/t8TKeWIPJ4
ud85Z9iIvY69/PJG5DzJMQqfWelg3hrQJYU8yVD5nu0KOsQHi4rLI0/0/q37
cpkGtDaquzLy02u+P9//jwYZXjxFGsjPH/jrUv2HBjLc9j+1kbduVltS+U2D
Lrur6nrIvZsTMpiLNFjgyPU3RK6/g01r4wIN7jYzy0yQC1+nDlyfp0H37sSJ
Y/j8X1xiV83RQFrSZosdcsUjB1RDZ2jAJcbr5IzcfuDw0M+fNHj5qSDNHbk7
LeCmxxQNLm5Se3oaecDDxqPvftDgcwh90Q95mrL6mmMTNMgvWJa/gLxkY+vL
p99poGZraBWBf58anr7nGw3K1C9GXUL+M8fW6f4Ycf7RrIJE5FanbbYpjNLA
WLKgMwW55nzIMnmEBo8Tc+Zv4vyxbugW/EyD3u6UDSTkVxmKpYlDNKgsOK3N
QG4+WXV1xScaHK3Qsi1ALnf49LmgDzSwY8wElCIffrbPZuIdDWwlqdcrkB+I
0tV3G6TBnW7Ir0H+NdJBra+fBjq+XfWNyI8Mkjeb9tFgQ6btm6fIu5mrxVre
0uDLUteXF8ibJm+I6PQQv9+n/+sNct2O/SJlb2jwSziPfQD5YRPRTVu6aJAs
t5L/E/Le2PWy2Z00eCBsuWkUeVms+naBVzTgTyfJTiCPPR4ECS9oIGj0UWEG
+WeZjxbLHUTe9omqLOI4fPHxCWinQf3MEdVl5MsVkle+t9Fg954wVfb76Jy5
CwUuT4n8dM1R4UZu8HTu5dsnNEhZ3a64DvmUgsiiSQsNVr79vlkYueJHJ7nm
Jho4BXOKiyGvW+iw1m6kgc8N2fUyyM0uOSWXPqZB00tdjq3IfTOEW+XqadDw
xnJJGXnC7jm27FoapB30+aaBfDpuwUCghgYa3bG92sjfx0slJ1TT4IR4djMg
P2V69u1yJRH/9opiA+RJ3z9vDnxIg+iY1xnG+Lt8IoLHH9Bg+vtUqDlyzs97
X7rep8FSAb+LDfIXTnIKffeI/HTfqX8c+aoptQTTMhpkNbnKnEAuxTg53lJC
5NWp1BVeyP0S647tLqbB/ELrO1/k2x/o1t+7S4PNG9kqA5AHbR9W3lpIAxd/
w+sXkRvylNDI+UR8clLdo5DHWlNFhfJoMGf9RTsO+bxkdUZSDg2eKOnzJiM/
GLQotJJJ9Nun+e9SkfN5OmVdoBN946Xo3UzktWzjMlNUGswMZwSTkBfZkEvd
KTRwLBDXZyAX87+g945Eg5iWe9wFyFVdQ3qOZdPAqvfY6xKch+o032dZRH5e
Yr35ALnR/BSP3m0a1PrW2z7C9/XQvfhhJg1UdyWKNiD/FrPSQvkmUXex7n1P
kMd5tf5lpNPAdNosowO5S/C9wo1pNMjbfMTsNfLB6mbH1FQa5Nbbc/Ui37/3
nwBnCg2YLhcb3iFv43d6EXGNBm13iwKHkUftG02aT6bB6n0zW78idx/IMPVJ
ooFko/HAD+Q233yEPl+hAeN59ZVZHM/Q05/sEmgwybZn5xI+f3ZqaWccDZQ4
3g4vI79v9zHG6DINLIIuJ7M/QHvdY0v7+lgaKE4ba3IjPzgwvWNHDA2MRBQH
1iJXePhQqCiKBjwJUhFCyG2cGUsykTTIGd4utQn5p6HKodvhNBBqtW2QQl51
aO7FujAayL++47QF+SO6bX38RRoE0Jd+KyHPXRwpX75Ag1N9/hlqyGVsbt8N
DKaBFj+nyk7kNc8C8ycCaTD2vbpFF/mIw8WCEwHEPGK7YqePfGFDXsmAPw3W
LQZOGCHX5P1bae5H1LVHdPgR5I16IU/aztJAZeIurwXyu40SveBLg365X7dt
kY/enph46EPM/TIXOSfkR7qHV6ucpkHN1omSE8ipoaxyOV5E31C6reWFPCHr
oJGYJw0GLTxrfZGn7a46k+ZBAzGw1wtAvtPL7Ba3Ow2aE842hSDvUuZ/Gn2C
Bpef5+tHIs9L+7206EqDbzmrGy8hH2Lyqp1zoYFB2ZU9ichvnDbyGXOiQV2c
etV15PenC+86HafB/hZWtQzkcvt2TvU4EHOcbTEvC3n5iQmtI/Y0sPkoJE5F
znmiPabFlgZ90w4pOcjrDr7u2m1DA/Oedta7yI9JsMrftyLmjuwJvzLk237Y
RSpa0uBPkNzHCuS36wcHacdokO0pYFyD/OWdOF1RcxoI31CsaED+7ao9LeUo
sY8l+4q3Ip8i2XBzmtLAbfpDbAd+Tnd4cKQJ0c/twr52Irfb/eLrr8NEHByN
jN8iPzpg4OR7iAaH0vWKBpFbPxrr/WJEg/BbnjxDyJc+l1sdN6SBNWuD5yjy
Uue83u4DRJ/3MGoZR/52x5PjJvtpcMWFRWIa35cv79fmfcQcifsa+At5oEB4
0G49GsieZXv+B7mGggjX/b3E/lNuJsVa8Z//eDRAUdxDgzNjnf6rkSe+eqpD
303UEfNSMw/yQd8P/aI6NHgY5SPAj/w2VSI8dRcNNAWuOAsj9/BJ2My1k5i/
UwOFm5C/6N/UGbWD6AMlbnNSyPf97Itc1KBBxYiU7hbkkpWPNc6p0yBpq3CM
EvKiHZ3jY6o0gLX7W1WRC5/nznfeTvRJlXxOLeRBQb6evco0CNpoeGg38ueG
f7cd3UbUo5d4gh7yFeP351sVafC1ROWJAfIxr4ymvQo0CI66uMIYuW47Ne2h
PA12+rPqmCHPFXjrqbKF6IcbWvyskN8/tEM/dzMNRDia8+xxnAPrJSVkibnQ
tTzojDyK5Md6U5oGlmsu8Lkjn2w1HVsjRYONJtvBG7n9otXryxI0eC0t53sW
+eed8Y//idGALm1/JwD5jaThe4GbaBD/4WVrCHLbpVP5P0SJ/x3jsT8jkAvE
izDcNxB5NRCy4RLyOJ1p2nthGlTvvbf3CvITovNMKyEarC9UPHEN+QEF2aIX
62lQXDJ6OQ158dnQSgMBYl/98CX3FnLemX+tdetowNGxtZWEvLqicGDHWhpw
ri77TEe+8Dh6pngNDZ5JhbHkI58RiuXbwkuDC0VXRYuRN9WWqJC5iT1f54ta
OXLPanYLYS4anLOPPViJvHPd5dBrHMQ+Q/Y8Xov89dPt+atX06AjI+NcI3Kl
z+z9Eew0SHzNHdOK6+4UO9/CSqLeh9pSO5BfslMxOstK/F+z6qR0Ir9TF3Np
jIUGPXXSRT3ItW+xtjovUyGooO7hAPKHPwp5+v5SYWU+8/FH5BZNEVZmf6hw
72Bv6wjy3RvDGW1LVLi+0fr5N3y/SznzeotUCC2S7pxErnVyybj6FxXkr+p0
zeLzOAXnqs1TQdSY1rWI4zkuuapwlgr5Adav/yG/vHb2lMwMFVhu2b9c+fA/
h5c/X2b9pIL4/pJnHMjVlER11k9R4Q3bsWZe5B8VfAqSflCh9ZRhDT/ymhff
xNgnqOD7N+meMHLpjTfSw75TQeSobO4m5LYC7uvmv1LhwwTvbSnk6dVuKWfG
qFDldihRDvmsQJLg6BcqeO3pD1FEHi39IdtphApJXHWntiPX+Oqg0DtMuMW8
hSbycS/2R0eHqFCYF7NXG3lQQa9p20cq/E11l9+L/HpBz5jeB+K9ZDLffuT9
PsuXqt9RocRWZc4I+di8+Rb1QSrYmwj1mSDfadTZUdhPhS52y0fmyFVPhATK
9lHhyJrxLGvkCiZHZLPfUqH350CIA/KT7CY9gj1UMNfZbOOCnO9aYNLVN0T8
A56quyPXH39msLqLCpUKT3i9ka+SOMQe2UmFKyPiX3yRH94627rwkgpC27tq
ziOf4mm7eu4FFVzShlMuIG9sf2r7rYMK++8cPRmOPNhjRt6tnQo+naJaMcgf
fjL6M9BGBefafavjka/d3dZl8ZQK/l+fdichZwk+X/L8CRG390W0FOTTGYeu
GbRQIUJu2icDue7tw/71TVQwOZihlYV8c0yQ/c5GKoy+vL1Mxvdo/sKw7DEV
2vexPGEgD+E6ulOhnrgXhdYr+fichX+U6LVUuLlmyqQYearmm82baqjACLrI
V478S0GPdHo1FQwnPF8+RP6Om012TRUVtv56lFyDXNPWYWvcQyq0bPI71ID8
9o0PaiwVRDxHktifIM95lAwX7lPhYC9P/TPk7zvdzafvUcEidDrwJY5/j9cp
7zLiHm32bHuD8/zZrejPJcS9z0x96kVeVTRDcSymwtRrrvR3yE9HBjf13KXC
3vAkgyHk3fvkv5kWUmHbxcD5L8g551gF2/Kp8MC0jfEdOfdNjv378qhQEHXJ
bAr5S/ldQY9yqHA/o/DPLK7rgrRiDSYVzNbvzllEzrFx47ciOtGvIrSO/MN5
frFj6xYaFTyOk2ZZK//znrY8HwqFClya526tRr52demDDWQqpMaX7uZBvlNt
aMWNbKKvvnN4vxZ546G95jx3qNBZGRguiJznaGvOpdtEnEn/Noki99ALWf6X
SYXL/HNV4vi94jYOwTeJOrplZymDXHXEufZnOhUCKlQmtyAfTk+T9k6jwtOJ
83FKyJVVZhI/p1KhuVFBXBU5R2noomMKkVeVZuWayC2FVb3fXqPCP/NvBtrI
R93Wfjp6lQoX1s/17kEeniZq/yyJyJNIP0995M9yTfv0E6mQKOK2YIjc806J
fW0CFU46t14yxs8/qz20I54KHP3kdWbI62WmTpdepkLx6oksS+R25a9+b71E
BU/vElm7/xe3wav0GCpIxo0WHkcu78ovJxZNhRuD6apuyHvD/BsyIqlgPVH9
wAP5Ad9l57URRL/Vtt55GnmURgXblTCinxt4V51Ffq395t2VoVRYvP5rZwBy
ZzWGTVgI0Qey/lRcQP7GfYDjVzAV5EZD1MORV7vr1p4NIubvrF9xNPJOlWcB
3wKowKY/siUOeUt9lNqJ88RzLF6TE5FrrD8x886PyM9cbaHryPMUzlVanyPm
YK14YhpyEkt+VKcvFeiCEf8y8f3e4DY9fIYKt1UczmYjp3/MlGw5TYXZKxUf
qTh/Ro7O7/GmAk/uVdMc5M9J6q8qPYk8WTlSU4BcjUuvWO0UFTaKV8uXIM+S
vXD9rjuRh4FrbpTj+/0+ECh3ksjDpKHfD5HH2Xm6UNyoIPZuh1sN8i++UkdF
XYm+N8rd9hj5Snk2/TRnYu5sdd3Wgr8rYp32Gicq2EppX29DftH/oGa8IxVU
TdJ+Pke+neWuBqsDsdcpnDN7jdxaetfOUDsqhGl1lvQgD+iZ2jtvQwXun/d5
BpD/Fek6fNaayPM3m059QG715YP9N0tiP3TibBxG3qUtfPaEBRXK11wUHUNe
yX8h/r05FaaP+50bR67jxc60MSP2veeTT6aQR+rWtLw2pcKp7hnROeR34rO/
GR+hwtXZcJ9F5GmG+QKtxsQ5c1Lq/iI/HvgB9A5T4Z2H0hrWqv/8w1rwe3SQ
Cpz3TR1WIZ/gb8/VNKLCr1V/8riQmwZHfioxoILBoOrsGuQ1u50lFA5Q4UzJ
T10B5AP2Xi4MfSo8/q1zWRi5ficpV3wfFdx2r3u+EXlY5t+fmUDU7/g5fknk
K4oug8BeKkRfPm4li1ybS/tGsi5RL5feZsojjyoU/rZ6NxXYT7zrU0IulSRx
IFqbyLc7ZzeoIrfMNWP82UnsXXkp1prIDy4UrQ7SIub1Sr20Xcg3hWj4/tSk
wsLmiJe6yPu3jPR7axD5cMWYcx/ymD/1h76oEfO0IF/PAPmqmeY6Z1UqfF7O
CD6EfP+q2R0DKlQ4v1Kw+AhyPlWTcktlKqQryw6ZI9965pX6KyUqHF1qXm+N
3LAyrPKQIhUSPvw6YI+cl8tSr2UrFf5Y1QY4IV933OrFXnkqQJ8gww3fY3GU
U7UcFZrer+j0QD483zOrsZmYpx+i/ngjT9tudbVE5v/2+Qy5s8iNrJYVFaSp
8PP+XtPzyI1dXz9nSFLhbXB4YDDy90de+ktIUGFS+NidUORKQvNit8WIuclZ
9zgSuc09g471m6jwqKV+OBZ5gFhD+DVRKvA32bAnIL9kdlKTawMVhoITNicj
jzBSn4oVJvr8cfP9KTgf/iiULAsSc+pruUs68lp3Y7+Q9VQYSykOu4WcHnVz
1xw/FcjP92VmI68y4GE/u44KAgLnyqjIi0oK3nzjo8LF3l1tTOTiFX55J9cQ
+/CN7A/5yEnHTkR+5KHCvkd3ZouQl0ZFONhzE3tXsxbHPeTPdjXv7uEk9jRZ
X9EK5McC1KTMOKjwxUxfsRo5Y9szzo5VVNjdcF+7DjmHQ+K8ATsVRkabjBpx
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
nbx60VzFeYT8WlyU3m0t3v2aO48+Rl4j3NFVrMmA4Xuq26uQDwX/jWjQYMD5
C1cuVuN65Pzb2LWFAa3D3k9r8L3YvHk7osKAJyu7V9Qhf+idSPupzIAdGzoc
65EH3ZNwElFiwKDZsYwnuH4nzirLKTAg4VbAWAPy6r9Zv1TXMOCN60rNRuTZ
hcUdeqt4cypDP/wZ8oVOeomFDAM+kn5WPcfza7d1hrMkA8qdDBY34z5Z/J58
RpwBpxQkLFqQy4mb3ogUY4Dz0mBCK65HxWhCylIGzBideP0C+aJSIitdhAHX
vvTKvcR7UUZYbtFiBlhpj7i8Qm57f/vTOgEGJBtcymhHzi6vG+34RwdvzZsf
O5BvjN8kPvyHDvNa9pteI6d8cTOanaPD0UCaTxfy2Er/C8I/6RC7xDunGzmz
weqx7A86hG1+MtmD9+RuocWbv9NB+meh+lt8nnqC/e4vdAC6mv875HVOX/IO
TtDhiebO/F6ch2fWibl+ooPn55ef+5Afb1E6FzBMh+5vc2oDuB/u/z0cNUSH
p+73T7/H873ojgtpgA6tPvP3BpHz96zvu9VLhwtq7aNDyCOTgzwfvqGD7atd
yh+Ry9ykTD/tokNzpKb7MHLXkfjEng46HDhWnjqCfGTzYdXxl3TQSH71dhT5
Xhht+91Khwa9COkx3P9nrSKXN/O+m/jAehx54bokrXXP6LD85qWkCeQfEhlT
2xrosPpuz9NJ5Mqi58qM6ujArXvC9wXn1ekNsXbVdEiTMdL7ilw0+tYx78d0
2NhqFfwN34v8tG54OR1URL/nfEdetvS/tYkldEj5vv7jFPIQxUVLOQ/ooJs7
Iv8Dx1O9/l9eIR1+uO6xncFx47P9U51Hh7itGxJncV753udrz6bDXePUmp94
z98zuOxjFh0EarNnfyHXMxtQmL1NB61Wc7V55HedcveI3KRDW/KFE7+Rx5jt
d1uVRgdHFaD9wftM//3rahw6mNfRm/4iv/F1osqASQex6CsLC3iPspies6LR
QSiRbztf3f/crf7ZHg8yr14EJLz4kU9v9IsLJdDh9YpSugDyGdO+N3HJdFDr
/vp8EfKP0/JarEQ6PLr0+Lcg8j0Lm2i5cXS4pbJGXQj5BR1+vuoYOsz9EXcV
Rr7qTNbZV9F0aFzHviGCnBK0auJDJB2WlJRViSL3kHHym71Ah/sffb8sQc6n
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
Uqa1nZZfe06PYf//+i9F3Iss
    "]]},
  Axes->True,
  AxesLabel->{None, None, None},
  BoxRatios->{1, 1, 1},
  FaceGridsStyle->Automatic,
  ImageSize->185,
  PlotRange->{{-8214.981753631602, 8214.981753631602}, {-8214.981753631602, 
    8214.981753631602}, {0, 5000}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}, {Automatic, Automatic}},
  Ticks->{{{1, 
      FormBox["1", TraditionalForm]}, {2, 
      FormBox["2", TraditionalForm]}}, {{1, 
      FormBox["1", TraditionalForm]}, {167, 
      FormBox["167", TraditionalForm]}}, {{1, 
      FormBox["1", TraditionalForm]}, {188, 
      FormBox["188", TraditionalForm]}}, {{0, 
      FormBox["0", TraditionalForm]}, {205, 
      FormBox["205", TraditionalForm]}}},
  ViewPoint->Front,
  ViewVertical->{0.027040122908885154`, 0.8480332206533014, 
   0.529252764207672}]], "Output",
 CellChangeTimes->{
  3.6799864858918033`*^9, 3.679986852575591*^9, {3.6799869175252266`*^9, 
   3.6799869387808895`*^9}, 3.68000917533117*^9, {3.6800092580736427`*^9, 
   3.6800092619817085`*^9}, 
   3.680009393443959*^9},ExpressionUUID->"cb87c0dd-39dc-4322-a982-\
563550986da3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "\[Rule]", "1"}], ",", 
     RowBox[{"2", "\[Rule]", "2"}], ",", 
     RowBox[{"3", "\[Rule]", "3"}], ",", "None"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "1"}], ",", 
       RowBox[{"2", "\[Rule]", "2"}], ",", 
       RowBox[{"3", "\[Rule]", "3"}]}], "}"}], ",", "None"}], "}"}]}], 
  "}"}]], "Input",
 CellChangeTimes->{{3.679986814543357*^9, 
  3.6799868444038734`*^9}},ExpressionUUID->"5792d84d-6095-4fe9-afe5-\
000cb483d4c3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "\[Rule]", "1"}], ",", 
     RowBox[{"2", "\[Rule]", "2"}], ",", 
     RowBox[{"3", "\[Rule]", "3"}], ",", "None"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "1"}], ",", 
       RowBox[{"2", "\[Rule]", "2"}], ",", 
       RowBox[{"3", "\[Rule]", "3"}]}], "}"}], ",", "None"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.6799868451099253`*^9},ExpressionUUID->"d4b26abb-4d91-436e-8de8-\
82accbb10e41"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", "None"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "101"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "167"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "188"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "205"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "\"\<Alice\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "\"\<Bob\>\""}], "}"}]}], "}"}]}], "}"}]}], 
  "}"}]], "Input",
 CellChangeTimes->{{3.6799868921324296`*^9, 
  3.6799868929141874`*^9}},ExpressionUUID->"52ad7eaf-bbd7-46fe-8d19-\
7573af2213b2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", "None"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "101"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "167"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "188"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "205"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "\<\"Alice\"\>"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "\<\"Bob\"\>"}], "}"}]}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.6799868937461853`*^9},ExpressionUUID->"6982f109-285e-4a26-8dc0-\
62383f93934c"]
}, Open  ]]
},
WindowSize->{1920, 997},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
Magnification:>1.05 Inherited,
FrontEndVersion->"11.1 for Microsoft Windows (64-bit) (April 18, 2017)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 452002, 10091, 26409, "Input", "ExpressionUUID" -> \
"d3dc5762-0a77-46db-808e-064b68a887be"],
Cell[452585, 10115, 153556, 2970, 698, "Output", "ExpressionUUID" -> \
"c08038e8-8237-4060-8564-b3ebdd31dd1a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[606178, 13090, 162, 3, 33, "Input", "ExpressionUUID" -> \
"09af3086-f9a0-4a57-80a2-9680f2b208e8"],
Cell[606343, 13095, 229, 7, 33, "Output", "ExpressionUUID" -> \
"408becbb-82cc-4fe6-b3f7-65acd62f8072"]
}, Open  ]],
Cell[606587, 13105, 165, 3, 33, "Input", "ExpressionUUID" -> \
"10f546aa-5359-4a31-b92f-ec7bfade2b34"],
Cell[CellGroupData[{
Cell[606777, 13112, 1158, 35, 33, "Input", "ExpressionUUID" -> \
"835fe5a4-aee9-41fb-abed-8247c661d5d6"],
Cell[607938, 13149, 28423, 775, 255, "Output", "ExpressionUUID" -> \
"0d2cb827-bd1e-49c6-bbd1-ab0874a06e10"]
}, Open  ]],
Cell[CellGroupData[{
Cell[636398, 13929, 617, 17, 33, "Input", "ExpressionUUID" -> \
"144a2f75-f452-4539-ba6c-e75c373cb7cf"],
Cell[637018, 13948, 356, 8, 33, "Output", "ExpressionUUID" -> \
"b7293efa-d88d-4aeb-b8ea-20141fd5ce87"]
}, Open  ]],
Cell[CellGroupData[{
Cell[637411, 13961, 693, 18, 33, "Input", "ExpressionUUID" -> \
"c795d3c9-02e3-48c3-a040-85d81ea3f434"],
Cell[638107, 13981, 432, 9, 33, "Output", "ExpressionUUID" -> \
"54ce640d-9f33-47fa-ac2d-f8f74800e30a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[638576, 13995, 942, 21, 33, "Input", "ExpressionUUID" -> \
"4cc837a5-96b6-472b-bb42-4200919397ec"],
Cell[639521, 14018, 2123, 51, 234, "Output", "ExpressionUUID" -> \
"c978509a-ca73-4493-b914-5c89bf128746"]
}, Open  ]],
Cell[CellGroupData[{
Cell[641681, 14074, 159, 3, 33, "Input", "ExpressionUUID" -> \
"fe0b7c9e-c366-4eb8-8cd1-613596b3c53a"],
Cell[641843, 14079, 235, 7, 33, "Output", "ExpressionUUID" -> \
"d3da9ffe-8cdd-4145-8532-1bba8ee1ea62"]
}, Open  ]],
Cell[CellGroupData[{
Cell[642115, 14091, 301, 8, 33, "Input", "ExpressionUUID" -> \
"f5ef9296-1498-458d-b6b6-86417ada62cc"],
Cell[642419, 14101, 175, 4, 33, "Output", "ExpressionUUID" -> \
"82e77b88-84b2-4c51-9785-1d25fd60e89e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[642631, 14110, 164, 4, 33, "Input", "ExpressionUUID" -> \
"481215e7-7d94-4584-b87f-dc3986feaaf7"],
Cell[642798, 14116, 166, 4, 33, "Output", "ExpressionUUID" -> \
"f96201f3-11b1-433c-89e4-f1d3da41e205"]
}, Open  ]],
Cell[CellGroupData[{
Cell[643001, 14125, 822, 21, 33, "Input", "ExpressionUUID" -> \
"2ceab966-7cf0-4bdc-bcf9-1c6aeb086465"],
Cell[643826, 14148, 484, 10, 33, "Output", "ExpressionUUID" -> \
"d886e91f-cc72-4608-abd3-6386f70fb4ef"]
}, Open  ]],
Cell[CellGroupData[{
Cell[644347, 14163, 860, 25, 34, "Input", "ExpressionUUID" -> \
"962f01ab-342c-4fe3-881e-a0ab3b263740"],
Cell[645210, 14190, 277, 7, 34, "Output", "ExpressionUUID" -> \
"fe7ba720-220c-4f6b-97f7-3eea776e03cb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[645524, 14202, 279, 7, 34, "Input", "ExpressionUUID" -> \
"c7a5240d-0240-4933-a3b3-51fdd3db592b"],
Cell[645806, 14211, 603, 17, 34, "Output", "ExpressionUUID" -> \
"71b48bec-8324-4f8f-a72e-80562f1e0be3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[646446, 14233, 736, 18, 34, "Input", "ExpressionUUID" -> \
"47051f24-c755-466d-a843-829f3e6321e1"],
Cell[647185, 14253, 481, 10, 34, "Output", "ExpressionUUID" -> \
"62e79ec1-d6cc-4aa8-b81c-e10b976b63dd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[647703, 14268, 731, 15, 34, "Input", "ExpressionUUID" -> \
"05834d8d-7522-478c-b4e5-7a33ebf18b57"],
Cell[648437, 14285, 143655, 2367, 257, "Output", "ExpressionUUID" -> \
"558b7ad3-e038-4417-bb13-13657479bfdf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[792129, 16657, 1485, 39, 34, "Input", "ExpressionUUID" -> \
"6233400b-9770-4623-a105-c764e92ee711"],
Cell[793617, 16698, 143525, 2366, 220, "Output", "ExpressionUUID" -> \
"cb87c0dd-39dc-4322-a982-563550986da3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[937179, 19069, 588, 18, 34, "Input", "ExpressionUUID" -> \
"5792d84d-6095-4fe9-afe5-000cb483d4c3"],
Cell[937770, 19089, 565, 18, 34, "Output", "ExpressionUUID" -> \
"d4b26abb-4d91-436e-8de8-82accbb10e41"]
}, Open  ]],
Cell[CellGroupData[{
Cell[938372, 19112, 867, 28, 34, "Input", "ExpressionUUID" -> \
"52ad7eaf-bbd7-46fe-8d19-7573af2213b2"],
Cell[939242, 19142, 842, 28, 34, "Output", "ExpressionUUID" -> \
"6982f109-285e-4a26-8dc0-62383f93934c"]
}, Open  ]]
}
]
*)

